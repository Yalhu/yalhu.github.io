<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-05-03T05:25:34.601Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell指令</title>
    <link href="http://yoursite.com/sum/os/linux%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%B7%AE%E5%BC%82/"/>
    <id>http://yoursite.com/sum/os/linux指令系统差异/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.601Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2022.4.12 星期二 : </p><p>centos 区分大小写。<br>mac 不区分。<br><!-- bamboo 流水线build的时候 `Module not found: Error: Can't resolve` --></p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>centos 和 mac 指令有差异</p><p>centos: <code>cp -rf ${WORKSPACE}/${globalParams.system.APP_IDENTIFIER}/dist/* ./assets/</code><br>mac: <code>cp -R ./dist/ ../m_static/assets</code></p><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>centos: <code>sed -i &#39;s/old/new/g&#39; ./*</code><br>mac:  <code>sed -i &#39;&#39; &#39;s/staging\.//g&#39; ./*</code><br><!--  在mac 上 sed -i 报错：`unterminated substitute pattern`需要多加一个空白参数。linux 不需要。解决：<!-- [Mac OSX sed - removing a string containing a dot from multiple files](https://unix.stackexchange.com/questions/465368/mac-osx-sed-removing-a-string-containing-a-dot-from-multiple-files) --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2022.4.12 星期二 : &lt;/p&gt;


&lt;p&gt;centos 区分大小写。&lt;br&gt;mac 不区分。&lt;br&gt;&lt;!-- bamboo 流水线build的时候 `Module not fo
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>前端规范</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/sum/jsplus/前端规范总结/</id>
    <published>2022-04-06T00:00:00.000Z</published>
    <updated>2022-05-04T07:54:08.473Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2022.4.6 星期三 : </p><h1 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h1><p><a href="https://juejin.cn/post/6844903897610321934#" target="_blank" rel="noopener">if 我是前端团队 Leader，怎么制定前端协作规范?</a></p><p>9.1 异常处理<br>&lt;阿里巴巴的Java开发手册&gt;中总结的异常处理规范对JavaScript的异常处理也很有参考意义，比如:</p><ul><li>异常不要用来做流程控制，条件控制。</li></ul><h1 id="grab-front-end-guide"><a href="#grab-front-end-guide" class="headerlink" title="grab/front-end-guide"></a>grab/front-end-guide</h1><p>grab/front-end-guide: <a href="https://github.com/grab/front-end-guide#monitoring" target="_blank" rel="noopener">https://github.com/grab/front-end-guide#monitoring</a></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>p3c/p3c-gitbook/异常日志/: <a href="https://github.com/alibaba/p3c/tree/master/p3c-gitbook/异常日志" target="_blank" rel="noopener">https://github.com/alibaba/p3c/tree/master/p3c-gitbook/异常日志</a></p><h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><h3 id="eslint-config-ali"><a href="#eslint-config-ali" class="headerlink" title="eslint-config-ali"></a>eslint-config-ali</h3><p>eslint-config-ali: <a href="https://www.npmjs.com/package/eslint-config-ali" target="_blank" rel="noopener">https://www.npmjs.com/package/eslint-config-ali</a></p><h3 id="eslint-config-taro"><a href="#eslint-config-taro" class="headerlink" title="eslint-config-taro"></a>eslint-config-taro</h3><h3 id="eslint-plugin-react"><a href="#eslint-plugin-react" class="headerlink" title="eslint-plugin-react"></a>eslint-plugin-react</h3><p>eslint-plugin-react： <a href="https://github.com/yannickcr/eslint-plugin-react/tree/master/lib/rules" target="_blank" rel="noopener">https://github.com/yannickcr/eslint-plugin-react/tree/master/lib/rules</a></p><h3 id="团队特定"><a href="#团队特定" class="headerlink" title="团队特定"></a>团队特定</h3><p>该 ESLint 配置是参考了 StandardJS 和 Airbnb 的 JS 规范，然后结合业务中的最佳实践整理输出的。</p><p>ESLint 规则说明<br>规范主要参考了 StandardJS 和 Airbnb JS StyleGuide，也有部分参考了 Google 最近新出的 JS StyleGuide。但由于小程序项目的特殊性，种种历史原因，下面选出一些争论比较多的规则进行说明：<br>semi: 不强制使用末尾尾号，可加可不加。（目前行业内的规范趋势是必须使用分号，Google 也是这么规定的）<br>indent: 历史原因，还是保留4个空格作为缩进。（目前行业内的规范趋势是使用2个空格作为缩进）<br>camelcase: 命名请务必使用驼峰式命名，由于涉及的代码较多，暂时关闭该检测规则<br>prefer-template: 很多同学还是按照 ES5 的写法拼接字符串，涉及的改动偏多，所以暂时不强制使用 ES6 的模板字符串</p><h1 id="Node-js-最佳实践"><a href="#Node-js-最佳实践" class="headerlink" title="Node.js 最佳实践"></a>Node.js 最佳实践</h1><p>Node.js 最佳实践: <a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md" target="_blank" rel="noopener">https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2022.4.6 星期三 : &lt;/p&gt;



&lt;h1 id=&quot;前端规范&quot;&gt;&lt;a href=&quot;#前端规范&quot; class=&quot;headerlink&quot; title=&quot;前端规范&quot;&gt;&lt;/a&gt;前端规范
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="lint" scheme="http://yoursite.com/tags/lint/"/>
    
  </entry>
  
  <entry>
    <title>VIP理解</title>
    <link href="http://yoursite.com/sum/others/VIP%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/sum/others/VIP理解/</id>
    <published>2022-04-06T00:00:00.000Z</published>
    <updated>2022-05-04T08:21:31.892Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2022.4.6 星期三 : </p><p><a href="https://www.zhihu.com/question/67682565" target="_blank" rel="noopener">virtual IP address(VIP)是怎么工作的？</a><br>virtual IP address(VIP)</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>vip的目的是为了高可用性<br>为了避免单点故障，部署多个实例提供服务<br>这些实例之间使用统一的协议进行存活检测（心跳）<br>并且定义了vip的使用优先级<br>在一个时间点，可能有一个实例或者多个实例在使用vip</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>VIP是为了实现高可用性而设置的一类IP地址，这类IP地址不与特定的实例（比如集群中的一台服务器/路由器，或者一台服务器多个网卡中的某一个网卡）绑定，具有较高的可靠性<br>physical ip address是为了弥补VIP的一些局限性而存在的IP地址</p><p>我们一般叫他逻辑地址，相对于网卡上配的物理地址而言的。<br>好处呢，是随便哪个链路活着这个逻辑地址就可以被访问。当然，整个网路上还要把逻辑地址的路由配置能到达两个物理地址的网口。</p><p>最近正打算做 LVS 集群的实验，我就从集群的角度简单说一下吧。VIP 一般是由多个负载均衡器共同维护的，负载均衡器一般为主备模式。发到 VIP 上的数据在正常情况下由主负载均衡器维护，当主负载均衡器宕掉时，备负载均衡器马上接管。负载均衡器之间的通信要通过实体 IP，实体 IP 对于外部也是透明的，外部的客户端只知道 VIP 就可以了。</p><h2 id="VIP-工作原理"><a href="#VIP-工作原理" class="headerlink" title="VIP 工作原理"></a>VIP 工作原理</h2><!-- [virtual IP address(VIP)是怎么工作的？ - Kavi Zhang的回答 - 知乎](https://www.zhihu.com/question/67682565/answer/257858151) --><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>公司相关项目部署涉及到VIP并有固定VIP和域名VIP两种，出于不懂就学的心态，发现网上关于VIP相关网络和架构相关的文章少之又少，自己了解得七七八八于是在这里小小做一下总结，当作一个学习笔记。</p><h3 id="2、Virtual-IP-address-VIP"><a href="#2、Virtual-IP-address-VIP" class="headerlink" title="2、Virtual IP address(VIP)"></a>2、Virtual IP address(VIP)</h3><h4 id="为什么使用VIP？"><a href="#为什么使用VIP？" class="headerlink" title="为什么使用VIP？"></a>为什么使用VIP？</h4><p>VIP的初衷就是进行容灾配置，举个栗子：当前有两台服务器Server部署着资源，客户端Client访问Server1并进行DNS缓存域名到Server1的IP，当下一次获取资源时，在Server1服务器宕机的情况下，由于DNS缓存，就会出现获取不到资源的情况，而另外的一台服务器Server2在此刻就如过客，并没有起到什么作用，Server1和Server2并没有什么关联，在这种情况下衍生出VIP来解决这种单点故障问题。</p><h4 id="VIP是什么？"><a href="#VIP是什么？" class="headerlink" title="VIP是什么？"></a>VIP是什么？</h4><p>VIP = Virtual IP Address，虚拟IP地址，主要是用来进行不同主机之间的切换，主要用在服务器的主从切换。VIP的目的是为了高可用性，为了避免单点故障，部署多个实例提供服务，同时可以在VIP做负载均衡</p><p>下面举个栗子：<br>。。。<br>这样，我们就规避了由于Server的单个网络接口故障导致的应用中断，这个4.4.4.1，就是一个VIP由于这个IP不与物理接口绑定，所以这个IP不会因为物理接口的故障而实效。通过VIP就可以解决前面提出的DNS缓存IP导致单点故障的问题了，那部署VIP的服务器出现故障了该怎么办？</p><p>作者：Yaoii<br>链接：<a href="https://www.zhihu.com/question/67682565/answer/2314231115" target="_blank" rel="noopener">https://www.zhihu.com/question/67682565/answer/2314231115</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="3、VIP进阶"><a href="#3、VIP进阶" class="headerlink" title="3、VIP进阶"></a>3、VIP进阶</h3><p>当域名解析到固定的VIP，当部署VIP的服务器出现故障了该怎么办？<br>这时候就需要用上另外一个域名，部署两台VIP，当其中一台VIP宕机，DNS域名解析指向备用VIP服务器即让 VIP 自动漂移到另一台服务器。域名不变的情况下，让请求转移到正常的机器，减少服务故障时间。</p><!-- 运维人员手动修改 DNS 解析，将域名解析到另一台服务器。或者程序定期检测，发现有问题就自动发起修改 DNS 解析的请求，这种虽然简单暴力，但是存在问题，在 DNS 解析生效之前，服务完全不可用。客户端会缓存 DNS 解析，也要等客户端缓存过期。解决不了实际的问题。 --><p>可以将域名解析到所有服务器。程序定期做检测，当发现有问题的时候发起请求，让 DNS 将故障的 IP 移除掉。DNSPod 自带这个功能，解决了在 DNS 解析生效之前，服务完全不可用的问题。不需要修改 DNS 解析，秒级别的生效延迟，用户无感知。</p><p>让 VIP自动漂移到另一台服务器可以使用Keepalived，另一种是比较复杂的 Heartbeat<br>通过修改heartbeat的配置文件，可以指定一台heartbeat服务器作为主服务器，另一台自动成为热备服务器。在热备服务器上面配置heartbeat守护程序来监听来自主服务器的心跳信息。如果在规定时间内，无法监听到心跳信息，那么就启动故障转移，取得主服务器上的相关资源的所有权，接替主服务器继续不间断的提供服务，从而达到资源以及服务高可用的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2022.4.6 星期三 : &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/67682565&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
      <category term="operation" scheme="http://yoursite.com/tags/operation/"/>
    
  </entry>
  
  <entry>
    <title>Maven使用记录</title>
    <link href="http://yoursite.com/sum/server/maven%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/server/maven使用记录/</id>
    <published>2022-03-23T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.602Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2022.3.23 星期三 14:00 </p><!-- \# 1 [学Maven，这篇万余字的教程，真的够用了！](https://www.cnblogs.com/lenve/p/12047793.html) --><h2 id="1-Maven-介绍"><a href="#1-Maven-介绍" class="headerlink" title="1 Maven 介绍"></a>1 Maven 介绍</h2><h3 id="1-2-Maven-是什么"><a href="#1-2-Maven-是什么" class="headerlink" title="1.2 Maven 是什么"></a>1.2 Maven 是什么</h3><p>Maven 是一个项目管理工具，它包含了一个项目对象模型（Project Object Model），反映在配置中，就是一个 pom.xml 文件。是一组标准集合，一个项目的生命周期、一个依赖管理系统，另外还包括定义在项目生命周期阶段的插件(plugin)以及目标(goal)。</p><p>当我们使用 Maven 的使用，通过一个自定义的项目对象模型，pom.xml 来详细描述我们自己的项目。</p><p>Maven 中的有两大核心：</p><ul><li>依赖管理：对 jar 的统一管理(Maven 提供了一个 Maven 的中央仓库，<a href="https://mvnrepository.com/，当我们在项目中添加完依赖之后，Maven" target="_blank" rel="noopener">https://mvnrepository.com/，当我们在项目中添加完依赖之后，Maven</a> 会自动去中央仓库下载相关的依赖，并且解决依赖的依赖问题)</li><li>项目构建：对项目进行编译、测试、打包、部署、上传到私服等</li></ul><!-- ## 2. Maven 安装Maven 是 Java 项目，因此必须先安装 JDK。> 如果使用了 IntelliJ IDEA ，可以不用去额外下载 Maven，直接使用 IDEA 中自带的 Maven 插件即可。IntelliJ IDEA 中自带的 Maven 插件在 \ideaIU-2019.2.4.win\plugins\maven\lib\maven3## 3. Maven 配置实际上，没有特殊需求的话，安装好之后直接就可以用了。一般来说，还是需要稍微配置一下，比如中央仓库的问题。默认使用 Maven 自己的中央仓库，使用起来网速比较慢，这个时候，可以通过修改配置文件，将仓库改成国内的镜像仓库，国内仓库使用较多的是阿里巴巴的仓库。## 4. Maven 常用命令Maven 中有一些常见的命令，如果使用 Eclipse 需要手动敲命令，如果使用 IDEA 的话，可以不用命令，直接点点点就可以了。## 5. IDEA 中使用 Maven不同于 Eclipse，IDEA 安装完成后，就可以直接使用 Maven 了。 --><h2 id="6-Maven-依赖管理"><a href="#6-Maven-依赖管理" class="headerlink" title="6. Maven 依赖管理"></a>6. Maven 依赖管理</h2><p>Maven 项目，如果需要使用第三方的控件，都是通过依赖管理来完成的。这里用到的一个东西就是 pom.xml 文件，概念叫做项目对象模型（POM，Project Object Model），我们在 pom.xml 中定义了 Maven 项目的形式，所以，pom.xml 相当于是 Maven 项目的一个地图。就类似于 web.xml 文件用来描述三大 web 组件一样。</p><p>这个地图中都涉及到哪些东西呢？</p><p>6.1 Maven 坐标<br>6.2 依赖冲突<br>&lt;!– </p><h2 id="7-Maven-私服"><a href="#7-Maven-私服" class="headerlink" title="7. Maven 私服"></a>7. Maven 私服</h2><h2 id="8-聚合工程-–-gt"><a href="#8-聚合工程-–-gt" class="headerlink" title="8. 聚合工程 –&gt;"></a>8. 聚合工程 –&gt;</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2022.3.23 星期三 14:00 &lt;/p&gt;


&lt;!-- \# 1 [学Maven，这篇万余字的教程，真的够用了！](https://www.cnblogs.com/lenve/p
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="server" scheme="http://yoursite.com/categories/sum/server/"/>
    
    
  </entry>
  
  <entry>
    <title>Eslint使用记录</title>
    <link href="http://yoursite.com/sum/jsplus/eslint%20%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/jsplus/eslint 使用记录/</id>
    <published>2022-03-16T00:00:00.000Z</published>
    <updated>2022-05-04T07:52:05.375Z</updated>
    
    <content type="html"><![CDATA[<p>Configuring ESLint: <a href="https://eslint.bootcss.com/docs/user-guide/configuring" target="_blank" rel="noopener">https://eslint.bootcss.com/docs/user-guide/configuring</a><br><a id="more"></a> </p><p style="text-align:right">2022.3.16 星期三 17:00</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><!-- \#1 [eslint中extends plugin config的区别](https://zhuanlan.zhihu.com/p/386373956) --><h3 id="extends-和-plugins"><a href="#extends-和-plugins" class="headerlink" title="extends 和 plugins"></a>extends 和 plugins</h3><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>extends可以看做是集成一个个配置方案的最佳实践。它配置的内容实际就是一份份别人配置好的.eslintrc.js。</p><p>允许 extends 配置多个模块，如果规则冲突，位置靠后的包将覆盖前面的。rules 中的规则相同，并且优先级恒定高于 extends，类似class的extends，支持多继承。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends: [ </span><br><span class="line">    <span class="string">'eslint-config-myconfig'</span>, <span class="comment">// 全称 </span></span><br><span class="line">    <span class="comment">//'myconfig' 缩写 </span></span><br><span class="line">    <span class="string">'plugin:myplugin/recommended'</span> <span class="comment">// 插件中的 config </span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><!-- !#1 > 使用别人提供的包， 如google 通过使用上述说明，用户可以轻松使用Google JavaScript样式指南中的编码约定，而无需从头开始编写设置。--><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><!-- !#1 > ESLint提供的默认规则涵盖了基本规则，但JavaScript可以使用的范围非常广泛。因此，您可能希望规则不在默认规则中。在这种情况下，可以在ESLint中开发自己的独立规则。为了让第三方开发自己的规则，ESLint允许使用插件。如果你在npm中搜索eslint-plugin- *，你可以找到第三方提供的大量自定义插件。如果ESLint的默认规则未提供您要使用的规则，则建议您查找插件。与可共享配置类似，它很容易设置。例如，如果要对React代码执行静态分析，可以安装名为eslint-plugin-react的插件，并使用以下设置来执行React语法特有的静态分析。 --><p>引入 plugin 可以理解为只是加载了插件，引入了额外的 自定义的rules。需要在 rules、extends 中定义后才会生效，如果没有则不生效。</p><p>plugin里不仅包括自定义的rules，还可以配置config，即总结的最佳实践，类似配置好的.eslintrc.js，因此这部分可以在extends里配置：plugin:config名称。</p><h4 id="eslint的extends、plugin的区别"><a href="#eslint的extends、plugin的区别" class="headerlink" title="eslint的extends、plugin的区别"></a>eslint的extends、plugin的区别</h4><table><thead><tr><th>–</th><th>extends</th><th>plugin</th></tr></thead><tbody><tr><td>命名</td><td>eslint-config-或 @scope/eslint-config 或 @scope/eslint-config-myconfig</td><td><code>eslint-plugin-&lt;plugin-name&gt;</code>或<code>@scope/eslint-plugin-&lt;plugin-name&gt;</code></td></tr><tr><td>用途</td><td>集成一个个配置方案的最佳实践，即别人配置好的.exlintrc.js</td><td>必有：一堆自定义的规则的集合;可能有：总结的最佳实践</td></tr><tr><td>配置</td><td>全称：eslint-config-myconfig 缩写：myconfig插件中的config：plugin:plugin-name/config-name 如plugin:myplugin/recommended</td><td>全称：eslint-plugin-myconfig 缩写：myconfig</td></tr></tbody></table><p>extends里的config和plugin里的config的区别</p><p>extends中的config<br>extends的一种命名规范<br>extends扩展名称格式必须为<code>eslint-config-&lt;name&gt;</code></p><p>plugin中的config<br>plugin里的一个属性<br>    用于配置一堆自定义的规则的集合</p><!-- End: #1 --><h2 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><code>eslint &#39;import&#39; and &#39;export&#39; may appear only with &#39;sourceType: module&#39;</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;parserOptions&quot;: &#123;</span><br><span class="line">   &quot;ecmaVersion&quot;: 6,</span><br><span class="line">   &quot;sourceType&quot;: &quot;module&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SMTC"><a href="#SMTC" class="headerlink" title="SMTC"></a>SMTC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"module"</span>,</span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">        <span class="string">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  globals: &#123;</span><br><span class="line">    <span class="comment">// "JD": "readonly",</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="comment">// "eslint:recommended",</span></span><br><span class="line">    <span class="comment">// "@jd/eslint-config-jd",</span></span><br><span class="line">    <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">    <span class="comment">// "taro/react"</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="plugins-1"><a href="#plugins-1" class="headerlink" title="plugins"></a>plugins</h1><h2 id="eslint-config-taro"><a href="#eslint-config-taro" class="headerlink" title="eslint-config-taro"></a>eslint-config-taro</h2><p>eslint-config-taro: <a href="https://www.npmjs.com/package/eslint-config-taro" target="_blank" rel="noopener">https://www.npmjs.com/package/eslint-config-taro</a></p><p>Taro ESLint config，只有当 ESLint 规则全部都通过时，Taro 小程序端才可能正常运行。<br><code>npm install eslint babel-eslint eslint-config-taro eslint-plugin-taro eslint-plugin-react eslint-plugin-import --save-dev</code></p><p>在 .eslintrc 中设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;taro&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- PS: taro 和 taro/react 的效果一样。"eslint-config-taro": "3.4.1", 原理待确认。 --><p>插件包含了四个方面的规则：</p><ul><li>自定义规则 (via eslint-plugin-taro)</li><li>变量定义规则</li><li>import 规则 (via eslint-plugin-import)</li><li>JSX 规则 (via eslint-plugin-react)</li></ul><h2 id="eslint-plugin-taro"><a href="#eslint-plugin-taro" class="headerlink" title="eslint-plugin-taro"></a>eslint-plugin-taro</h2><p>eslint-plugin-taro: <a href="https://www.npmjs.com/package/eslint-plugin-taro" target="_blank" rel="noopener">https://www.npmjs.com/package/eslint-plugin-taro</a></p><p>规则<br>taro/custom-component-children<br>taro/if-statement-in-map-loop<br>taro/manipulate-jsx-as-array<br>taro/no-anonymous-function-in-props<br>taro/no-jsx-in-class-method<br>taro/no-jsx-in-props<br>taro/no-ref<br>taro/no-spread-in-props<br>taro/no-stateless-component</p><h2 id="eslint-plugin-react"><a href="#eslint-plugin-react" class="headerlink" title="eslint-plugin-react"></a>eslint-plugin-react</h2><p>eslint-plugin-react: <a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="noopener">https://www.npmjs.com/package/eslint-plugin-react</a></p><h2 id="eslint-plugin-import"><a href="#eslint-plugin-import" class="headerlink" title="eslint-plugin-import"></a>eslint-plugin-import</h2><p>eslint-plugin-import: <a href="https://www.npmjs.com/package/eslint-plugin-import" target="_blank" rel="noopener">https://www.npmjs.com/package/eslint-plugin-import</a></p><blockquote><p>This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names. All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Configuring ESLint: &lt;a href=&quot;https://eslint.bootcss.com/docs/user-guide/configuring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://eslint.bootcss.com/docs/user-guide/configuring&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="lint" scheme="http://yoursite.com/tags/lint/"/>
    
  </entry>
  
  <entry>
    <title>Msys2使用</title>
    <link href="http://yoursite.com/sum/os/msys2%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/os/msys2使用/</id>
    <published>2022-03-16T00:00:00.000Z</published>
    <updated>2022-05-01T12:28:34.622Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下也装上zsh+ohmyzsh的爽快。</p><a id="more"></a> <p>当然最简单的方式就是使用wsl安装<!-- ，不过由于各种原因，我放弃了wsl，而是选择使用的MSYS2 --><br>现在使用 msys2。</p><p style="text-align:right">2022.3.16 星期三 17:40</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><!-- \#1 [MSYS2 安装和配置](https://www.bbsmax.com/A/QW5YZmmNdm/) --><p>msys2 和 cygwin 类似，提供了一个类 Linux 的 shell 环境和工具链，同时还使用了 arch linux 的 pacman 管理软件包，比 cygwin 的软件包管理要简单方便。windows 上的安装包可直接在 github 找到 <a href="http://msys2.github.io/" target="_blank" rel="noopener">http://msys2.github.io/</a> 。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pacman -Su <span class="comment">#升级软件包</span></span><br><span class="line">pacman -Ss <span class="comment">#查找软件</span></span><br><span class="line">pacman -S  <span class="comment">#安装软件</span></span><br><span class="line">pacman -Sl <span class="comment">#列出支持软件</span></span><br><span class="line">pacman -Qi <span class="comment">#查看某个软件包信息</span></span><br><span class="line">pacman -Ql <span class="comment">#列出软件包内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line">pacman -Q 软件名: <span class="comment">#查看软件包是否已安装，已安装则显示软件包名称和版本</span></span><br><span class="line">pacman -Qs 关键字: <span class="comment">#搜索已安装的软件包</span></span><br><span class="line">pacman -Rs 软件名: <span class="comment">#删除软件，同时删除本机上只有该软件依赖的软件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## help</span></span><br><span class="line">pacman -h</span><br><span class="line">pacman -S -h</span><br></pre></td></tr></table></figure></p><!-- 乱码问题在 windows 上，由于编码的问题，在 msys2 上运行 windows 的程序会有乱码的现象。这里 http://www.annhe.net/article-3482.html 给出了解决办法。首先，增加一个 /bin/win 的处理文件，当调用 windows 上的常用命令时，通过此文件，调用 iconv 进行编码转换 ::#!/bin/bash$@ |iconv -f gbk -t utf-8然后，新建或修改 /etc/profile.d/alias.sh ，增加windows 下的常用命令 ::<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">"/bin/ls --color=tty --show-control-chars"</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">"/bin/grep --color"</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">"/bin/ls --color=tty --show-control-chars -l"</span></span><br><span class="line"><span class="built_in">alias</span> ping=<span class="string">"/bin/win ping"</span></span><br><span class="line"><span class="built_in">alias</span> netstat=<span class="string">"/bin/win netstat"</span></span><br><span class="line"><span class="built_in">alias</span> nslookup=<span class="string">"/bin/win nslookup"</span></span><br></pre></td></tr></table></figure><p>现在， ping netstat nslookup 等 windows 命令的输出会被自动转换为 utf8 编码显示。</p><p> –&gt;<br><!-- End: #1 --><p></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><!-- [Windows安装zsh](https://blog.csdn.net/weixin_41100576/article/details/108424593) --><p><a href="https://blog.csdn.net/weixin_28676983/article/details/112936479" target="_blank" rel="noopener">pacman 查询_pacman常用命令</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><!-- \#2 [在cygwin或msys2环境下安装nodejs - 注记](https://blog.csdn.net/newdriver2783/article/details/115101662) --><!-- 尝试方法一（失败）：启动终端MSYS2，使用pacman安装，先进行检索，输入命令`pacman -Ss nodejs`没有任何结果（说明服务器端并不提供这个包）尝试方法二（失败）：到官方网站下载：https://nodejs.org/en/download/启动终端MSYS2，使用pacman安装pacman -U c:/Users/.../Downloads/node-v14.16.0-linux-x64.tar.xz注：以上省略号部分表示当前用户名。PS: 失败。node 不能执行尝试方案三（成功）：在虚拟系统中，linux命令对应的文件往往是一个exe文件，因此，可以考虑直接使用windows已安装的程序（前提是windows已安装该程序）。启动终端MSYS2，修改.bashrc文件`vim .bashrc`在文件末尾添加一行`export  PATH=$PATH:/c/program\ files/nodejs`接下来重新启动MSYS2终端，用which node可以找到这个命令，用vim-plug也正常。PS: 失败。直接修改.bashrc 文件，msys2会退出（打不开）。  修改bash_profile, 换了好几个路径，都不能识别到nodejs。指定路径去执行node.exe 是成功的。然后指定路径去执行`npm run build`，node 路径还是找不到。最后，只能试试在shell中设置node 环境变量了。 // 待验证。或者其他方式，或者解决这个问题。 --><!-- End: #1 --><h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><!-- windows 10 使用zsh：控制面板 -》程序 》 启用或关闭windows功能：Linux --><!-- \# [关于WSL(Windows上的Linux子系统)的简单介绍及安装](https://www.cnblogs.com/skyshalo/p/7724072.html) --><p>首先要说一句，其实Windows 10在一周年更新（1607，内部版本14393）的时候就加入了wsl，但是直到刚刚更新的秋季创意者更新（1709，内部版本16299），wsl才正式脱离beta，逐渐趋于稳定，所以我选择这个时候再写这篇文章。以下内容都是基于秋季创意者更新（1709，内部版本16299.19）。</p><p>首先打开设置，进入应用，选择程序和功能，点击启用或关闭Windows功能，勾选适用于Linux的Windows子系统，接下来重启。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><!-- \# [windows上的linux子系统（WSL）](https://blog.csdn.net/jdbdh/article/details/88653434) --><p>Windows Subsystem for Linux（WSL）是一个用于在本地运行linux二进制可执行文件（ELF格式）的兼容层。与虚拟机相比，wsl没有虚拟硬件的过程，而是直接在windows上虚拟一个linux内核，模拟linux系统调用，以运行linux执行文件。因此效率要比虚拟机高，但是它使用的是自己实现的init进程而不是发行版的init进程，并且几乎没有实现任何系统服务，因此只适用于软件的开发，而不是作为桌面环境或生产性的服务器。</p><p style="text-align:right"> </p><h1 id="指令别名"><a href="#指令别名" class="headerlink" title="指令别名"></a>指令别名</h1><p>最后，还是失败了。<br>回到最开始，设置一些常用的指令别名。比如git 的。<br><!-- windows系统 bash 也是可以的 --><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><!-- [windows git bash 设置别名提高效率](https://blog.csdn.net/manbudezhu/article/details/103553471)[【小技巧系列】- Windows下为Git 命令设置别名](https://blog.csdn.net/qq_31272101/article/details/103775454)3. IDEA terminal终端配置为Git Bash --><p>设置一些git别名（保持zsh一致）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">alias g=&apos;git&apos;</span><br><span class="line">alias gcl=&apos;git clone&apos;</span><br><span class="line">alias gst=&apos;git status&apos;</span><br><span class="line">alias glg=&apos;git log&apos;</span><br><span class="line">alias gco=&apos;git checkout&apos;</span><br><span class="line">alias gci=&apos;git commit&apos;</span><br><span class="line">alias gb=&apos;git branch&apos;</span><br><span class="line">alias gl=&apos;git pull&apos;</span><br><span class="line">alias gp=&apos;git push&apos;</span><br><span class="line"></span><br><span class="line">alias grb=&apos;git rebase&apos;</span><br><span class="line">alias gstl=&apos;git stash list&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下也装上zsh+ohmyzsh的爽快。&lt;/p&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>Airbnb风格学习</title>
    <link href="http://yoursite.com/w3/frontend/airbnb%E9%A3%8E%E6%A0%BC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/w3/frontend/airbnb风格学习/</id>
    <published>2022-02-22T00:00:00.000Z</published>
    <updated>2022-05-03T06:36:37.466Z</updated>
    
    <content type="html"><![CDATA[<p>Airbnb JavaScript Style Guide: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a><br><!-- 中文版: <https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md> --><br><a id="more"></a></p><p style="text-align:right"> 2022.2.22 星期二 : </p><h2 id="1-类型"><a href="#1-类型" class="headerlink" title="1 类型"></a>1 类型</h2><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3 对象"></a>3 对象</h2><p>3.7 不要直接调用 Object.prototype上的方法，如 hasOwnProperty、propertyIsEnumerable、isPrototypeOf。</p><p>3.8 对象浅拷贝时，更推荐使用扩展运算符（即 … 运算符），而不是 Object.assign。获取对象指定的几个属性时，用对象的 rest 解构运算符（即 … 运算符）更好。eslint: prefer-object-spread</p><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4 数组"></a>4 数组</h2><p>4.3 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。<br>4.4 用 … 运算符而不是 Array.from 来将一个可迭代的对象转换成数组。<br>4.5 用 Array.from 将一个类数组对象转成一个数组。<br>4.6 用 Array.from 而不是 … 运算符去做 map 遍历。 因为这样可以避免创建一个临时数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 4.6</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].map(bar);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="built_in">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure></p><!-- 4.7 在数组方法的回调函数中使用 return 语句。如果函数体由一条返回一个表达式的语句组成，并且这个表达式没有副作用， 这个时候可以忽略 return，详见 8.2。eslint: array-callback-return --><h2 id="5-解构"><a href="#5-解构" class="headerlink" title="5 解构"></a>5 解构</h2><!-- 5.3 多个返回值用对象的解构，而不是数组解构。`return { left, right, top, bottom };` --><h2 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6 字符串"></a>6 字符串</h2><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7 函数"></a>7 函数</h2><p>7.1 使用命名函数表达式而不是函数声明。eslint: func-style<br><!-- 7.3 不要在非函数块（if、while 等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但不同浏览器的解析方式不同，这是一个坏消息。eslint: no-loop-func 7.4 注意：ECMA-262 中对块（block）的定义是： 一系列的语句。但是函数声明不是一个语句， 函数表达式是一个语句。--><br>7.6 不要使用 arguments，用收集参数语法 … 代替。eslint: prefer-rest-params<br>7.9 把默认参数赋值放在最后。eslint: default-param-last<br>7.11 函数定义部分要有空格。eslint: space-before-function-paren space-before-blocks<br>7.12 不要修改参数. eslint: no-param-reassign</p><blockquote><p>为什么？操作参数对象对原始调用者会导致意想不到的副作用。就是不要改参数的数据结构，保留参数原始值和数据结构。<br>7.13 不要对参数重新赋值。eslint: no-param-reassign<br><!-- > 为什么？参数重新赋值会导致意外行为，尤其是对 arguments。这也会导致优化问题，特别是在 V8 引擎里。 --></p></blockquote><!-- 7.15 调用或者编写一个包含多个参数的函数的缩进，应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数，每行逗号结尾。$_PS: 不需要关心 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 7.6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ### 7.12</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ### 7.14</span></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...x);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h2 id="8-箭头函数"><a href="#8-箭头函数" class="headerlink" title="8 箭头函数"></a>8 箭头函数</h2><p>8.2 如果函数体由一个没有副作用的 表达式 语句组成，删除大括号和 return。否则，使用大括号和 return 语句。 eslint: arrow-parens, arrow-body-style<br>8.3 如果表达式涉及多行，把他包裹在圆括号里以提高可读性。<br>8.4 在箭头函数参数两头，总是使用小括号包裹住参数，这样做使代码更清晰且一致. eslint: arrow-parens<br>8.5 避免箭头函数（=&gt;）和比较操作符（&lt;=, &gt;=）混淆. eslint: no-confusing-arrow<br>8.6 使箭头函数体有一个清晰的返回。 eslint: implicit-arrow-linebreak</p><h2 id="9-类与构造函数"><a href="#9-类与构造函数" class="headerlink" title="9 类与构造函数"></a>9 类与构造函数</h2><!-- PS: 下面因为写的少啊：9.4 自己写 toString() 方法是可以的，但需要保证它可以正常工作且没有副作用。9.5 如果没有特别定义，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint: no-useless-constructor9.7 除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用 this 或被写成静态方法。 作为一个实例方法表明它应该根据实例的属性有不同的行为。eslint: class-methods-use-this --><h2 id="10-模块"><a href="#10-模块" class="headerlink" title="10 模块"></a>10 模块</h2><p>10.2 不要用 import 通配符， 即 * 这种方式。<br>10.3 不要直接从 import 中直接 export。<br>10.4 一个路径只 import 一次。eslint: no-duplicate-imports<br>10.5 不要导出可变的东西。eslint: import/no-mutable-exports<br>10.6 在一个单一导出模块里，用 export default 更好。eslint: import/prefer-default-export<br>10.8 多行 import 应该缩进，就像多行数组和对象字面量一样。<br><!-- 10.9 在 import 语句里不允许 Webpack loader 语法。eslint: import/no-webpack-loader-syntax --></p><h2 id="11-迭代器与生成器"><a href="#11-迭代器与生成器" class="headerlink" title="11 迭代器与生成器"></a>11 迭代器与生成器</h2><p>11.1 不要用迭代器。使用 JavaScript 高级函数代替 for-in、 for-of。eslint: no-iterator no-restricted-syntax<br><!-- > 为什么？这强调了我们不可变的规则。 处理返回值的纯函数比处理副作用更容易。 --><br><!-- 11.2 现在暂时不要使用生成器。为什么？生成器目前不能很好地转换为 ES5 语法。11.3 如果你一定要用生成器，或者你忽略 我们的建议，请确保它们的函数标志空格是得当的。eslint: generator-star-spacing为什么？function 和 * 是同一概念关键字 - *不是function的修饰符，function* 是一个和function 不一样的独特结构。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` --&gt;</span></span><br><span class="line"><span class="string">## 12 属性</span></span><br><span class="line"><span class="string">12.3 做幂运算时用幂操作符 ** 。eslint: no-restricted-properties.</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h2 id="13-变量"><a href="#13-变量" class="headerlink" title="13 变量"></a>13 变量</h2><p>13.2 为每个变量声明都用一个 const 或 let 。eslint: one-var<br>13.3 把const 和 let 分别放一起。<br><!-- 13.4 在你需要的地方声明变量，但是要放在合理的位置。 --><br>&lt;!– 13.5 不要使用链式声明变量。 eslint: no-multi-assign </p><blockquote><p>为什么？链式声明变量会创建隐式全局变量。<br>–&gt;<br>13.6 不要使用一元自增自减运算符（++， –）. eslint no-plusplus<br>13.7 在赋值的时候避免在 = 前/后换行。 如果你的赋值语句超出 max-len，那就用小括号把这个值包起来再换行。eslint operator-linebreak.<br><!-- 13.8 不允许有未使用的变量。eslint: no-unused-vars<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 'type' 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。</span></span><br><span class="line"><span class="comment">// 这是从对象中抽取一个忽略特殊字段的对象的一种形式</span></span><br><span class="line"><span class="keyword">var</span> &#123; type, ...coords &#125; = data;</span><br><span class="line"><span class="comment">// 'coords' 现在就是一个没有 'type' 属性的 'data' 对象</span></span><br><span class="line"><span class="string">``</span><span class="string">` --&gt;</span></span><br><span class="line"><span class="string">## 14 提升</span></span><br><span class="line"><span class="string">## 15 比较运算符与相等</span></span><br><span class="line"><span class="string">15.3 布尔值要用缩写，而字符串和数字要明确使用比较操作符。</span></span><br><span class="line"><span class="string">15.5 在 case 和 default 分句里用大括号创建一块包含词法声明的区域（例如：let、const、function 和 class）。eslint rules: no-case-declarations.</span></span><br><span class="line"><span class="string">&gt; 为什么？词法声明在整个 switch 的代码块里都可见，但是只有当其被分配后才会初始化，仅当这个 case 被执行时才被初始化。当多个 case 分句试图定义同一个对象时就会出现问题。</span></span><br><span class="line"><span class="string">PS: 和常规的习惯不一样啊。</span></span><br><span class="line"><span class="string">15.6 三元表达式不应该嵌套，通常是单行表达式。eslint rules: no-nested-ternary</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">// ### 15.3</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="16-块"><a href="#16-块" class="headerlink" title="16 块"></a>16 块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// ### 16.1</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ### 16.3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-控制语句"><a href="#17-控制语句" class="headerlink" title="17 控制语句"></a>17 控制语句</h2><p>17.1 当你的控制语句（if, while 等）太长或者超过最大长度限制的时候，把每一个（组）判断条件放在单独一行里。逻辑操作符放在行首。<br><!-- > 为什么？把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更清晰。 --><br>17.2 不要用选择操作符代替控制语句。<br>PS: 和常规的劝法相反啊。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">!isRunning &amp;&amp; startRunning();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">  startRunning();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="18-注释"><a href="#18-注释" class="headerlink" title="18 注释"></a>18 注释</h2><p>18.2 单行注释用 //，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行。<br><!-- 18.3 所有注释开头空一格，方便阅读。eslint: spaced-comment 18.4 在你的注释前使用 FIXME 或 TODO 前缀，这有助于其他开发人员快速理解你指出的需要修复的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，它们是有明确含义的。FIXME：需要修复这个问题或TODO：需要实现的功能。--></p><h2 id="19-空格"><a href="#19-空格" class="headerlink" title="19 空格"></a>19 空格</h2><!-- 19.1 一个缩进使用两个空格。eslint: indent19.2 在大括号前空一格。eslint: space-before-blocks19.3 在控制语句（if, while 等）的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint: keyword-spacing19.4 用空格来隔开运算符。eslint: space-infix-ops19.5 文件结尾空一行。eslint: eol-last --><p>19.6 当出现长的方法链式调用时（&gt;2个）用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint: newline-per-chained-call no-whitespace-before-property<br>19.7 在一个代码块后下一条语句前空一行。<br>PS: 看起来是清晰。但是有点占行啊。– 代码人永无畏惧：行数多了还不好吗。</p><p>19.8 不要用空白行填充块。eslint: padded-blocks<br>19.9 不要在代码之间使用多个空白行填充。eslint: no-multiple-empty-lines<br><!-- 19.10 圆括号里不要加空格。eslint: space-in-parens19.11 方括号里不要加空格。 eslint: array-bracket-spacing19.12 花括号里加空格 。eslint: object-curly-spacing19.13 避免一行代码超过100个字符（包含空格）。注意：对于 上面，长字符串不受此规则限制，不应换行。 eslint: max-len19.14 作为语句的花括号内也要加空格 —— { 后和 } 前都需要空格。 eslint: block-spacing19.15 , 前不要空格， , 后需要空格。 eslint: comma-spacing19.18 在对象的字面量属性中， key 和 value 之间要有空格。 eslint: key-spacing19.17 调用函数时，函数名和小括号之间不要空格。 eslint: func-call-spacing19.19 行末不要空格。 eslint: no-trailing-spaces19.20 避免出现多个空行。 在文件末尾只允许空一行。避免在文件开始处出现空行。eslint: no-multiple- --><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// ### 19.6</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(<span class="subst">$&#123;radius + margin&#125;</span>,<span class="subst">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 19.13</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData</span><br><span class="line">  &amp;&amp; jsonData.foo</span><br><span class="line">  &amp;&amp; jsonData.foo.bar</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br></pre></td></tr></table></figure></p><p>PS: 咱就是说空格/行也安排的明明白白。</p><h2 id="20-逗号"><a href="#20-逗号" class="headerlink" title="20 逗号"></a>20 逗号</h2><p>20.1 不要前置逗号。eslint: comma-style<br>20.2 额外结尾逗号: 要 eslint: comma-dangle<br><!-- > 为什么？这使 git diffs 更简洁。此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的 结尾逗号问题。 --><br>注意，逗号不应出现在使用了 … 操作符后的参数后面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good  (注意，逗号不应出现在使用了 ... 操作符后的参数后面)</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">  ...heroArgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="21-分号"><a href="#21-分号" class="headerlink" title="21 分号"></a>21 分号</h2><p>21.1 要分号！ eslint: semi<br><!-- > 为什么？当 JavaScript 遇到没有分号结尾的一行，它会执行 自动插入分号 这一规则来决定行末是否加分号。如果 JavaScript 在你的断行里错误的插入了分号，就会出现一些古怪的行为。当新的功能加到JavaScript 里后， 这些规则会变得更复杂难懂。清晰的结束语句，并通过配置代码检查去检查没有带分号的地方可以帮助你防止这种错误。 --><br>PS: 现在的做法是在必须加分号的地方前置分号。比如：<code>(), []</code>。<br>  最好加一加。</p><h2 id="22-类型转换与强制转换"><a href="#22-类型转换与强制转换" class="headerlink" title="22 类型转换与强制转换"></a>22 类型转换与强制转换</h2><p>TODO: </p><h2 id="23-命名规范"><a href="#23-命名规范" class="headerlink" title="23 命名规范"></a>23 命名规范</h2><p>23.2 用小驼峰命名法来命名你的对象、函数、实例。eslint: camelcase<br>PS: 有时会用下划线。前半部分是小驼峰，后半部分表示所属关系或者状态。借鉴css BEM。<br>  命名长，无奈之举。不推荐。</p><p>23.4 不要用前置或后置下划线。eslint: no-underscore-dangle</p><blockquote><p>为什么？JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着私有，事实上，这些属性是完全公有的，因此这部分也是你的 API 的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。如果你想要什么东西变成私有，那就不要让它在这里出现。<br>PS: 有时会把一些mock，测试数据，上线不需要的数据 前置下划线处理。</p></blockquote><p>23.5 不要保存引用 this，用箭头函数或 函数绑定——Function#bind。<br>PS: 看情况吧。有时候需要保存引用呢。除非都用箭头函数。</p><p>23.6 export default 导出模块A，则这个文件名也叫 A.*， import 时候的参数也叫 A。 大小写完全一致。<br><!-- 23.7 当你 export-default 一个函数时，函数名用小驼峰，文件名需要和函数名一致。23.8 当你 export 一个结构体/类/单例/函数库/对象 时用大驼峰。 --></p><p>23.9 简称和缩写应该全部大写或全部小写。<br>23.10 你可以用全大写字母设置静态变量，他需要满足三个条件。<br>PS: 有些全局的配置或定义，会用。并不会把所有的const 都定义成大写：大写不好读。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 23.9</span></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> SMSContainer <span class="keyword">from</span> <span class="string">'./containers/SMSContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HTTPRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> TextMessageContainer <span class="keyword">from</span> <span class="string">'./containers/TextMessageContainer'</span>;</span><br></pre></td></tr></table></figure><h2 id="24-Get-Set-访问器"><a href="#24-Get-Set-访问器" class="headerlink" title="24 Get-Set 访问器"></a>24 Get-Set 访问器</h2><p>24.1 不需要使用属性的访问器函数。<br>24.2 不要使用 JavaScript 的 getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 getVal() 和 setVal(‘hello’) 去创造你自己的访问器函数。<br><!-- 24.3 如果属性/方法是 boolean， 用 isVal() 或 hasVal()。 --><br>24.4 用 get() 和 set() 函数是可以的，但是要一起用。</p><h2 id="25-事件"><a href="#25-事件" class="headerlink" title="25 事件"></a>25 事件</h2><p>回调入参用对象方便处理。</p><h2 id="26-jQuery"><a href="#26-jQuery" class="headerlink" title="26 jQuery"></a>26 jQuery</h2><p>常规的那些处理。</p><h2 id="27-ECMAScript-5-兼容性"><a href="#27-ECMAScript-5-兼容性" class="headerlink" title="27 ECMAScript 5 兼容性"></a>27 ECMAScript 5 兼容性</h2><h2 id="28-ECMAScript-6-ES-2015-风格"><a href="#28-ECMAScript-6-ES-2015-风格" class="headerlink" title="28 ECMAScript 6+ (ES 2015+) 风格"></a>28 ECMAScript 6+ (ES 2015+) 风格</h2><p>ECMAScript 6+ (ES 2015+) 风格</p><p>28.1 这是收集到的各种ES6特性的链接<br>箭头函数——Arrow Functions<br>类——Classes<br>对象缩写——Object Shorthand<br>对象简写——Object Concise<br>对象计算属性——Object Computed Properties<br>模板字符串——Template Strings<br>解构赋值——Destructuring<br>默认参数——Default Parameters<br>剩余参数——Rest<br>数组拓展——Array Spreads<br>Let and Const<br>幂操作符——Exponentiation Operator<br>迭代器和生成器——Iterators and Generators<br>模块——Modules<br>28.2 不要用 TC39 proposals， TC39 还没有到 stage 3。</p><blockquote><p>为什么？ 它还不是最终版, 他可能还有很多变化，或者被撤销。我们想要用的是 JavaScript， 提议还不是 JavaScript。</p></blockquote><h2 id="29-标准库"><a href="#29-标准库" class="headerlink" title="29 标准库"></a>29 标准库</h2><p>标准库中包含一些功能受损但是由于历史原因遗留的工具类</p><p>29.1 用 Number.isNaN 代替全局的 isNaN。 eslint: no-restricted-globals</p><blockquote><p>为什么？全局 isNaN 强制把非数字转成数字， 然后对于任何强转后为 NaN 的变量都返回 true 如果你想用这个功能，就显式的用它。<br>29.2 用 Number.isFinite 代替 isFinite. eslint: no-restricted-globals</p></blockquote><h2 id="30-测试"><a href="#30-测试" class="headerlink" title="30 测试"></a>30 测试</h2><p>30.1 Yup.<br>30.2 No, but seriously:<br>无论用哪个测试框架，你都需要写测试。<br>尽量去写很多小而美的纯函数，减少突变的发生<br>小心 stub 和 mock —— 这会让你的测试变得脆弱。<br>在 Airbnb 首选 mocha。 tape 偶尔被用来测试一些小的、独立的模块。<br>100% 测试覆盖率是我们努力的目标，即便实际上很少达到。<br>每当你修了一个 bug， 都要写一个回归测试。 一个 bug 修复了，没有回归测试，很可能以后会再次出问题。</p><h2 id="31-性能"><a href="#31-性能" class="headerlink" title="31 性能"></a>31 性能</h2><p>On Layout &amp; Web Performance<br>String vs Array Concat<br>Try/Catch Cost In a Loop<br>Bang Function<br>jQuery Find vs Context, Selector<br>innerHTML vs textContent for script text<br>Long String Concatenation<br>Are Javascript functions like map(), reduce(), and filter() optimized for traversing arrays?</p><h2 id="32-资源"><a href="#32-资源" class="headerlink" title="32 资源"></a>32 资源</h2><h2 id="33-In-the-Wild"><a href="#33-In-the-Wild" class="headerlink" title="33 In the Wild"></a>33 In the Wild</h2><h2 id="34-Translation"><a href="#34-Translation" class="headerlink" title="34 Translation"></a>34 Translation</h2><h2 id="35-The-JavaScript-Style-Guide-Guide"><a href="#35-The-JavaScript-Style-Guide-Guide" class="headerlink" title="35 The JavaScript Style Guide Guide"></a>35 The JavaScript Style Guide Guide</h2><h2 id="36-Chat-With-Us-About-JavaScript"><a href="#36-Chat-With-Us-About-JavaScript" class="headerlink" title="36 Chat With Us About JavaScript"></a>36 Chat With Us About JavaScript</h2><h2 id="37-Contributors"><a href="#37-Contributors" class="headerlink" title="37 Contributors"></a>37 Contributors</h2><h2 id="38-License"><a href="#38-License" class="headerlink" title="38 License"></a>38 License</h2><h2 id="39-Amendments"><a href="#39-Amendments" class="headerlink" title="39 Amendments"></a>39 Amendments</h2><p>1 类型<br>2 引用<br>3 对象<br>4 数组<br>5 解构<br>6 字符串<br>7 函数<br>8 箭头函数<br>9 类与构造函数<br>10 模块<br>11 迭代器与生成器<br>12 属性<br>13 变量<br>14 提升<br>15 比较运算符与相等<br>16 块<br>17 控制语句<br>18 注释<br>19 空格<br>20 逗号<br>21 分号<br>22 类型转换与强制转换<br>23 命名规范<br>24 Get-Set 访问器<br>25 事件<br>26 jQuery<br>27 ECMAScript 5 兼容性<br>28 ECMAScript 6+ (ES 2015+) 风格<br>29 标准库<br>30 测试<br>31 性能<br>32 资源<br>33 In the Wild<br>34 Translation<br>35 The JavaScript Style Guide Guide<br>36 Chat With Us About JavaScript<br>37 Contributors<br>38 License<br>39 Amendments</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Airbnb JavaScript Style Guide: &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;br&gt;&lt;!-- 中文版: &lt;https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md&gt; --&gt;&lt;br&gt;
    
    </summary>
    
      <category term="w3" scheme="http://yoursite.com/categories/w3/"/>
    
      <category term="frontend" scheme="http://yoursite.com/categories/w3/frontend/"/>
    
    
      <category term="lint" scheme="http://yoursite.com/tags/lint/"/>
    
  </entry>
  
  <entry>
    <title>Glob模式</title>
    <link href="http://yoursite.com/sum/others/glob%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/sum/others/glob模式/</id>
    <published>2022-01-20T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.575Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2022.1.20 星期四 : </p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>glob 是一种文件匹配模式，全称 global，它起源于 Unix 的 bash shell 中，比如在 linux 中常用的 mv <em>.txt tmp/ 中，</em>.txt 就使用到了这种模式。</p><!-- \# 1 [glob 模式匹配简明教程](https://juejin.cn/post/6844904077801816077) --><p># 1 <a href="https://github.com/whinc/blog/issues/18" target="_blank" rel="noopener">glob 模式匹配简明教程</a></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><table><thead><tr><th>通配符</th><th>描述</th><th>示例</th><th>匹配</th><th>不匹配</th></tr></thead><tbody><tr><td>*</td><td>匹配0个或多个字符，包含空串</td><td>Law*</td><td>Law, Laws和Lawer</td><td>La, aw</td></tr><tr><td>?</td><td>匹配1个字符</td><td>?at</td><td>cat, bat</td><td>at</td></tr><tr><td>[abc]</td><td>匹配括号内字符集合中的单个字符</td><td>[cb]at</td><td>cat, bat</td><td>at, bcat</td></tr><tr><td>[a-z]</td><td>匹配括号内字符范围中的单个字符</td><td>[a-z]at</td><td>aat, bat, zat</td><td>at, bcat, Bat</td></tr><tr><td>[^abc]或[!abc]</td><td>匹配括号内字符集合中的单个字符</td><td>[cb]at</td><td>cat, bat</td><td>at, bcat</td></tr><tr><td>[^a-z]或[!a-z]</td><td>匹配括号内字符范围中的单个字符</td><td>[a-z]at</td><td>aat, bat, zat</td><td>at, bcat, Bat</td></tr></tbody></table><h3 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h3><p>除了基础语法外，bash 还支持 glob 的一些扩展语法，主要包含三种：</p><p>Brace Expansion<br>globstar<br>extglob<br>三种扩展语法的定义和描述如下：</p><table><thead><tr><th>通配符</th><th>描述</th><th>示例</th><th>匹配</th><th>不匹配</th></tr></thead><tbody><tr><td>{x, y, …}</td><td>Brace Expansion，展开花括号内容，支持展开嵌套括号</td><td>a.{png,jp{,e}g}</td><td>a.png, a.jpg, a.jpeg</td><td></td></tr><tr><td>**</td><td>globstar，匹配所有文件和任意层目录，如果**后面紧接着/则只匹配目录，不含隐藏目录</td><td>src/**</td><td>src/a.js, src/b/a.js, src/b/</td><td>src/.hide/a.js</td></tr><tr><td>?(pattern-list)</td><td>匹配0次或1次给定的模式</td><td>a.?(txt</td><td>bin)</td><td>a., a.txt, a.bin</td><td>a</td></tr><tr><td>*(pattern-list)</td><td>匹配0次或多次给定的模式</td><td>a.*(txt</td><td>bin)</td><td>a., a.txt, a.bin, a.txtbin</td><td>a</td></tr><tr><td>+(pattern-list)</td><td>匹配1次或多次给定的模式</td><td>a.+(txt</td><td>bin)</td><td>a.txt, a.bin, a.txtbin</td><td>a., a</td></tr><tr><td>@(pattern-list)</td><td>匹配给定的模式</td><td>a.@(txt</td><td>bin)</td><td>a.txt, a.bin</td><td>a., a.txtbin</td></tr><tr><td>!(pattern-list)</td><td>匹配非给定的模式</td><td>a.!(txt</td><td>bin)</td><td>a., a.txtbin</td><td>a.txt, a.bin</td></tr></tbody></table><h3 id="与-regexp-的差异"><a href="#与-regexp-的差异" class="headerlink" title="与 regexp 的差异"></a>与 regexp 的差异</h3><p>glob 模式主要用于匹配文件路径，当然也可以用于匹配字符串，不过在匹配字符串的能力上比 regexp 要弱很多。由于 glob 模式和 regexp 存在相同的元字符，但是含义却不同，容易导致混淆，为了避免混淆，下面将 glob 模式转换成对应的 regexp 表示，以便区分他们的异同点。</p><p>glob | regexp | 精确的 regexp<br>* | .<em> | ^(?!.)[^\/]</em>?$<br>? | . | ^(?!.)[^\/]$<br>[a-z] | [a-z] | ^[a-z]$<br>glob 匹配的是整个字符串，而 regexp 默认匹配的是子串，regexp 如果要匹配整个字符串需显式指定^和$。正则表达式中的(?!.)，其表示不匹配隐藏文件</p><h3 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h3><!-- End: #1 --><!-- \# 2 [glob模式 ](https://www.cnblogs.com/xdlysk/p/5183604.html) 在计算机编程中，特别是类Unix环境，glob模式通过通配符来匹配文件名。例如：Unix命令，将所有以扩展名为.txt的文件从当前目录拷贝到textfiles目录。### 在Linux和POSIX系统中[…]有以下两个扩展：通配符 | 描述 | 例子 | 匹配 | 不匹配[!abc] | 不匹配任意一个包含的字符 | [!C]at | Bat, bat, or cat | Cat[!a-z] | 不匹配任意一个给定范围的字符 | Letter[!3-5] | Letter1, Letter2 etc. | Letter3, Letter4 or Letter5### node glob对常用通配符又做了一些扩展:通配符 | 描述 | 例子 | 匹配 | 不匹配** | 匹配任意数量的字符包括空字符（包括路径分隔符） | **/*.js | /a/b/c.js |  !(pattern|pattern) | 匹配除了()内以外的pattern | !(abc|bcd) | aaa,bbb | abc.bcd?(pattern|pattern) | 匹配至多一个()内的pattern | ?(abc|bcd) | abc | bbb+(pattern|pattern) | 匹配至少一个()内的pattern | +(abc|bcd) | abc | bbb*(pattern|pattern) | 匹配任意个()内的pattern | *(abc|bcd) | abc | bbb@(pattern|pattern) | 精确匹配()内的其中一个pattern | @(abc|bcd) | abc | abd -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2022.1.20 星期四 : &lt;/p&gt;


&lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序开发记录</title>
    <link href="http://yoursite.com/sum/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/miniapp/小程序开发记录/</id>
    <published>2022-01-18T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.612Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.1.18 星期二 : </p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="运行等"><a href="#运行等" class="headerlink" title="运行等"></a>运行等</h2><p><code>微信小程序提示 [渲染层错误] TypeError: Cannot read property ‘replace‘ of undefined</code></p><blockquote><p>升级开发工具不行，把 wxml/js 代码一个一个删除想排查问题,最后都删完了还是不行，然后百度发现一个跟我一样的情况的案例，发现人家选择【调试基础库 2.12.0版本】</p></blockquote><p><code>./pages/index/index.wxml not found</code><br>同上。调试基础库 改为2.1.8.0 成功了。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><ol><li>app.js 文件中设置，globalData对象就是存储全局变量的。<code>this.globalData.hasLogin</code> 和<code>getApp().globalData.hasLogin</code><br>taro，uniapp 等多端框架，还会有其他方式。如果taro混合开发或者异步设置，上面方式可能并不合适。<blockquote><p>在taro中 getApp()只能取到一开始定义的值，并不能取到改变后的值<br>&lt;!–<br><a href="https://cloud.tencent.com/developer/article/1498593" target="_blank" rel="noopener">uni-app 全局变量实现的4种方式</a><br>一、公用模块<br>定义一个专用的模块，用来组织和管理这些全局的变量，在需要的页面引入。</p></blockquote></li></ol><p>注意：这种方式只支持多个vue页面或多个nvue页面之间公用，vue和nvue之间不公用。<br>二、挂载 Vue.prototype<br>将一些使用频率较高的常量或者方法，直接扩展到 Vue.prototype 上，每个 Vue 对象都会“继承”下来。</p><p>注意：这种方式只支持多个vue页面或多个nvue页面之间公用，vue和nvue之间不公用。</p><p>三、globalData<br>小程序中可以在 App 上声明全局变量，但在 Vue 中没有，uni-app 中在 App.vue 可以定义在 globalData 属性上，也可以使用 API 读写这个值。</p><p>这个方式支持vue和nvue共享数据。是目前nvue和vue共享数据的一种比较好的方式。<br>四、Vuex<br>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>注意：这种方式只支持多个vue页面或多个nvue页面之间公用，vue和nvue之间不公用。<br>注意：对比前面的方式，该方式更加适合处理全局的并且值会发生变化的情况。<br> –&gt;</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>### 耗时问题<br>&lt;!– <a href="https://developers.weixin.qq.com/community/develop/doc/00004c102b478019ee3c232d55b400" target="_blank" rel="noopener">getStorage首次调用耗时较多，后续再调用getStorage就明显快很多，这是什么原因呢？</a></p><blockquote><p>通过开发这工具的 network 设置 offline 模式，可以发现 getStorage 是通过了网络的。<br>微信小程序的 getStorage 是按用户来隔离的。 –&gt;</p></blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/storage.html" target="_blank" rel="noopener">小程序开发文档-存储</a></p><p>隔离策略<br>同一个微信用户，同一个小程序 storage 上限为 10MB。storage 以用户维度隔离，同一台设备上，A 用户无法读取到 B 用户的数据；不同小程序之间也无法互相读写数据。<br><!-- 插件隔离策略同一小程序使用不同插件：不同插件之间，插件与小程序之间 storage 不互通。不同小程序使用同一插件：同一插件 storage 不互通。 --></p><p>清理策略<br>本地缓存的清理时机跟代码包一样，只有在代码包被清理的时候本地缓存才会被清理。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h3><!-- [微信小程序自定义封装组件-showModal ](https://www.cnblogs.com/wsjaizlp/p/15108350.html)[微信小程序封装组件-showModal](https://blog.shangmayuan.com/a/a74f07117c2a493aa21290af.html)1.简单封装组件咱们让组件设置一个triggerEvent事件，让父组件接受这个事件，使得调用该组件的组件可以处理底部按钮点击对应的事件这里咱们只对两个按钮的作处理，若是对应的多个组件能够自定义封装，因为没有作到多个按钮的需求，底部按钮只作两个：2.优化封装可是有一个问题就是，每次想要弹窗都须要建立一个modal，而后在里面写入相关的参数，也是有点小麻烦的。咱们能够把参数抽出来，写在函数里面，实现像微信小程序同样的写法，具体能够 参考 wx.showModal(Object object)3.将组件全局化 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">showModal(that,options)&#123;</span><br><span class="line">    that.selectComponent(<span class="string">'#modal'</span>).showModal(options);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 组件调用</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">app.showModal(<span class="keyword">this</span>,&#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    title: <span class="string">'函数调用'</span>,</span><br><span class="line">    tabTitleShow: <span class="literal">false</span>,</span><br><span class="line">    success :<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">        icon:<span class="string">"success"</span>,</span><br><span class="line">        title: <span class="string">'肯定按钮点击'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">        icon:<span class="string">'error'</span>,</span><br><span class="line">        title: <span class="string">'取消按钮点击'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.1.18 星期二 : &lt;/p&gt;


&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="miniapp" scheme="http://yoursite.com/categories/sum/miniapp/"/>
    
    
  </entry>
  
  <entry>
    <title>Ens-2022</title>
    <link href="http://yoursite.com/ins/ens/characters-2022/"/>
    <id>http://yoursite.com/ins/ens/characters-2022/</id>
    <published>2022-01-04T00:00:00.000Z</published>
    <updated>2022-05-04T07:43:28.586Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.1.4 星期 : </p><h3 id="0427"><a href="#0427" class="headerlink" title="0427"></a>0427</h3><ol><li>orphan: [n]: 孤儿; <!-- git checkout --orphan new-branch --><br>orphanage: 孤儿院。</li><li>chink: [n]: 缝隙。 [v]: 叮当响。<!-- 骂人的话，国人。nigger: 黑鬼。 --></li></ol><h3 id="0104"><a href="#0104" class="headerlink" title="0104"></a>0104</h3><ol><li>horn: [n]: 喇叭，（号）角，号；犄/长角；[v]: 顶</li><li>freight: [n]: 货物/船，货物运输;[v]: 装满/上。[adj]: 货物的。<!-- 运费 --></li><li>indie: 独立。 <!-- @tarojs/plugin-indie --></li><li>verbose: 冗余;  <!-- --verbose vs --quite --></li><li>implementation:  执行</li><li><p>respective: 各自，个别，经心。</p><!-- :global switches to global scope for the current selector respective identifier. :global(.xxx) respective @keyframes :global(xxx) declares the stuff in parenthesis in the global scope.:global 切换到当前选择器相应标识符的全局范围。 :global(.xxx) 各自的@keyframes :global(xxx) 在全局范围内声明括号中的内容。 --><p> identifier: [n]: 识别号，识别码。 <!-- 标识符 --></p></li><li>stuff: [n]: 东西，材料；料；剂；货色；废话；填塞；<br>[v]: 填充，填，塞，牣</li><li>parenthesis: [n]: 插入语，附带，附带物<br>parentheses: [n]: 括号，括弧，刮弧</li><li>clover: [n]: 三叶草 <!-- Jest clover.xml --></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.1.4 星期 : &lt;/p&gt;


&lt;h3 id=&quot;0427&quot;&gt;&lt;a href=&quot;#0427&quot; class=&quot;headerlink&quot; title=&quot;0427&quot;&gt;&lt;/a&gt;0427&lt;/
      
    
    </summary>
    
      <category term="ins" scheme="http://yoursite.com/categories/ins/"/>
    
      <category term="ens" scheme="http://yoursite.com/categories/ins/ens/"/>
    
    
      <category term="ens" scheme="http://yoursite.com/tags/ens/"/>
    
  </entry>
  
  <entry>
    <title>taro和Jest测试</title>
    <link href="http://yoursite.com/sum/miniapp/taro%E5%92%8CJest%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/sum/miniapp/taro和Jest测试/</id>
    <published>2021-12-27T00:00:00.000Z</published>
    <updated>2022-05-04T07:29:27.888Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX19oVEcalbyrbyQjVvF9Ke4R7wntwLwjYBIiRgHG22cIlY8ZaTssZhPZH4iUGuHgBke1kvZYhnukqWbkrmaSAa2cI5PSKAwFoNJOWnMO+yVqWeqp2u1GZmeNJzpaNfhUTIP8VytZopNAZoAacEjm2pRmshYMicatQWspono6S2b5kKDSVvExO2wQ6xb+kf1hoGVHDjjpcBEQumGidFvbJgaxZYEu3toexccAkoH1YdRxfwALmJ+ichaFluRa455s0+2uz3+7Jqs0de/q1ZpcLIghCEfoe/kr/4j2FoETBUtNpGkx7DuVce5ETHa+zUygFHN3I9ja20BbdHu3wfjdHp+Dg22sIEBVwJmZTxhzL+BgDfhQE/KMiJpdhuue/DNGBF6h53Lk++WuKWzzzOZF0HWda9UafaPy48jJwHhniFlkqOgtB9JbKQwzTqNbOMqNCtL+E529evqn+LXhaqNFkH07IG4rxAPRAgbIGUgaCSlYhEQ2TkBhqRbD1txlsOcWFwKFU48x3pPM+x41rZURB8SbVezRFKo/yVYXoem11dK/ac1vhiyisyfMMLjpvYts7VRX+te5KQCVUf2luNvXAqTrfhVAN5ODIz9+uy2QAtRYI7sxygx3MGRQccA1Woj6LAa+Odu4UMrDODCq2yJLucMVQ0QimyrYdtXUx3x3l2cnA4zp8n9Dt4ls+aPPWJuTK/j+SSLQ6cQYaxWqsGL6tevsdsQe6sUXrBkqTdf9c/ZL/0GNeTmFpFoZ5s5SykavQpXw8TKK+OJDzVvl6CdcCFQUul2umkvbs5oC+SJUo6IF8uppydOzfIl/ZrWKSWO2ykiryA/WoL1oFMlXpPZmtfeQydXv4TfnsCHAUkMeajuy0LmgmmOHz04Q0721kwxR7lVc/wDL79sB0t8++01pKHvJEVaLfFqdMjiCNI3kFomHneLIIQZKPr/Wm0V6eJGRaQ0VE0GtVvPa0RSVe0C3qfn88J5iHZp/zDtOyw6SgHa0lD4zCPa+t3m7pKQJRPqMiVd5y2KBhHxZ/DxuHMBFP8ttG0hUG7r43Z6R5PRG4mRVGF3gCRhzjNVrpyNPT02Pz9J/3gGfExiFFB9pjMiNIbfyH1TshH0JmzLGOw9L5XBjCBP6FgGJLzfCmc3dSVcS0ayO5yjQr/AZNaZuOH4B3bcxvQfmiDjh9S4dFn3VGExCsVIvZzx0iZ6BXRdR5Hd7d7jammqKG88ps5HDlPUDAUQsLMMo/xRde7illixkF9WZLvy2jlhK420RhP2/iqvF55EP/4zg2jGomM+2ZM9PJL4Gc7md7dpRbkO8sD1gJ6Sc+ZCludaXi2qCW2gnQfAHQXF/9WYscN9hHzNqvFCqArntgNjfNl5ZljmHW5mLZf0Siy88etqlYajHETuQRQkWoEvwXtJWSc+HRucGnng/jrzTfm85qplzQG8Y4srUkOcaAhVQGajmXGAYm/NtKaSo3XOaTksIR1sjGQ0pIdH+fh8xeJ7weOw4X7DOlCkejWGopK0tEu4Pdnc5+As50J6sIwfUvixk6TQQq8/J09jqOUQC2BKGUyp0/Uw9Am3jnSls/FebMROJ5hmhTfk9tX01x9Yl1bRKMRf8o49/V+v+Y3KBN0T7NjsTgczj806PJAFQpbBr8YIsUrEqtSc3esX+hVkfX2DdigR+m6zD3ysAY/2nhods9Xbm4o1++wMK9UU+6jK7OnYfoSdPu/OtYlq/ryrWdpvzKTAsxtwOO2aXolFATU+gsu+sWLDuoU/9uU1Ee/rx+j39Wt9Br7zANPC7TS7p4y9aSEuQs5dNQ9Gl8Grh1AjRWEwbpCvN/k8Dy8A/8tXqAlI8bMxHbKWd4QgppOszKFLFEnA8b6qRi1K4vJOasMfsxsKQxPDcytV+Y6XUPCIFqQY5iCi2QETjWq9X0Q9RUVMHEqCLcri/8Di4GGrzS1FFwrDeeQsfaPh3yk03Tqy0SGDvg1nUDk4/8mIQSD0TiiTKBhBmG7y/kZydysXDiC49YhkKGKxPNpnn5loZmgNeruFxW361CbHHDu7PnbsyP5I9xm4XP4wsR2jmDNI9YnTxBfc+NOZqKDnBHDHyVMMm8+k+u6y0BeLvEqckYwPEkOwd3OuppYPUyKG23dZRpyw34TOxJkCzZ315bB05+mwHVDbgi9ObGPFAzHNT5wXEbfom/JiVwIR116fJKTjSVTyYjMztpQ1ortGn4Lymq/HpfASi5FLKIKLIBBUORK9bpdPjVAfgA9csGOh6Hj7FZ1SGWy0WiVL2ID5gLVgOBtVVeBS58jw0qmHVMywPRNRKQN6W0N+rFu1R2SAnqFn9qcy8K0JEukdzGz8jRErP+QPb3PF2Qd09oYsza3sg3oqck8uopag+l8lcKZDvTcmaNXtgxifr71hlezrDnQKHdMysuwMQJsvbZ5xDyHWgLy2OkJ4hMGV5S8uJyVvFhTj+Q/7ZS5Za7bTBsnGQB967DPSh0rq8cMqgCfVVEY7l7dT1hQRj+ugP0t9bF6yFvW8QT14WHEuw5Gp5rww8zkClBs/VQ937Zhu57nhEI/ExutHHp8o0rEWnRpJFWkNomo0HjeYQe7ZCt91qma14pYmGp25J0FncamvDsyYahIv5P0G+xg7Vz0Z27NQ0I0wxR39zoQ7DrlyebdpzcrEvkeXGh1a5yAAWRlWWunCV3i3nYeVY7zQqJGt6ISEjh+sTmi0dk1o9Ch/8HYS48B1fdwJrY4N+dAOV7Wq0dZHxAvNCALWNwmjh0+Mq3U4k8hyMgfuxzpO4tJd90BQWULRF8ze93NMW01DBLQJnaARXPd71ukE3fSRHBQXSfUkbwPNBnUVyNOwa73zSIkRuwz3S3+J8bPCyXTzaecIpZoUZCko+hUqomXzWG4WbwdFODTV5XA7KMhuBNjHrwCme9gmY1YCuGjCNbMiqkgM1GUEyybkGVuekyvz6fRPlw9FaldB5wNAb9o4TJXZRexq+NZvvRJ9XqJnGPgtzLXH4oE97w91/BcYlpdo7TDoxUSbmAjii6bd/XmU4PxDan4IzGudbDAAptE4xIxsv4d4u8dpDmN9j4fRrZ7fU3vPVBPxsj+LqnXD+6mQLpkz2xNK/4nKXlUWujkruV5ExpSXBETdgJTMtXgKx0Q8Q1HM6hy34jMc3LCUP9Q+mffy+HQtgvYNp6bwGkb3YMeW3Vm0Xpx3p2t77po2V927xOzAkbcS8rbHtz+YLGsspn5DwXatY21lIqn0FfZTivVbWuW801byYMRYr8FICPtjsGswNhz0M4EJCYnwXZFST3yUPJT0xmG3ZTx2PHdxbfe16JGOPNGm/EW5L8r3giYu8FXsaHQKvx9n3TXsJ3giM/R22h9dlFQgyyL+dtbj9GWKBml4pkamaqO2ji87A0jCdx0E1whe9Ku4rEW3Hwt7NM0AeOMSzcmGucvjcLOG+/nFFZKxuu6O6hLOA6UHtw4q/ercOtbQBrzshrT5T7ugV6X6VVd9MvPCqCm4n+sAP3/mvTDdKkjh2ZO0HxMBmeXk5OXuySwqCpqRjXvLEVfbay0Vc2D1kkVw0BKZ/6H50NpCblWreUwLLWsiyGOtMW1rbeRmAKleRp2NA3IrShGbNkV+OY+rrRRsc5eCpl7n5WgcZUrRR4S7Vn4HNrB8JQeadDqEMpKL/Pd52wc9Py5CX4S9wi36LMCql9alkBD/cx8QFztODTMQqcRM0dj2ng2k3AVcL1otyBsQ4SLaqoPIGSYD4AsYvnOvXlF5bxH+eRxyPLgfbtbyCikZVsJeNPc9mU3nonu6oLJmh4tpZlPQu1XOaQVtROVIjJ5lFkjCS+eRdz/Fb4oJcNeMMR3+6nDda+uKBV70uZcBRAlIqK6oqWYuoy/n5OIA8TIE/eTw0SvmsTITGWUanqnWKDoCfIT/45vWg6iAcXaIaqcmKQdZbLvd6/l4gw2ARrQ0ljzvH8O2PqGQuDCyWwyU7Bj71OwaQcZSi2K67OL84ZbUijqrHchO2I5YIXKPBII4bOjUlwTzb+/bg9T0auvu5smtVRRiiFo8OUVFhv3ApGFXvjQdDklH9N2btSGoeWmqrMqETv8YeYWQ9eOkixzs5T/Qf8RXNGgMw022MLmGqH0zbRiJO00O/O476FecptzWep9J65TgAgtdkSD4uRy6rbQbUMSGzoeHaHqXLCHSiu3Sz1Nh8vr/IuON0AUzdxdndJgejcWp8YJ3y5DbMkI+Pd82OzaPniC5TNoUUQj/KhxjgnHh/94EyWGOjgklquLT8wVO8ANioY2xqvt4/HWfzjSdIYxu3OCHnjp5xnVHRZBY8gOE2thUKTYDmEe2i2NaKb9qOQNcCu/WxMC0JOPSboXXxWUBHSeD3j0zciqDOszef9RqvYvx/FuH5MZMX8glRmEi1qwkz8Z2EIm4qsMOcnF5tuz13wq1LIdu2elyi5BnkkCiq+r7k5HGtipCIvh7DA2Er6NhU2sMTMQUFCECfLcakpNEDLXUKrZyqONgVYlwqi6oO5AQQ6AxxIm8z7WUxxWp17dV/KfwZO5En9hDHRDddFp2Wg8goWYt9OgShvvKL6A99jiwLu4wQMIvBT7kEqLoXygaPVDgvheCxk3yTqYvPFbYLlAqML5mtiggJJwX/mB6uwIWXwTwSbhlkwdwexr1p9oFugntunH0F/kMhEAxDRqPe88LUmxMIv7CC/CLzogY9N5I9NPQsOjL7Nny5kBILpc54YZCBu2dhBN2Pg7QB1Rr2wn/7DRtZOck6ZaXVLLbDSf7HimKeQ7+6sUpGvxo3A5R2QuDm7v+zV0GHXYChxe1/qSXYS97cDuYJeXHomZiI72boOjhhFxxcR9k12P6PXC73/K4WqkXqbxF902WKubm0XSnkKGQN8wchKWdstlYngnpakNCaaT7fneW4/vOX0LIQVNKidY2dJDorMONRofvbuczNaslz05bpBlmQmLDE91FCuO/MVu/rJzgtMZZcibj5WY6wi3JNC5LMK+SK8sjnaoLGFYrdZeXgCZvFRm+4bH7e0/Flb27/02WiTJOXBHGuioI62ZCuJvV3dUNZrEVTwOJipJSwtC5yf5rXDV4/NBNPqAnCdr+XNcf6505dCu0IYbbj0yntlTUK2D21qUJKd/OWKJCr6/n0LCvY01JuGHEvaa0cL78j+Kk7n0VHtvz4HSdl+WxZTCmyKhzqAVwVntmnq/L0YFIBtuRkK87kbbc2K8jDjD86gtcA323kHtSWgzHoJ2bLPLfQY/04idDJ4QJvRc7dF2qPkECcoz1FCibTBVCtdXsXh+JFewFnpArbeZDrG3wfznT/Nhxi7GBuolniS9zZpwvfzKIjxnI6qB8d7oK/7VFNVcWQsnx9Bq6TOv+sOkpZVUB+w8fVw4A8BXlOA+4nvXiGXpgVjBXwycHpbjB8LPl3qYCZxPxjNH91dF/pQ6GZbzZ5q77q9o6W6oY7IzYEEfIqJVzUnuD+M7vvpY/o6RlLuMfkK/Enwg/YS9MlLJARE2ivd+4yqHgL3k60HK4mhkuKDBExMiGTN9V7+EXkUBfbiceIoSCVI/If/9z15PzG/zAi8YDDMotapFwlwLrhPwcNEdAgVLpXMWpAk2J4x0DYher9+8aJkLtCz8RmRmZWoOP7s3ZtHYJEfS/jiol4oAh1i8sR5eQH0YaRE5vb88B1CG+zuSDDOcp3Rvc9nBGVOBZB+RYdBJHNfM2PYF4h5Gt9IzLKBugh3Z7h8Sb4bweggC7H58Zo6K4Q37ROkHqoXHX10H9LxUx2LHrqPD6GaJO8Z4TfXXZLt29+sF8QyDrkBhtkMmViM7075SIPhIYyNkbtMFOW/am85i572+7x5O++lyV5RJkAE+acKyA9BztSsVac4g5PdeSWJjE1q3KRFa/1gDesq0AMOgJalGA/I1uv11bO7wRMcSuwuCfXvOGlMmdXGApWtlUvz3wvnYqIyv71Wgt9nCTFOQGN1/+sYbvEpst76kWvscEgA+C65Zj9+DDREhbee8Ks+Vf2a+9Sf3Ir9wJtQsp7J9DsIlsa1GjAnwf4Rf72TC7AFVVugd2KgRhJBm1BzQmFrPEAMGSo1B8WbEAmfr32P08wi42bq4Zs0VBYB6amZDnfY9JVweFu0rtZ09fzEkRuaAqk+seLLtVl1F9OQPA7R+di7OjbsWB+Pkcg6XR9cquyNjAIsFFcWOAtepxAHxbyTEdfLDONUqIGqTGjl31zbFPoEAIIHaXDVRRG2xtmbEDZIEUK3Xz2bpXZ16ud0UNyJpK5Li8NQj9HrHuckQodKdcbsjeLorqrN2oI+MMSZW4NbQsnypyXOxM4UnDgzKR12fVEaXjhp0w4nc3jaxuS/GPiWrXQwA96DI1Nbd3u6TQjmhevz7GQSrMj3Do2WBhYVJi0PdkzUa1hIHZfQVhBzPHQ0pfm1F4dCofd6b18hS2OdLs9/ynI7iJQEuONrCRmfoVZ7c5TAzidUh8AUZdckQ+8ragMusbUDC5ggBd5nclm9i9Mw62nzdzZJtPCit7360Jrhtn8liamf88V+BMxEH8L4Z1tnX8OeqQJC7KCC02L22H+xepxug9GKYdCNRTPHDEIJJMNfC/1P52iZW759Eu1kz02ezNME/1WJuK8upXSRL4QKjG/5KaLHkGrWEPFaLMDLWydyp5yplktOx8sUrStnTc3vWm2qQ0ST/+A70nyLllD5feZBHAp3ppL4ha3yH111484nWcNvcCeQmS25uSGESurkwlETD7j7j9KPy2co3HVeFA3MI42+A1VD/KLCe9IQacDXIc8O3dihPBldWLmtdfALpoTTsIogvwmRvXMKRC05jj8VlXjv8O9urcSEYYJqzjftLP13jEy30weD9Oa5mYnaS4hKJTIA8Qcu5769BSu1dUE3+4coonaL7nLF4vX3NzfXIMllKvCO6hx6JsTFIH4rtuFtFfA5fqYmh6Yc8BDr922osCx78WCDwNLYOzmShw3oNaZ/JRgbefd+5cXiMe8IbhBPD8VWWV6Mw8ElxXyIhhCSF6n63h6+YRmPThvSvO3sTTYeIE9hq5euMay6OVnoZQPNClaglxaeADMwzbhFE5UStCrFF276Yie4IJukEJll3w07sf84jywb1k5azb5wFAtN3flWmwsJ8HJ6X5RO0n7l4QEpCHLw0gvrc7yCinCUTNP2q+OAgjVVTxoJMmfb8F2+s2dpcwzZpcczY75j6vVUAwPIIPUB7HQkeEi9bSlfPaPsmwqS6+Rxtn8VWaYv4IQatGJmy7UahV0Q1bLtPu/oOBNvwys1v78fXcDCxCBzq96Jt/Gg1BuOldDu7RWgZdXNiGHOWG5kgLxAkFW00yXF+I28CyJ8uwyQHm/sCI84l+KGwe+NgUDQSAOs7qIgaGy9c+5HoURc+m5/DhTDdfZln4MLLL1uPq5di19Rn+Mi6vnNGhRwcDz3KATrNwlHBf57kFBiIp8EC441wBPO+wE4f0fsuCHI7lo7TH+DCbyIjucUWjbnBDBJljp9dENPQoKDnZjcVtQEn9SRRIHscAvGvOyyQdxyXSABG0+goEOkpZkmtsOHF598Kr+Dsuxfu0Mb07VD+eZjwP70P4=</div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="miniapp" scheme="http://yoursite.com/categories/sum/miniapp/"/>
    
    
      <category term="jest" scheme="http://yoursite.com/tags/jest/"/>
    
      <category term="taro.js" scheme="http://yoursite.com/tags/taro-js/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Jest使用</title>
    <link href="http://yoursite.com/sum/jsplus/Jest%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/Jest使用/</id>
    <published>2021-12-21T00:00:00.000Z</published>
    <updated>2022-05-04T07:29:21.254Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.12.21 星期二 : </p><h1 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h1><p>我在jest环境中工作，在寻找test coverage时，它显示在一行中，用符号E，这是什么？<br>我发现，E代表else path not taken，这意味着对于标记的if/else语句，if路径已经过测试，而不是else。</p><h2 id="几个指标"><a href="#几个指标" class="headerlink" title="几个指标"></a>几个指标</h2><!-- [Jest单元测试的几个指标](https://www.jianshu.com/p/1a89b2df6423) --><p>%stmts是语句覆盖率（statement coverage）：是不是每个语句都执行了？<br>%Branch分支覆盖率（branch coverage）：是不是每个if代码块都执行了？<br>%Funcs函数覆盖率（function coverage）：是不是每个函数都调用了？<br>%Lines行覆盖率（line coverage）：是不是每一行都执行了？</p><!-- [代码覆盖率浅谈 ](https://www.cnblogs.com/coderzh/archive/2009/03/29/1424344.html) --><!-- $_PS: 更全的介绍。 TODO: 添加到印象 --><h2 id="文件结构设计"><a href="#文件结构设计" class="headerlink" title="文件结构设计"></a>文件结构设计</h2><blockquote><p>Jest 推荐你在被测试代码的所在目录下创建一个 <code>__tests__</code> 目录，但你也可以为你的测试文件随意设计自己习惯的文件结构。不过要当心 Jest 会为快照测试在临近测试文件的地方创建一个 <code>__snapshots__</code> 目录。</p></blockquote><p>– 单测文件或者<strong>tests</strong>目录跟要测试的文件放在同个目录，方便我们查找</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>npx jest --showConfig &gt; test/jest.conf.output.json</code><br>onlyChanged: 只是针对修改的测试用例。<!-- 并不是增量 --></p><pre><code>&quot;automock&quot;: false,</code></pre><p>  “cacheDirectory”: “/private/var/folders/84/q_vxngn51816smpv9prjnx6h0000gp/T/jest_dy”,</p><p>  “injectGlobals”: true,</p><pre><code>&quot;onlyFailures&quot;: false,&quot;onlyChanged&quot;: false,&quot;lastCommit&quot;: false,</code></pre><p>–changedSince</p><pre><code>&quot;maxConcurrency&quot;: 5,&quot;maxWorkers&quot;: 9,</code></pre><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>js-dom<br>awesome-jest：<a href="https://github.com/jest-community/awesome-jest#results-processors" target="_blank" rel="noopener">https://github.com/jest-community/awesome-jest#results-processors</a></p><p>jest-dom: Custom Jest matchers to test the dom structure.</p><h4 id="result"><a href="#result" class="headerlink" title="result"></a>result</h4><p>报告：<br>jest-html-reporters 比 jest-html-reporter 强一扭扭:<br>有dashboard，可以看到图表。列表有分组/折叠。直接跳转到lcov-report，查看每个文件的细节。</p><p><a href="https://github.com/dkelosky/jest-stare" target="_blank" rel="noopener">https://github.com/dkelosky/jest-stare</a></p><blockquote><p>This is a Jest HTML reporter. It takes summary test results from jest and parses them into an HTML file for improved readability and filtering.</p></blockquote><p><a href>majestic</a> Zero config UI for Jest.<br>jest-bamboo-formatter: <a href="https://github.com/adalbertoteixeira/jest-bamboo-formatter" target="_blank" rel="noopener">https://github.com/adalbertoteixeira/jest-bamboo-formatter</a></p><!-- VSCode 调试Debugging tests in VS Code：<https://github.com/microsoft/vscode-recipes/tree/master/debugging-jest-tests>vscode-jest  --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bail: 1,</span></span><br><span class="line">preset: <span class="string">"ts-jest"</span>,</span><br><span class="line"><span class="comment">// verbose: true,</span></span><br><span class="line">globals: &#123;</span><br><span class="line">    <span class="string">"ts-jest"</span>: &#123;</span><br><span class="line">        tsConfig: <span class="string">"&lt;rootDir&gt;/tsconfig.json"</span>,</span><br><span class="line">        importHelpers: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">testEnvironment: <span class="string">"jsdom"</span>,</span><br><span class="line">rootDir: path.resolve(__dirname, <span class="string">"../"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在jest inital之前执行，比setupFilesAfterEnv更早，例如可以设置全局变量到global</span></span><br><span class="line"><span class="string">"setupFiles"</span>: [</span><br><span class="line">  <span class="comment">// jsdom，不涉及dom可不引入</span></span><br><span class="line">  <span class="string">"react-app-polyfill/jsdom"</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 类似，在jest inital之后执行，这一步能拿到jest的api进行扩展（故名AfterEnv）</span></span><br><span class="line"><span class="comment">// 可以执行例如引入enzyme配置等</span></span><br><span class="line"><span class="string">"setupFilesAfterEnv"</span>: [</span><br><span class="line">  <span class="string">"&lt;rootDir&gt;/src/setupTests.js"</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">moduleFileExtensions: [<span class="string">"ts"</span>, <span class="string">"tsx"</span>, <span class="string">"js"</span>, <span class="string">"jsx"</span>, <span class="string">"json"</span>, <span class="string">"node"</span>],</span><br><span class="line">moduleNameMapper: &#123;</span><br><span class="line">    <span class="string">'@tarojs/taro'</span>: <span class="string">'&lt;rootDir&gt;/test/mocks/taroMock.js'</span>, <span class="comment">// tarojs mock</span></span><br><span class="line">    <span class="string">'@tarojs/components'</span>: <span class="string">'@tarojs/components/dist-h5/react'</span>,</span><br><span class="line">    <span class="string">"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$"</span>:</span><br><span class="line">        <span class="string">"&lt;rootDir&gt;/test/mocks/fileMock.js"</span>,</span><br><span class="line">    <span class="string">"\\.(css|less|scss)$"</span>: <span class="string">"&lt;rootDir&gt;/test/mocks/styleMock.js"</span>,</span><br><span class="line">    <span class="string">'@/utils/Cookie'</span>: <span class="string">'&lt;rootDir&gt;/src/utils/Cookie/index.h5.js'</span>,</span><br><span class="line">    <span class="string">'@/utils/Track'</span>: <span class="string">'&lt;rootDir&gt;/test/mocks/emptyMock.js'</span>,</span><br><span class="line">    <span class="string">'^@/(.*)$'</span>: <span class="string">'&lt;rootDir&gt;/src/$1'</span>, <span class="comment">// webpack alias 配置</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">testMatch: [<span class="string">"&lt;rootDir&gt;/test/**/*.spec.js"</span>, <span class="string">"&lt;rootDir&gt;/test/**/*.spec.jsx"</span>],</span><br><span class="line">testPathIgnorePatterns: [</span><br><span class="line">    <span class="string">"/node_modules"</span>,</span><br><span class="line">    <span class="string">"test/components/Dialog.spec.js*"</span>,</span><br><span class="line">    <span class="string">"test/pages/balance_confirm*"</span>,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">"transform"</span>: &#123;</span><br><span class="line">  <span class="comment">// 用 `babel-jest` 处理 js</span></span><br><span class="line">  <span class="string">"^.+\\.js$"</span>: <span class="string">"&lt;rootDir&gt;/node_modules/babel-jest"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快照的序列化工具 || 否则测通过，但是快照文件没有内容生成。</span></span><br><span class="line">snapshotSerializers: [<span class="string">"enzyme-to-json/serializer"</span>],  </span><br><span class="line"><span class="comment">// "snapshotSerializers":["jest-serializer-vue"],</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">collectCoverage: <span class="literal">true</span>,</span><br><span class="line">coverageDirectory: <span class="string">"&lt;rootDir&gt;/test/coverage"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用一个 通配模式 的数组来指出仅哪些文件需要收集覆盖率信息。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1）lcov-report 目录结构是根据这个配置生成的。</span></span><br><span class="line"><span class="comment"> *  比如：同时配置 src/** 和src/utils 会生成两个utils的目录。</span></span><br><span class="line"><span class="comment"> *  src/** /*.ts?(x) 和 src/** /*.ts?(x) 是通一个目录 （ext: 空格是防止注释）</span></span><br><span class="line"><span class="comment"> * 2）路径后面必须有`**`, 比如`!/src/enums/**`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">collectCoverageFrom: [</span><br><span class="line">    <span class="comment">// "&lt;rootDir&gt;/src/utils/**",</span></span><br><span class="line">    <span class="comment">// 'src/**/!(*.d).&#123;js,ts&#125;',</span></span><br><span class="line">    <span class="string">"&lt;rootDir&gt;/src/**/*.[jt]s?(x)"</span>,</span><br><span class="line">    <span class="string">"!/src/enums/**"</span>,</span><br><span class="line">    <span class="string">"!src/**/*-mock*"</span>,</span><br><span class="line">],</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An array of regexp pattern strings that are matched against all file paths before executing the test. </span></span><br><span class="line"><span class="comment"> * 执行测试前 忽略掉的文件。</span></span><br><span class="line"><span class="comment"> *  即不会运行test， 区别于上面的collectCoverageFrom。</span></span><br><span class="line"><span class="comment"> * 防止某些文件输出意外的error等信息。</span></span><br><span class="line"><span class="comment"> *  `STACK: SyntaxError: /Users/user123/myprojects/xxx/pagev32614-mock.js:`</span></span><br><span class="line"><span class="comment"> *  collectCoverageFrom 和 coveragePathIgnorePatterns 都可以生效。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">coveragePathIgnorePatterns: [</span><br><span class="line">    <span class="string">'url-decode\\.json'</span>,</span><br><span class="line">    <span class="string">'.*-mock\..*'</span>,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * clover -&gt; clover.xml;</span></span><br><span class="line"><span class="comment"> * json -&gt; `coverage-final.json`; </span></span><br><span class="line"><span class="comment"> * lcov -&gt; lcov-report/目录, Icov.info; 每一个测试用例/文件的结果报告（详细）。</span></span><br><span class="line"><span class="comment"> * text: 控制台视图.</span></span><br><span class="line"><span class="comment"> * ?? Icov.info 文件记录了一堆问题。 <span class="doctag">TODO:</span> 记录的什么</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="string">"coverageReporters"</span>: [<span class="comment">/* "clover", */</span> <span class="string">"json"</span>, <span class="string">"lcov"</span>, [<span class="string">"text"</span>, &#123;<span class="string">"skipFull"</span>: <span class="literal">true</span>&#125;]],</span><br><span class="line"></span><br><span class="line">testResultsProcessor: <span class="string">"jest-bamboo-reporter"</span>,</span><br><span class="line"><span class="comment">// "coverageThreshold": &#123;</span></span><br><span class="line"><span class="comment">//     "global": &#123;</span></span><br><span class="line"><span class="comment">//         "branches": 50,</span></span><br><span class="line"><span class="comment">//         "functions": 50,</span></span><br><span class="line"><span class="comment">//         "lines": 50,</span></span><br><span class="line"><span class="comment">//         "statements": 50</span></span><br><span class="line"><span class="comment">//       &#125;,</span></span><br><span class="line"><span class="comment">//       "./src/components/": &#123;</span></span><br><span class="line"><span class="comment">//         "branches": 40,</span></span><br><span class="line"><span class="comment">//         "statements": 40</span></span><br><span class="line"><span class="comment">//       &#125;,</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">reporters: [</span><br><span class="line">    <span class="string">"default"</span>,</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"./node_modules/jest-html-reporter"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            pageTitle: <span class="string">"Test Report"</span>,</span><br><span class="line">            outputPath: <span class="string">"./test/report/test-report.html"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">"jest-html-reporters"</span>, &#123;</span><br><span class="line">        <span class="string">"publicPath"</span>: <span class="string">"./test/report"</span>,</span><br><span class="line">        <span class="string">"filename"</span>: <span class="string">"jest_html_reporters.html"</span>,</span><br><span class="line">        <span class="string">"openReport"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>globals, globalSetup; setupFiles, setupFilesAfterEnv</p><h4 id="小程序配置"><a href="#小程序配置" class="headerlink" title="小程序配置"></a>小程序配置</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/unit-test.html" target="_blank" rel="noopener">小程序-自定义组件-单元测试</a><br>miniprogram-simulate: <a href="https://github.com/wechat-miniprogram/miniprogram-simulate" target="_blank" rel="noopener">https://github.com/wechat-miniprogram/miniprogram-simulate</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// jest 是直接在 nodejs 环境进行测试，使用 jsdom 进行 dom 环境的模拟。在使用时需要将 jest 的 `testEnvironment` 配置为 `jsdom`。</span></span><br><span class="line">    <span class="comment">// jest 内置 jsdom，所以不需要额外引入。</span></span><br><span class="line">    <span class="string">"testEnvironment"</span>: <span class="string">"jsdom"</span>,</span><br><span class="line">    <span class="comment">// 配置 jest-snapshot-plugin 从而在使用 jest 的 snapshot 功能时获得更加适合肉眼阅读的结构</span></span><br><span class="line">    <span class="string">"snapshotSerializers"</span>: [<span class="string">"miniprogram-simulate/jest-snapshot-plugin"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol><li><code>getApp is not defined</code><blockquote><p>我们可以通过jest提供的global设置全局变量，可以在测试文件中单独编写，或者在package.json的jest块设置setupFiles属性，让jest自动加载。</p></blockquote></li></ol><blockquote><p>由于小程序页面的构成包含Page和生命钩子等miniprogram-simulate不提供的能力，所以我们需要自己先进行全局配置Page。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    getApp: () =&gt; &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;setupFiles&quot;: [&quot;./setup.js&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>\$_PS: 但是实际中，通过globals 只有一个用例单独测试的时候可以通过。两个用例一起测试又回报错。？？不解。</p><!-- <figure class="highlight plain"><figcaption><span>|| weapp.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">export const noop = () =&gt; &#123;&#125;;</span><br><span class="line">export const isFn = fn =&gt; typeof fn === &apos;function&apos;;</span><br><span class="line">let wId = 0;</span><br><span class="line">global.Page = (&#123; data, ...rest &#125;) =&gt; &#123;</span><br><span class="line">  const page = &#123;</span><br><span class="line">    data,</span><br><span class="line">    setData: jest.fn(function (newData, cb) &#123;</span><br><span class="line">      this.data = &#123;</span><br><span class="line">        ...this.data,</span><br><span class="line">        ...newData,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125;),</span><br><span class="line">    onLoad: noop,</span><br><span class="line">    onReady: noop,</span><br><span class="line">    onUnLoad: noop,</span><br><span class="line">    __wxWebviewId__: wId++,</span><br><span class="line">    ...rest,</span><br><span class="line">  &#125;;</span><br><span class="line">  global.wxPageInstance = page;</span><br><span class="line">  return page;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global.getApp = function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    baseUrl: &apos;https://m.maizuo.com/v4/api&apos;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">global.Date.now = jest.fn(() =&gt; 1536708613825);</span><br><span class="line">global.wx = &#123;</span><br><span class="line">  showLoading: jest.fn(),</span><br><span class="line">  hideLoading: jest.fn(),</span><br><span class="line">  showModal: jest.fn(),</span><br><span class="line">  request: jest.fn(),</span><br><span class="line">  getStorageSync: jest.fn(),</span><br><span class="line">  showShareMenu: jest.fn(),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = global;</span><br><span class="line">``` </span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 参考：</span><br><span class="line">[微信小程序的单元测试miniprogram-simulate 和 Jest](https://juejin.cn/post/6976886009971605541)</span><br><span class="line">[小程序单元测试](https://juejin.cn/post/6844903687580549134)</span><br><span class="line">[小程序单元测试 getApp() 实例无法获取？](https://developers.weixin.qq.com/community/develop/doc/000e28e71d8d70ea9479da1f951400) --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## mock</span><br><span class="line">### window.location</span><br><span class="line">&gt; 默认location.href或者location.search的值无法修改。 原因是location对象对这两个key或者也有类似到key进行了锁定。</span><br><span class="line">&lt;!-- $_PS: 虽然修改了（控制台）search，但是值并没有改变。｜ 生命周期引起的全局变化（Object.assign）</span><br><span class="line">$_PS: 修改href后，页面刷新了。</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br><span class="line">库：jest-location-mock</span><br><span class="line">或者4中方式：1 delete;2 Object.defineProperty;3 mockFile; 4 spyOn</span><br><span class="line"></span><br><span class="line">&lt;!-- \#2 [Jest: mock window.location methods](https://remarkablemark.org/blog/2018/11/17/mock-window-location/)</span><br><span class="line">&gt; Spying on window.location does make the test pass:</span><br><span class="line">Mock method</span><br><span class="line">delete --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line">\#1 [Window对象的各种测试方法总结](https://guzhongren.github.io/2020/06/window对象的各种测试方法总结/)</span><br><span class="line">```js</span><br><span class="line">// ## 1 delete </span><br><span class="line">import &#123; addHash &#125; from &apos;../src/attribute&apos;</span><br><span class="line"></span><br><span class="line">describe(&apos;method&apos;, () =&gt; &#123;</span><br><span class="line">  const &#123; location &#125; = window</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    delete window.location;</span><br><span class="line">    window.location = &#123;</span><br><span class="line">      ...location,</span><br><span class="line">      href: &apos;http://href.com&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    window.location = location</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&quot;should return http://href.com#123 when give 123&quot;, () =&gt; &#123;</span><br><span class="line">    expect(addHash(&apos;123&apos;)).toEqual(&apos;http://href.com#123&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// ## 2 Object.defineProperty</span><br><span class="line">import &#123; addHash &#125; from &apos;../src/attribute&apos;</span><br><span class="line">describe(&apos;method&apos;, () =&gt; &#123;</span><br><span class="line">  const &#123; location &#125; = window</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    Object.defineProperty(window, &apos;location&apos;, &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        ...location,</span><br><span class="line">        href: &apos;http://href.com&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    Object.defineProperty(window, &apos;location&apos;, location)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(&quot;should return http://href.com#123 when give 123&quot;, () =&gt; &#123;</span><br><span class="line">      expect(addHash(&apos;123&apos;)).toEqual(&apos;http://href.com#123&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// ## 3 mockFile</span><br><span class="line">import * as attribute from &apos;../src/attribute&apos;</span><br><span class="line">jest.mock(&apos;../src/attribute&apos;, () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    __esModule: true,</span><br><span class="line">    addHash: jest.fn(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">beforeEach( () =&gt; &#123;</span><br><span class="line">  jest.resetModules();</span><br><span class="line">&#125;)</span><br><span class="line">describe(&apos;method&apos;, () =&gt; &#123;</span><br><span class="line">  it(&apos;mocks `addHash`&apos;, () =&gt; &#123;</span><br><span class="line">    expect(jest.isMockFunction(attribute.addHash)).toBe(true);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&apos;verify method has been invoked&apos;, () =&gt; &#123;</span><br><span class="line">    expect(attribute.addHash).not.toHaveBeenCalled();</span><br><span class="line">    // will failed</span><br><span class="line">    // expect(attribute.addHash(&apos;test&apos;)).toEqual(&apos;http://localhost/#test&apos;)</span><br><span class="line">    attribute.addHash(&apos;234&apos;)</span><br><span class="line">    expect(attribute.addHash).toHaveBeenCalled()</span><br><span class="line">    expect(attribute.addHash).toBeCalledTimes(1)</span><br><span class="line">    expect(attribute.addHash).toBeCalledWith(&apos;234&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// ## 4 spyOn</span><br><span class="line">import &#123; addHash &#125; from &apos;../src/attribute&apos;</span><br><span class="line"></span><br><span class="line">describe(&apos;method&apos;, () =&gt; &#123;</span><br><span class="line">  let windowSpy</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    windowSpy = jest.spyOn(window, &apos;location&apos;, &apos;get&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    windowSpy.mockRestore()</span><br><span class="line">  &#125;)</span><br><span class="line">  it(&apos;mocks `addHash`&apos;, () =&gt; &#123;</span><br><span class="line">    expect(jest.isMockFunction(windowSpy)).toBe(true)</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&apos;spyOn for addHash&apos;, () =&gt; &#123;</span><br><span class="line">    windowSpy.mockImplementation(() =&gt; (&#123;</span><br><span class="line">      href: &apos;http://test.com&apos;,</span><br><span class="line">    &#125;))</span><br><span class="line">    expect(windowSpy).not.toHaveBeenCalled()</span><br><span class="line">    expect(addHash(&apos;123&apos;)).toEqual(&apos;http://test.com#123&apos;)</span><br><span class="line">    expect(windowSpy).toHaveBeenCalled();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> –&gt;</p><!-- \$_PS: 如果两个descibe 通过Object.defineProperty 会互相影响。```jsconst { location } = window;function initSearch(search = '') {    // Object.defineProperty(window, 'location', {    //     value: {    //         ...location,    //         search,    //     },    // });    delete window.location;    window.location = {        ...location,        href: `http://m.jd.com?`,        search,    }}describe('test Get Query from url search', () => {    describe('test url: "http://m.jd.com/test?a=1&b=2"', () => {        beforeAll(() => {            initSearch('a=1&b=2');        });        // afterAll(() => {        //     initSearch();        // });        test('should return 1 when query a', () => {            expect(getQuery('a')).toMatch(/1/);            expect(getQuery('a')).toBe('1');        });    });    describe('test url with none search: "http://m.jd.com/test?"', () => {        beforeAll(() => {            initSearch('');        });        it('should return "" when query sth is not included in search', () => {            expect(getQuery('a')).toBe('');        });        it('should return "" when query sth is not included in search', () => {            expect(getQuery('b')).toBe('');            expect(getQuery('c')).toBe('');        });    });});``` --><!-- End: #1 --><h1 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h1><!-- Jest识别三种测试文件，以.test.js结尾的文件，以.spec.js结尾的文件，和放到__tests__ 文件夹中的文件。 Jest识别三种测试文件:* 测试文件后缀为js，jsx，ts，tsx* 测试文件需要放在tests/unit/目录下或者是/__tests__/目录下* 以xx.test.js/...结尾的文件，以xx.spec.js/...结尾的文件，只要满足这三个要求的测试文件，使用运行jest时就会自动执行\$_PS: 应该是在设置中配置的。--><p>通常，mock函数会提供以下三个功能，来实现替换：捕获函数调用情况，设置函数返回值，改变原函数的实现。</p><p><a href="https://juejin.cn/post/6943890786370977800#heading-11" target="_blank" rel="noopener">Jest单元测试入门和实例</a><br>\$_PS: 基础教程。<br>Jest 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、Mock 功能、测试覆盖率工具，实现了开箱即用。</p><h1 id="react-组件-测试"><a href="#react-组件-测试" class="headerlink" title="react(组件)测试"></a>react(组件)测试</h1><!-- \#0 [【译】使用Enzyme和React Testing Library测试React Hooks](https://cloud.tencent.com/developer/article/1651156) --><p>原文: <a href="https://css-tricks.com/testing-react-hooks-with-enzyme-and-react-testing-library/" target="_blank" rel="noopener">Testing React Hooks With Enzyme and React Testing Library</a><br><!-- \$_PS: 介绍了通过两个库进行react组件测试的详细。包括shadow/渲染，组件mount/生命周期，点击/事件等。 --><br><!-- [react前端自动化测试： jest + enzyme ](https://www.cnblogs.com/susu8/p/9512393.html)\$_PS: 介绍了react组件测试的各个情况，包括组件wrapper，方法，事件模拟，生命周期等 --></p><p>enzyme 和 react-testing-library</p><h2 id="enzyme"><a href="#enzyme" class="headerlink" title="enzyme"></a>enzyme</h2><p>#1 <a href="https://www.cnblogs.com/vvjiang/p/8599980.html#shallow-render和mount的效率对比" target="_blank" rel="noopener">【前端单元测试入门02】react的单元测试之Enzyme</a><br><!-- 那么问题来了，mount存在的价值是什么，render就可以测试子组件，render还不需要jsdom和额外的配置。当然是有价值的，shallow和mount因为都是dom对象的缘故，所以都是可以模拟交互的，而render是不能的。 --></p><p>简而言之，Enzyme主要包括三个测试：<br>一个是浅渲染的shallow，这个生成虚DOM对象，所以渲染最快，然而它并不能测试子组件的相关代码。<br>另一个是DOM渲染mount，它会生成完整的DOM节点，所以可以测试子组件。但是要依赖一个用jsdom模拟的浏览器环境。<br>最后一个是HTML文本渲染render，它会将react组件渲染为html文本，然后在内部通过Cheerio自动生成一个Cheerio对象。</p><h2 id="enzyme-和-react-testing-library"><a href="#enzyme-和-react-testing-library" class="headerlink" title="enzyme 和 react-testing-library"></a>enzyme 和 react-testing-library</h2><!-- [【翻译】enzyme 和 react-testing-library 之间的不同](https://evanhongyousan.github.io/2020/10/30/Difference-between-enzyme-and-react-testing-library/) --><p>原文: <a href="https://techdoma.in/react-js-testing/difference-between-enzyme-and-react-testing-library" target="_blank" rel="noopener">Difference between enzyme and react-testing-library</a></p><p>\$_PS: 从配置，概念（组件测试 or dom测试），渲染机制(enzyme 有3种方式)，强制更新组件，实例方法，约束性（组件内部方法） 等5个方面详细比较了区别。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然@testing-library/react 的目标是与 Enzyme 竞争，并鼓励你从用户的角度编写可测试的代码和对应测试，但它们都有用例。你不能用一个代替另一个。有时你确实需要测试组件内部的状态变化或功能，尽管从用户的角度来看，它可能没有意义。在这些情况下，需要用 Enzyme 来测试实例方法。React Testing Library 很适合测试组件的 DOM，因为它允许你像用户使用它一样进行测试。</p><h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><p># <a href="https://www.cnblogs.com/SamWeb/p/13599947.html" target="_blank" rel="noopener">React单元测试— 以Jest为例</a></p><p>enzyme和@testing-library/react，怎么选择呢？现在倾向于＠testing-library/react, －是因为它对react hooks支持比较好，二是，它的测试更符合用户形为，渲染组件，查找元素，和用户使用浏览器没有什么区别。＠testing-library/react也鼓励我们，</p><p>\$_PS: 开文说明了@testing-library/react的优势；和enzyme有对比。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="Jest优势"><a href="#Jest优势" class="headerlink" title="Jest优势"></a>Jest优势</h2><!-- [前端单元测试之Jest](https://blog.csdn.net/xiangzhihong8/article/details/83819929) --><p>在软件的测试领域，测试主要分为：单元测试、集成测试和功能测试。</p><p>前端的测试框架有很多：mocha, jasmine, ava, testcafe, jest，他们都有各自擅长的领域和特点，而我们采用的jest框架具有如下的一些特点：</p><p>适应性：Jest是模块化、可扩展和可配置的；<br>沙箱和快速：Jest虚拟化了JavaScript的环境，能模拟浏览器，并且并行执行；<br>快照测试：Jest能够对React 树进行快照或别的序列化数值快速编写测试，提供快速更新的用户体验；<br>支持异步代码测试：支持promises和async/await；<br>自动生成静态分析结果：不仅显示测试用例执行结果，也显示语句、分支、函数等覆盖率。</p><h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><p>TDD: 测试驱动开发，英文为Testing Driven Development，强调的是一种开发方式，以测试来驱动整个项目，即先根据接口完成测试编写，然后在完成功能是要不断通过测试，最终目的是通过所有测试<br>BDD: 行为驱动测试，英文为Behavior Driven Development，强调的是写测试的风格，即测试要写的像自然语言，让项目的各个成员甚至产品都能看懂测试，甚至编写测试</p><p>TDD和BDD有各自的使用场景，BDD一般偏向于系统功能和业务逻辑的自动化测试设计；而TDD在快速开发并测试功能模块的过程中则更加高效，以快速完成开发为目的。</p><p>两者不是一个层级的东西。 BDD 包含 TDD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.12.21 星期二 : &lt;/p&gt;


&lt;h1 id=&quot;实际&quot;&gt;&lt;a href=&quot;#实际&quot; class=&quot;headerlink&quot; title=&quot;实际&quot;&gt;&lt;/a&gt;实际&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="jest" scheme="http://yoursite.com/tags/jest/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>地图库调研</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%9C%B0%E5%9B%BE%E5%BA%93%E8%B0%83%E7%A0%94/"/>
    <id>http://yoursite.com/sum/jsplus/地图库调研/</id>
    <published>2021-11-28T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.612Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.11.28 星期日 19:44 </p><h1 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h1><p>需要区分gis（webGIS）和 地图库/javascript api, 工具包，地图组件的区别。</p><h2 id="腾讯位置服务"><a href="#腾讯位置服务" class="headerlink" title="腾讯位置服务"></a>腾讯位置服务</h2><p>JavaScript API: <a href="https://lbs.qq.com/webApi/javascriptV2/jsGuide/jsOverview" target="_blank" rel="noopener">https://lbs.qq.com/webApi/javascriptV2/jsGuide/jsOverview</a><br>JavaScript API GL: <a href="https://lbs.qq.com/webApi/javascriptGL/glGuide/glOverview" target="_blank" rel="noopener">https://lbs.qq.com/webApi/javascriptGL/glGuide/glOverview</a></p><p>有微信小程序的项目，所以使用了腾讯位置服务。（优先使用国内库）<br>h5项目（旧）就是JavaScript API，可以缩小（新老）差异，快速重构。<br>其他就是性能和能力上差异。<br>都是免费开放，包括工具库。</p><p>两者实现是不一样的。<br>JavaScript API 兼容性更好一些，偏向底层js/浏览器，包括移动设备。<br>提供的图片格式：<a href="https://m3.map.gtimg.com/hwap?z=14&amp;x=26510&amp;y=20073&amp;styleid=1000&amp;scene=0&amp;version=957" target="_blank" rel="noopener">https://m3.map.gtimg.com/hwap?z=14&amp;x=26510&amp;y=20073&amp;styleid=1000&amp;scene=0&amp;version=957</a><br><!-- 加载视图内的图片，包括边角多出部分。 --></p><p>Javascript API GL 基于WebGL，3D的。效果更炫酷，也不用担心性能/渲染/计算的问题。而且不必须熟悉WebGL知识，api。</p><blockquote><p>JavaScript API V2可用于在网站中加入交互性强的街景、地图，能很好地支持PC及手机设备，身材小巧，动画效果顺滑流畅，动感十足，提供地图操作、标注、地点搜索、出行规划、地址解析、街景等接口，功能丰富，并免费开放各种附加工具库。JavaScript API V2是免费服务，任何提供免费访问的网站都可以调用，请参见 使用条款 。<br>Javascript API GL是基于WebGL技术打造的3D版地图API，3D化的视野更为自由，交互更加流畅。</p></blockquote><h2 id="lib价值方式"><a href="#lib价值方式" class="headerlink" title="lib价值方式"></a>lib价值方式</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p>同步和异步（动态）。</p><h3 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h3><p>react-amap: <a href="https://github.com/ElemeFE/react-amap/blob/v1.0.1/components/utils/APILoader.js" target="_blank" rel="noopener">https://github.com/ElemeFE/react-amap/blob/v1.0.1/components/utils/APILoader.js</a></p><blockquote><p>是一个基于 React 封装的高德地图组件。<br>提供了APILoader.js， 还是动态加载，但是在windows.callback 加入Promise。<br>包括script.async, script.defer。</p></blockquote><h3 id="框架中"><a href="#框架中" class="headerlink" title="框架中"></a>框架中</h3><p>主要指react，vue 等mvc框架，涉及到动态/异步加载，包括mounted后才可以有真实dom，还需要refs。<br>1) 定义callback：window.apiLoaded = setMap();<br>2) 所以需要先提供setMap函数。<br>3) 最后动态加载api。但是不需要放在mounted生命周期内。</p><p>以react-hooks 为例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h5Map</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapDomRef = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> qqMap, mapCenter;</span><br><span class="line">  <span class="keyword">let</span> setMap = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapEl = mapDomRef.current;</span><br><span class="line">    <span class="comment">// 设置地图中心点</span></span><br><span class="line">    mapCenter = <span class="keyword">new</span> <span class="built_in">window</span>.qq.maps.LatLng(latitude, longitude);</span><br><span class="line">    qqMap = <span class="keyword">new</span> <span class="built_in">window</span>.qq.maps.Map(mapEl, &#123;</span><br><span class="line">        center: mapCenter,</span><br><span class="line">        zoom: mapInfo.scale || <span class="number">14</span>,</span><br><span class="line">        <span class="comment">// 启用缩放控件</span></span><br><span class="line">        zoomControl: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 地图类型控件，若为false则停用状态地图类型控件</span></span><br><span class="line">        mapTypeControl: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [mapDomRef]);</span><br><span class="line">  <span class="built_in">window</span>.loadedMapApi = setMapImgNew;</span><br><span class="line">  loadScript();</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;<span class="name">View</span> <span class="attr">ref</span>=<span class="string">&#123;mapDomRef&#125;</span> <span class="attr">style</span>=<span class="string">&#123;mapStyle&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="库资源"><a href="#库资源" class="headerlink" title="库资源"></a>库资源</h1><h2 id="常用的前端地图框架"><a href="#常用的前端地图框架" class="headerlink" title="常用的前端地图框架"></a>常用的前端地图框架</h2><p># <a href="https://blog.csdn.net/nju_zjy/article/details/109858715" target="_blank" rel="noopener">常用的前端地图框架（WebGIS框架）</a><br># <a href="https://juejin.cn/post/6989552050820349988" target="_blank" rel="noopener">常用的前端地图框架（WebGIS框架）</a></p><ol><li><p>Leaflet<br>Leaflet 是最著名的前端地图可视化库，它开源、体积小、结构清晰、简单易用。</p></li><li><p>Mapbox GL JS<br>Mapbox GL JS 是目前最新潮的前端地图库，它的矢量压缩、动态样式和三维性能令人印象深刻。它本身是开源的，但一般依赖于Mapbox公司提供的底图服务。</p></li><li><p>ArcGIS API for JS<br>ArcGIS API for JS 是较为学院派的前端地图库，它是ArcGIS开发套件中的一部分，和桌面端和服务器端ArcGIS软件有较好的协作。它不开源且收费不低，在学术场景下较为常用。</p></li><li><p>Openlayers<br>Openlayers 也是常用的前端地图库，它开源，相比于Leaflet更加复杂和完备。</p></li><li><p>Cesium<br>Cesium 是三维地理可视化的常用库，在大尺度的可视化（地形、建筑、地球）中十分常用。</p></li><li><p>百度地图 JS API /百度地图 API GL<br>百度地图 JS API 是传统的二维地图，百度地图 API GL 是三维地图，它们依赖百度地图提供的后台服务。除了地图服务外还有检索、导航、实时交通等关联服务。开发者有免费的限额。</p></li><li><p>高德地图 JS API<br>高德地图 JS API 与百度类似。</p></li><li><p>Google Maps JS API<br>谷歌地图 JS API 在境外有更好的数据。</p></li><li><p>AntV L7<br>AntV L7 是空间数据可视化库，它可以使用高德地图等协作构建地图可视化。</p></li><li><p>Mapbox.js<br>Mapbox.js 是 Leaflet 的一个扩展插件（与 Mapbox GL JS 不同）。</p></li></ol><h2 id="8款地图API和javascript库"><a href="#8款地图API和javascript库" class="headerlink" title="8款地图API和javascript库"></a>8款地图API和javascript库</h2><p><a href="https://juejin.cn/post/6871889981116252173" target="_blank" rel="noopener">「开源项目」8款最受欢迎的地图API和javascript库</a><br>使用javascript函数库对地图进行分类<br>如何选择有效的解决方案<br>版本和升级<br>地图工具和库<br>Leafletjs<br>Openlayers<br>Mapbox<br>Google Maps API<br>Datamaps<br>Bing Maps<br>ArcGIS<br>Zeemaps<br>写在最后</p><h2 id="WebGIS-前端框架"><a href="#WebGIS-前端框架" class="headerlink" title="WebGIS 前端框架"></a>WebGIS 前端框架</h2><p><a href="https://zhuanlan.zhihu.com/p/408253695" target="_blank" rel="noopener">WebGIS 前端框架</a></p><blockquote><p>WebGIS（网络地理信息系统）是指工作在Web网上的GIS,是传统的GIS在网络上的延伸和发展，具有传统GIS的特点，可以实现空间数据的检索、查询、制图输出、编辑等GIS基本功能，同时也是Internet 上地理信息发布、共享和交流协作的基础。</p></blockquote><p>四个常见的webGIS JS API。</p><p>Openlayers</p><blockquote><p>OpenLayers 是一个高性能、功能丰富的库，用于在 Web 上创建交互式地图。它可以显示从任何来源加载的地图图块、矢量数据和标记。</p></blockquote><p>Leaflet</p><blockquote><p>Leaflet 是用于移动友好型交互式地图的领先开源 JavaScript 库。 JS 的重量仅为 39 KB，它具有大多数开发人员需要的所有映射功能。</p></blockquote><p>ArcGIS js API</p><p>SuperMap iClient JavaScript</p><blockquote><p>superMap作为国内的gis的领头羊，其技术实力还是很强的，尤其是桌面版的软件核心代码从头用c++来进行重写，性能上还是很高的，很看好其发展潜力。<br>闲话不再多说，言归正传，SuperMap的js api其核心还是前面的讲的leaflet和openlayers等之类的开源代码，它进行了二次封装，详见下图：</p></blockquote><h1 id="地图相关知识"><a href="#地图相关知识" class="headerlink" title="地图相关知识"></a>地图相关知识</h1><p><a href="https://segmentfault.com/a/1190000037611134" target="_blank" rel="noopener">记一次前端”揭开绘制地图的神秘面纱”分享会</a></p><p>四.geojson数据到底是什么<br>geojson是用json的语法表达和存储地理数据，可以说是json的子集, 它不是专门js使用的这点要清楚.<br>地图上有山川, 河流, 海洋等等的地理信息, 那么如何描述一条河? 这个时候就要使用geojson格式的文件来描绘.<br>并不是必须用geojson, geojson只是一套规范, 各大解析器用这套规范来解析生成对应的景色, 我们完全可以制定自己的规范来实现这些, 无非是兼容性不好需要自己写绘制的解析器.<br>五.geojson详细介绍</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述多个点(FeatureCollection)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="comment">// "type": "Point",  // 专指画点</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiPoint"</span>, <span class="comment">// 多点, 也就是连续画多个同样的点</span></span><br><span class="line">        <span class="attr">"coordinates"</span>: [[<span class="number">105.380859375</span>, <span class="number">31.57853542647338</span>],</span><br><span class="line">        [<span class="number">105.580859375</span>, <span class="number">31.52853542647338</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 描述一条线(LineString)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"LineString"</span>, <span class="comment">// 这里所有的点会连接在一起形成线</span></span><br><span class="line">        <span class="attr">"coordinates"</span>: [[<span class="number">105.6005859375</span>, <span class="number">30.65681556429287</span>],</span><br><span class="line">        [<span class="number">107.95166015624999</span>, <span class="number">31.98944183792288</span>],</span><br><span class="line">        [<span class="number">109.3798828125</span>, <span class="number">30.031055426540206</span>],</span><br><span class="line">        [<span class="number">107.7978515625</span>, <span class="number">29.935895213372444</span>]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>六. geojson的相关网站与工具的使用<br>七.自制geojson解析绘制工具的思路</p><p>八.地图的基本概念 (瓦片地图, 矢量地图)<br><strong> 有没有发现咱们使用的地图在放大的时候,区域都是一个方块一个方块的被加载成图像的.</strong> 如果你打开控制台的network还可以看到有好多png的请求.<br><strong> 地图这种超大的数据, 超多细节是如何做到快速渲染的?</strong> 下面是现在比较主流的两种地图的绘制模式.</p><p>栅格瓦片地图<br>顾名思义图片像是瓦片一样堆叠起来的格子状成为地图, 有点像拼图, 是不是感觉一点也不高大上….<br>但这里也是有很多问题要解决的, </p><p>矢量地图<br>顾名思义就是矢量绘制出图形, 只要不是照片肯定会小很多, 对于矢量为什么轻量并且不失真可以参考的上篇文章svg的分享svg实战</p><p>矢量瓦片采用和栅格瓦片相同的分级切割方案，不同的是，瓦片数据传输的是地理数据，包括道路、土地、建筑等，通过在前端做地图的渲染，具有如下优势：</p><p>极少占用服务器空间，降低网络开销，本地化部署只需5G空间(中国)。<br>地图的底图样式更换简单.<br>因为具有了地理数据本身，可在数据基础上做三维空间的延伸，例如 3D 建筑。<br>数据保密性强。</p><p>九.不同的坐标系<br>** 地球本身是个椭球体, 要把它以平面的方式绘制在一个矩形上也真的不好办, 现在有不少绘制的方式但是都有各自的优缺点, 感兴趣的朋友可以查查看具体的细节, 我这里就简单介绍下比较常见的方式.</p><p>经纬度EPSG：4326 也就是地图的默认坐标<br>现在球体上定义好经纬度, 然后在正方形纸上画出刻度, 对应的绘制<br>墨卡托投影(EPSG：3785 )<br>把地球放在一个圆筒里面, 假设地球内部有个光源, 那么地球在圆柱上的投影就是地图<br>火星坐标系<br>火星坐标是国家测绘局为了国家安全在原始坐标的基础上进行偏移得到的坐标，基本国内的电子地图、导航设备都是采用的这一坐标系或在这一坐标的基础上进行二次加密得到的。<br>火星坐标的真实名称应该是 GCJ-02 坐标，基本上所有的国内的电子地图采用的都是火星坐标系甚至 Google 地图中国部分都特意为中国政府做了偏移。</p><p>百度坐标系</p><p>十.更快的前端数据 -&gt; WebAssembly<br>十一. hello 级别的WebAssembly</p><p>十二.(组内篇)我写的2d与3d工程的代码介绍</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.11.28 星期日 19:44 &lt;/p&gt;


&lt;h1 id=&quot;实际&quot;&gt;&lt;a href=&quot;#实际&quot; class=&quot;headerlink&quot; title=&quot;实际&quot;&gt;&lt;/a&gt;实际&lt;/h
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="jslib" scheme="http://yoursite.com/tags/jslib/"/>
    
  </entry>
  
  <entry>
    <title>React使用记录</title>
    <link href="http://yoursite.com/sum/jsplus/react%20hooks%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/jsplus/react hooks使用记录/</id>
    <published>2021-11-23T00:00:00.000Z</published>
    <updated>2022-05-04T07:24:42.990Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.11.23 星期二 13:39 </p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://blog.csdn.net/landl_ww/article/details/102158814" target="_blank" rel="noopener">呕心沥血，一文看懂 react hooks 中 useState、useEffect、useContext、useRef、自定义hook</a><br><!-- PS: 基础介绍。介绍各个hooks的含义，使/适用条件。 --></p><p><a href="https://www.cnblogs.com/SamWeb/p/11946418.html" target="_blank" rel="noopener">React Hooks — useState 和 useEffect</a><br><!-- PS: 讲解了 useState 和 useEffect 的历程，react原理。 --></p><h2 id="class和函数式组件"><a href="#class和函数式组件" class="headerlink" title="class和函数式组件"></a>class和函数式组件</h2><!-- [react hooks之useState](https://juejin.cn/post/6984037719219372068)class和函数式组件如何选择当我们有了选择, 那就涉及到如何做选择的问题, 一个项目中可以两种都共存, 这是没问题的, 但细化到某一个组件, 那就有且仅有一个写法, 要么写成class的形式, 要么写成函数式组件此时个人觉得, 如果一个组件是纯展示型的组件, 那么使用函数式组件再好不过, 代码精简, 也能满足需求但当一个页面是顶级页面, 顶级组件, 或者其他组件, 和顶级页面/组件一样涉及比较多的逻辑处理, 要管理众多的state的时候, 那么class更合适, 因为众多的state和逻辑处理意味着多种生命周期方法的处理, 以及prevProps prevState的判断与管理, 此时函数式组件就显得有点力不从心了,** 当然不是意味着无法实现, 只是相对class来说上手有些难度, 因此这个时候, 个人更推荐使用class形式的组件** --><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><blockquote><p>constructor: Function components don’t need a constructor. You can initialize the state in the useState call. If computing the initial state is expensive, you can pass a function to useState.<br>构造函数: 函数式组件不需要构造函数, 你可以在useState的调用中去初始化state, 如果计算state会有较大的开销, 那你可以传一个函数到useState中</p></blockquote><h3 id="useState惰性初始化函数和更新函数"><a href="#useState惰性初始化函数和更新函数" class="headerlink" title="useState惰性初始化函数和更新函数"></a>useState惰性初始化函数和更新函数</h3><ul><li>惰性初始化函数在某些场景下可以规避性能问题，提升性能</li><li>更新函数默认参数可以确保每次访问的值是更新后的值<!-- [useState惰性初始化函数和更新函数](https://juejin.cn/post/7022908934235095054) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当函数组件更新re-render时，函数组件内所有代码都会重新执行一遍。此时initialState的初始值是一个相对开销较大的IO操作。每次函数组件re-render时，第一行代码都会被执行一次，引起不必要的性能损耗。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> initialState = <span class="built_in">Number</span>(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'count'</span>))</span><br><span class="line"><span class="keyword">const</span> initialState = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Number</span>(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'count'</span>))</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = React.useState(initialState)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * # 更新函数</span></span><br><span class="line"><span class="comment">  假设doSomethingAsync这个异步函数执行需要500ms，连续快速三次点击按钮，会发现最终count值为1，而不是我们想要的最新值3。</span></span><br><span class="line"><span class="comment">    而在increment函数内部打印console.log可以发现，函数increment确实执行了三次，但是如果在setCount方法上方console.log(count)打印会发现count值一直是0。</span></span><br><span class="line"><span class="comment">    目前我理解的原因是函数组件在一次re-render完成之前，我们连续三次点击按钮，调用increment方法时，setCount所访问的count值一直是未更新的值0导致的。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DelayedCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> increment = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> doSomethingAsync()</span><br><span class="line">    setCount(count + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;button onClick=&#123;increment&#125;&gt;&#123;count&#125;&lt;/button&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DelayedCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> increment = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> doSomethingAsync()</span><br><span class="line">    setCount(<span class="function"><span class="params">previousCount</span> =&gt;</span> previousCount + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;button onClick=&#123;increment&#125;&gt;&#123;count&#125;&lt;/button&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="props作为初始值"><a href="#props作为初始值" class="headerlink" title="props作为初始值"></a>props作为初始值</h3><blockquote><p>一定要注意useState的参数，它只在第一次渲染时起作用，给状态变量赋初始值，使组件拥有初始状态。在以后的渲染中，不管是调用更新函数导致的组件渲染，还是父组件渲染导致的它的渲染，参数都不会再使用了，直接被忽略了，组件中的state状态变量，获取的都是最新值。</p><p>如果你想像下面的代码一样，使用父组件每次传递过来的props 来更新state，就会有问题，因为props.message, 只会在第一次渲染中使用，以后组件的更新，它就会被忽略了。<!-- PS: 也就是上文初始化状态时优化 --><br><!-- [React Hooks --- useState 和 useEffect](https://www.cnblogs.com/SamWeb/p/11946418.html) --></p></blockquote><p>接合useEffect(() =&gt; { setState() }, [props.state]);<br><!-- 父组件异步接口取得数据后，传递子组件；子组件需要在自己的状态中操作数据，比如tipBars的条数 展示特定的数据 --></p><h3 id="useMemo和useCallback的Hook"><a href="#useMemo和useCallback的Hook" class="headerlink" title="useMemo和useCallback的Hook"></a>useMemo和useCallback的Hook</h3><blockquote><p>　在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。<br>子组件引用了number相关数据，但是当name相关数据发生变化，也会重绘整个组件，子组件虽然没有任何变化，也会重绘。为了避免不必要的子组件的重渲染，需要使用useMemo和useCallback的Hook。</p></blockquote><p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。</p><!-- useCallback返回一个 memoized 回调函数。useCallback(fn, deps) 相当于 useMemo(() => fn, deps)。 --><p>useCallback 和 useMemo 参数相同，第一个参数是函数，第二个参数是依赖项的数组。主要区别是 React.useMemo 将调用 fn 函数并返回其结果，而 React.useCallback 将返回 fn 函数而不调用它。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; onButtonClick, data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Child Render'</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;onButtonClick&#125;&gt;&#123;data.number&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Child = memo(Child)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  const [number, setNumber] = useState(0)</span></span><br><span class="line"><span class="regexp">  const [name, setName] = useState('hello') /</span><span class="regexp">/ 表单的值</span></span><br><span class="line"><span class="regexp">  const addClick = useCallback(() =&gt; setNumber(number + 1), [number])</span></span><br><span class="line"><span class="regexp">  const data = useMemo(() =&gt; (&#123; number &#125;), [number])</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /</span>&gt;</span><br><span class="line">      &lt;Child onButtonClick=&#123;addClick&#125; data=&#123;data&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></p><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>必要的时候使用。非必要使用简单函数。</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>~每次数据更新，setState 会重新渲染页面。~<br>  ~如果调用多次，会触发多次页面~<br><!-- 父组件中有4个子组件；父组件useEffect 中调用4次setState 设置子组件的props，而props 更新会使4个子组件重新渲染，所以引起 调用多/4次 （父组件）渲染/useEffect的发生。 --></p><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><blockquote><p>useEffect 的执行时机，useEffect和componnentDidMount都是在组件挂载后才执行。但对于componentDidMount来说，如果组件挂载后，你同步设置一个状态，React知道会触发另外一次渲染，它就不会使用第一次的渲染结果，而是将使用第二次渲染的结果，画在屏幕上。而useEffect则是在第一次渲染结果画到页面上后，才执行，再将第二次的渲染结果画到屏幕上，这样会造成闪动。如果不想要这种闪动，就要使用useLayoutEffect<br><!-- [React Hooks --- useState 和 useEffect](https://www.cnblogs.com/SamWeb/p/11946418.html) --></p></blockquote><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="useCallback-1"><a href="#useCallback-1" class="headerlink" title="useCallback"></a>useCallback</h2><h3 id="useCallback-值不是最新的。"><a href="#useCallback-值不是最新的。" class="headerlink" title="useCallback 值不是最新的。"></a>useCallback 值不是最新的。</h3><p>场景：<br>&lt;!–<br># <a href="https://blog.csdn.net/weixin_44760923/article/details/110631960" target="_blank" rel="noopener">【react】hook中useState设置数据不能立即反映更改</a><br><a href="https://qastack.cn/programming/54069253/usestate-set-method-not-reflecting-change-immediately" target="_blank" rel="noopener">useState设置方法不能立即反映更改</a></p><p><strong>同样，这里的问题不仅是异步的性质，而且函数更新状态的当前闭包和状态更新使用状态值这一事实将放映在下一次重新渲染中，现有的闭包不会收到影响，而是会创建新的闭包。</strong> 现在，在当前状态下，挂钩中的值是由现有的闭包获得的，并且在重新渲染时，将根据是否再次创建函数来更新闭包。</p><p>即使添加了一个setTimeout函数，尽管超时将在重新渲染的一段时间后运行，但setTimeout仍将使用其先去关闭而不是更新后的值。</p><p>如果要对状态更新执行操作，则需要使用useEffect钩子，就像componentDidUpdate在类组件中使用一样，因为useState返回的setter没有回调模式</p><p>\$_PS: 虽然是state。但是感觉差不多<br>&lt;!– End: #1 –!&gt;<br>// 使用函数，而不是固定值，将最新值传给要处理的函数，并返回给这个设置值的函数</p><p>#2 <a href="https://segmentfault.com/a/1190000039365818" target="_blank" rel="noopener">react函数组件中使用useState改变值后立刻获取最新值</a><br>$_PS: 从源码，hooks和redux的角度 说明问题。</p><p> –&gt;<br>需要配合userEffect,第二个数组参数，表示数组内的变量变化会执行userEffect的方法。</p><h3 id="获取之前的state"><a href="#获取之前的state" class="headerlink" title="获取之前的state"></a>获取之前的state</h3><!-- 实际场景：再次加入购物车三个状态：不展示，展示-选中，展示-未选中；要在展示/隐藏的时候埋点。实际：同一个cartSwitch 函数操作的，修改status的值。 useCallback 中需要新值和旧值比较。 old < 0 && new > -1 then callTrack(). <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cartSwitch = <span class="function"><span class="params">reasonCode</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 后台不下发sku数组，不展示加车</span></span><br><span class="line">      <span class="keyword">if</span> (!skuArr.length) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      callCartSwitchTrack(<span class="number">99</span>); <span class="comment">// 99: 方便埋点（大于0）。</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      setCartStatus(cartStatusNew); <span class="comment">// 1 or 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加车曝光埋点</span></span><br><span class="line"><span class="keyword">const</span> callCartSwitchTrack = useCallback(<span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cartStatus &lt; <span class="number">0</span> &amp;&amp; newVal &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        track.exposure(&#123;</span><br><span class="line">            eid: wEPoint.W_jdgwxcx_OrderCancel_BackToCartExpo,</span><br><span class="line">            eparam: trackParam</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [cartStatus]);</span><br></pre></td></tr></table></figure><p> –&gt;<br><a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state">如何获取上一轮的 props 或 state</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prevCountRef = useRef();</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    prevCountRef.current = count;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> prevCount = prevCountRef.current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Now: &#123;count&#125;, before: &#123;prevCount&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以把它抽取成一个自定义 Hook：</p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="more-hooks"><a href="#more-hooks" class="headerlink" title="more hooks"></a>more hooks</h3><p><code>Uncaught Invariant Violation: Rendered more hooks than during the previous render</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Table = <span class="function">(<span class="params">listings</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;isLoading&#125; = useSelector(<span class="function"><span class="params">state</span> =&gt;</span> state.tableReducer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;h1&gt;Loading...&lt;/h1&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"Run something"</span>)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (&lt;table&gt;&#123;listings&#125;&lt;/table&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useEffect 夹在了两个return 之前。应该放到return上面，统一hooks。<br><!-- https://stackoverflow.com/questions/55622768/uncaught-invariant-violation-rendered-more-hooks-than-during-the-previous-rende?answertab=modifieddesc#tab-top --><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.11.23 星期二 13:39 &lt;/p&gt;


&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="react.js" scheme="http://yoursite.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>Whistle使用记录</title>
    <link href="http://yoursite.com/sum/others/whistle%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/others/whistle使用记录/</id>
    <published>2021-11-23T00:00:00.000Z</published>
    <updated>2022-05-04T07:28:34.999Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.11.23 星期二 10:11 </p><h2 id="https-请求代理"><a href="#https-请求代理" class="headerlink" title="https 请求代理"></a>https 请求代理</h2><p>工具栏 https 选项：<br>1）证书安装<br>2）勾选 Capture TUNNEL CONNECTs<br>&lt;!– </p><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><p><a href="https://my.oschina.net/u/3060934/blog/5161752" target="_blank" rel="noopener">Whistle 配置 https 抓包</a><br>$_PS: windows，mac, android<br><a href="https://www.cnblogs.com/amiezhang/p/12917981.html" target="_blank" rel="noopener">whistle允许https</a><br>$_PS: mac 简单直接教程<br> –&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.11.23 星期二 10:11 &lt;/p&gt;


&lt;h2 id=&quot;https-请求代理&quot;&gt;&lt;a href=&quot;#https-请求代理&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Taro多端开发实际</title>
    <link href="http://yoursite.com/sum/miniapp/taro%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E9%99%85/"/>
    <id>http://yoursite.com/sum/miniapp/taro多端开发实际/</id>
    <published>2021-11-23T00:00:00.000Z</published>
    <updated>2022-05-04T07:55:05.904Z</updated>
    
    <content type="html"><![CDATA[<p>taro多端开发实践。<br>主要是（微信）小程序和h5的差异。</p><a id="more"></a><p style="text-align:right"> 2021.11.23 星期二 11:03 </p><h2 id="h5-和-小程序差异"><a href="#h5-和-小程序差异" class="headerlink" title="h5 和 小程序差异"></a>h5 和 小程序差异</h2><p>\$_PS: 主要是对比了微信小程序  </p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><p>@tarojs/cli 可以设置px转换的基础值。<br>如果设计稿（已有h5项目）是375px，而cli的配置中是750，可以把现有的px值都 *2（scss等会处理）。</p><p>如果不希望转换单位的，可以把px任一单词改为大写。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>taro 的标签 Block, Image，Input，Textarea等都会有一个外部标签包着，会造成样式出现问题。</p><h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><p>比如在使用子元素的时候 <code>p:first-child</code>。</p><p>如果不想修改css或者css不好修改，可以考虑把Block 修改为 React.Fragment</p><h5 id="Textarea"><a href="#Textarea" class="headerlink" title="Textarea"></a>Textarea</h5><p>在小程序直接是一个标签；h5中外面包了一层。<br>可以在外层的wrapper下写boder-radius,overflow,bg等。<br>Textarea标签<code>className={styles[</code>textarea-style-${process.env.TARO_ENV}<code>]}</code>（使用了css module）<br>也不写style了。样式也少了，只需处理兼容的问题。</p><p>taro文档中也没有处理css多端的方式。<br>不同的css处理方式，会有不同的解决方法。比如css-in-js,文件组件等的方式。<br><!-- 本次只做textarea的小调整。不用大阵仗 --><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.textarea-wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">  textarea&#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textarea-style-h5</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textarea-style-weapp</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h5><p>Image 最好显示设置宽高。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image src=&#123;staffPhoto&#125; style=&#123;&#123;width:&quot;50px&quot;, height:&quot;50px&quot;&#125;&#125;&gt;&lt;/Image&gt;</span><br></pre></td></tr></table></figure></p><!-- PS: 一行代码`code ` hexo 预览报错。 --><blockquote><p><code>&lt;img&gt;</code> 图片尺寸问题​<br>在 H5 中，不设置 <code>&lt;img&gt;</code> 的宽高时，浏览器会使用原图的宽高作为标签的宽高。<br>而在小程序中，不设置 <code>&lt;Image&gt;</code> 的宽高时，会使用默认样式中规定的宽高。<br>解决办法：用户在使用 <code>&lt;img&gt;</code> 时必须显式设置它的宽高。</p></blockquote><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 组件暂未支持h5.需要自己写h5的地图组件（可根据小程序使用tencent，baidu,gaode 地图api）</p><h5 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h5><p>编译到h5是 <code>&lt;taro-web-view-core src=&quot;https://x.html&quot; class=&quot;hydrated&quot;&gt;&lt;iframe class=&quot;taro-webview&quot; src=&quot;https://x.html&quot;&gt;&lt;/iframe&gt;&lt;/taro-web-view-core&gt;</code>。<br>所以需要，确认父级的定位方式，以及指定height<!-- 注意max-height限制 --> 。<br><!-- 比如：是在一个弹窗中。 --><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.taro-webview</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处要注意fixed定位的特殊性。可以灵活修改：不用top等定位，或者新的视口区域，或者修改定位方式。<br><!-- 以防对全局样式影响。在组件中修改样式。`<style>{`.taro-webview{position: relative;}`}</style>`（因为使用了css module） 。 --></p><h3 id="标签事件不一致"><a href="#标签事件不一致" class="headerlink" title="标签事件不一致"></a>标签事件不一致</h3><p>通用规则​: click -&gt;    tap</p><p><code>&lt;Input&gt;</code> 事件 onChange -&gt;    onInput; keypress -&gt;    onConfirm</p><p><code>&lt;Checkbox&gt;</code>, <code>&lt;Radio&gt;</code> 事件 onChange    -&gt; bindtap</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><h5 id="getApp"><a href="#getApp" class="headerlink" title="getApp"></a>getApp</h5><p>在h5中<code>getApp()</code>返回的是undefined，需要处理。<br><code>const sysInfo = Taro.getApp()?.systemInfo || {};</code></p><h4 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h4><h5 id="setClipboardData"><a href="#setClipboardData" class="headerlink" title="setClipboardData"></a>setClipboardData</h5><blockquote><p>调用成功后，会弹出 toast 提示”内容已复制”，持续 1.5s<br>h5没有上面的toast，需要兼容处理。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;taro多端开发实践。&lt;br&gt;主要是（微信）小程序和h5的差异。&lt;/p&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="miniapp" scheme="http://yoursite.com/categories/sum/miniapp/"/>
    
    
      <category term="taro.js" scheme="http://yoursite.com/tags/taro-js/"/>
    
  </entry>
  
  <entry>
    <title>Nvm使用</title>
    <link href="http://yoursite.com/sum/server/nvm%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/server/nvm使用/</id>
    <published>2021-11-20T00:00:00.000Z</published>
    <updated>2022-05-04T07:20:58.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default 14</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><!-- [nvm安装（Windows篇）](https://github.com/coreybutler/nvm-windows/releases/download/1.1.8/nvm-setup.zip) --><p><a href="https://github.com/coreybutler/nvm-windows/releases/download/1.1.8/nvm-setup.zip" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases/download/1.1.8/nvm-setup.zip</a></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br></pre></td></tr></table></figure><p>注意删除后，所有安装的模块都没有了。<br><!-- 但是有些模块的配置还在，比如nrm --></p><h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><h3 id="指令不存在"><a href="#指令不存在" class="headerlink" title="指令不存在"></a>指令不存在</h3><p><code>sh: wxa: command not found</code><br>全局安装的cli 找不到指令。<br>原因：切换了node版本。<br>解决：如有必要可以修改默认的node版本。</p><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p><code>Could not retrieve https://nodejs.org/dist/latest/SHASUMS256.txt.</code><br><!-- [nvm 安装 nodejs 报错 Could not retrieve https://nodejs.org/dist/latest/SHASUMS256.txt.](https://www.codeleading.com/article/81994160881/) --></p><p>1.打开 nvm安装目录/settings.text文件<br>2.添加两行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror:npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror:npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></p><p>3.然后继续安装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="server" scheme="http://yoursite.com/categories/sum/server/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nvm和n比较</title>
    <link href="http://yoursite.com/sum/server/nvm%E5%92%8Cn%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/sum/server/nvm和n比较/</id>
    <published>2021-11-20T00:00:00.000Z</published>
    <updated>2022-05-04T07:21:01.528Z</updated>
    
    <content type="html"><![CDATA[<!-- 在  -->node 的版本管理工具<!-- 中，nvm 自然声名远扬，然而我们也不能忘了来自 TJ 的 n -->。<br><!-- 这两种，是目前最主流的方案。 --><p>creationix/nvm: <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a><br>TJ: <a href="https://github.com/tj/n" target="_blank" rel="noopener">https://github.com/tj/n</a></p><a id="more"></a><p style="text-align:right"> 2021.11.20 星期六 17:20 </p><!-- \# [管理 node 版本，选择 nvm 还是 n](https://www.cnblogs.com/shengulong/p/9343172.html)\# [node版本管理器：nvm 和 n区别](https://cloud.tencent.com/developer/article/1674774) --><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>不同于 n，nvm 不是一个 npm package，而是一个独立软件包。这意味着我们需要单独使用它的安装逻辑：</p><p>或者使用 Homebrew 来安装。安装完后，还需要修改一下 shell 配置（~/.zshrc or whatever）<!-- ，具体参见官方文档。 --></p><p>然后我们可以使用 nvm 来安装不同版本的 node。</p><p>在安装的时候，nvm 将不同的 node 版本存储到<code>~/.nvm/&lt;version&gt;/</code> 下，然后修改 $PATH，将指定版本的 node 路径加入，这样我们调用的 node 命令即是使用指定版本的 node。</p><p>nvm 显然比 n 要复杂一些，但是另一方面，由于它是一个独立软件包，因此它和 node 之间的关系看上去更合乎逻辑：nvm 不依赖 node 环境，是 node 依赖 nvm；而不像 n 那样产生类似循环依赖的问题。</p><h3 id="n"><a href="#n" class="headerlink" title="n"></a>n</h3><p>n 是一个需要全局安装的 npm package。<br>这意味着，我们在使用 n 管理 node 版本前，首先需要一个 node 环境。我们或者用 Homebrew 来安装一个 node，或者从官网下载 pkg 来安装，总之我们得先自己装一个 node —— n 本身是没法给你装的。</p><p>然后我们可以使用 n 来安装不同版本的 node。</p><p>在安装的时候，n 会先将指定版本的 node 存储下来，然后将其复制到我们熟知的路径 /usr/local/bin，非常简单明了。当然由于 n 会操作到非用户目录，所以需要加 sudo 来执行命令。</p><p>所以这样看来，n 在其实现上是一个非常易理解的方案。</p><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><ul><li>安装简易度。nvm 安装起来显然是要麻烦不少；n 这种安装方式更符合 node 的惯性思维。见仁见智吧。</li><li>系统支持。注意， nvm 不支持 Windows。</li><li>对全局模块的管理。n 对全局模块毫无作为，因此有可能在切换了 node 版本后发生全局模块执行出错的问题；nvm 的全局模块存在于各自版本的沙箱中，切换版本后需要重新安装，不同版本间也不存在任何冲突。</li><li>关于 node 路径。n 是万年不变的 /usr/local/bin；nvm 需要手动指定路径。</li></ul><p>所以，如何选择？真心见仁见智了，不过这里可以给出大体的建议：<br>1) 如果你使用 Windows，那没得选了，使用 n，或者换一台 Mac。<br>1) 如果你会频繁切换 node 版本（比如本地经常测试最新版的特性，同时又要兼顾代码在生产环境的兼容性），那么从全局模块兼容性的角度考虑，只能使用 nvm。<br>1) 如果你是一个轻量级的用户，不需要担心兼容性的问题，更关心 node 安装和使用上的体验，那么选择 n。<br>你如果要问，楼主最终选用了谁？我会说，我选择了更流行的那一个。</p><h2 id="nvm-注意"><a href="#nvm-注意" class="headerlink" title="nvm 注意"></a>nvm 注意</h2><!-- \#2 [【Node.js】使用 nvm 管理不同版本的 node 与 npm](https://cloud.tencent.com/developer/article/1572765) --><p>### 0<br>nvm 应运而生，nvm 是 Mac 下的 node 管理工具<!-- ，有点类似管理 Ruby 的 rvm， --><br>如果需要管理 Windows 下的 node，官方推荐使用 nvmw 或 nvm-windows。<br>不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。</p><p>### 1<br><!-- ## nvm 与 n 的区别node 版本管理工具还有一个是 TJ大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。 --></p><p>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p><p>### 2<br>卸载全局安装的 node/npm<br>OS X/Linux 安装: 与 Windows 不同，我们并不一定要先卸载原有的 NodeJS。当然我们推荐还是先卸载掉比较好。</p><p>### 3<br>在项目中使用不同版本的 Node<br>我们可以通过创建项目目录中的 .nvmrc 文件来指定要使用的 Node 版本。之后在项目目录中执行 nvm use 即可。.nvmrc 文件内容只需要遵守上文提到的语义化版本规则即可。另外还有个工具叫做 avn，可以自动化这个过程。</p><p>### 4<br>在多环境中，npm该如何使用呢？<br><!-- 每个版本的 Node 都会自带一个不同版本的 npm，可以用 npm -v 来查看 npm 的版本。全局安装的 npm 包并不会在不同的 Node 环境中共享，因为这会引起兼容问题。它们被放在了不同版本的目录下，例如` ~/.nvm/versions/node/<version>/lib/node_modules</version>` 这样的目录。这刚好也省去我们在 Linux 中使用 sudo 的功夫了。因为这是用户的主文件夹，并不会引起权限问题。 --><br> 但问题来了，我们安装过的 npm 包，都要重新再装一次？幸运的是，我们有个办法来解决我们的问题，运行下面这个命令，可以从特定版本导入到我们将要安装的新版本 Node：<br><code>nvm install v5.0.0 --reinstall-packages-from=4.2</code></p><p>### 5 其他命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接运行特定版本的 Node</span></span><br><span class="line">nvm run 4.2.2 --version</span><br><span class="line"><span class="comment"># 在当前终端的子进程中运行特定版本的 Node</span></span><br><span class="line">nvm <span class="built_in">exec</span> 4.2.2 node --version</span><br><span class="line"><span class="comment"># 确认某个版本Node的路径</span></span><br><span class="line">nvm <span class="built_in">which</span> 4.2.2</span><br><span class="line"><span class="comment"># 安装 Node 的其他实现，例如 iojs（一个基于 ES6 的 Node 实现，现在已经和 Node 合并）</span></span><br><span class="line">nvm install iojs-v3.2.0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- 在  --&gt;node 的版本管理工具&lt;!-- 中，nvm 自然声名远扬，然而我们也不能忘了来自 TJ 的 n --&gt;。&lt;br&gt;&lt;!-- 这两种，是目前最主流的方案。 --&gt;
&lt;p&gt;creationix/nvm: &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nvm-sh/nvm&lt;/a&gt;&lt;br&gt;TJ: &lt;a href=&quot;https://github.com/tj/n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tj/n&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="server" scheme="http://yoursite.com/categories/sum/server/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>请求如何代理端口号</title>
    <link href="http://yoursite.com/sum/others/%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E4%BB%A3%E7%90%86%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <id>http://yoursite.com/sum/others/请求如何代理端口号/</id>
    <published>2021-11-19T00:00:00.000Z</published>
    <updated>2022-05-03T05:25:34.614Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.11.19 星期五 00:00 </p><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><!-- [使用 花瓶(Charles) 远端映射(代理)本地端口 , 将指定域名映射至本机localhost ;](https://segmentfault.com/q/1010000017091450/a-1020000017091482) --><p>更改 hosts 不方便, 因为已经有地址占用了。<br>$_PS: 因为一些跨域原因。或者区分不同接口<br>$_PS: 端口号不一致，或者路径不一样。</p><h3 id="nginx代理"><a href="#nginx代理" class="headerlink" title="nginx代理"></a>nginx代理</h3><!-- [如何使用域名代替本地IP+端口访问服务](https://blog.csdn.net/qq_33172274/article/details/118407217)[windows本地配置域名和nginx代理](https://www.cnblogs.com/chenxi-mxj/p/12157035.html) --><ol><li>配置本机的DNS</li><li>可以nginx去代理端口号<!-- 反代 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name mq.com;</span><br><span class="line">    proxy_ignore_client_abort on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">        proxy_read_timeout 3200;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><!-- <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream jay.localhost.com&#123;</span><br><span class="line">       server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name jay.localhost.com;</span><br><span class="line">     location / &#123;</span><br><span class="line">        proxy_pass http://jay.localhost.com;</span><br><span class="line">        proxy_set_header X-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;<br>\$_PS: 猜测也是whistle的原理。</p><h3 id="chrome的Proxy-插件"><a href="#chrome的Proxy-插件" class="headerlink" title="chrome的Proxy 插件"></a>chrome的Proxy 插件</h3><!-- [开发中如何让本地host和代理共存？](https://www.cnblogs.com/soulsands/p/13200861.html) --><p>后来翻翻chrome的Proxy SwitchyOmega插件，迎来转机，发现可以创建一个支持pac脚本的模式。填入之前的pac内容后，浏览器就可以忽略系统的pac设置。</p><p>这时候，几乎完美了。</p><p>但后来打算总结便打算继续看看host为啥不生效，看到有人说并非不生效，而时代理优先级高，发出的请求如果已经被代理规则处理，则通常会转发到明确的服务器，不需要host去解析域名，则使得host看起来未生效。在这个启发下，才找到了pac中直连+设置host的方法。</p><p>这个方法优点在于不限定端口，如果有多个开发服务也可以同时满足，并且devServer可以自动寻找端口。总体而言灵活一些 。</p><!-- $_PS: 不知道什么意思。 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.11.19 星期五 00:00 &lt;/p&gt;

&lt;h3 id=&quot;Charles&quot;&gt;&lt;a href=&quot;#Charles&quot; class=&quot;headerlink&quot; title=&quot;Char
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Taro使用记录</title>
    <link href="http://yoursite.com/sum/miniapp/taro%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/miniapp/taro使用记录/</id>
    <published>2021-11-03T00:00:00.000Z</published>
    <updated>2022-05-04T07:01:34.260Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p style="text-align:right"> 2021.11.3 星期三 17:00 </p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>每次进入小程序首页的时候有时候会先执行onlaunch方法，有时又会先执行首页的onload的方法，最后经过确定，在微信小程序中这两个方法并没有执行先后的顺序，因为他们都是异步执行的。</p><p>问题： 本来按照事件顺序，小程序初始化时触发App里的onLaunch，后面再执行页面Page里的onLoad，但是在onLaunch里请求获取是否有权限，等待返回值的时候Page里的onLoad事件就已经执行了。</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><!-- [taro 全局变量四种方法](https://www.jianshu.com/p/0d39404a1dea) [Taro -- 定义全局变量](https://www.cnblogs.com/juewuzhe/p/11097146.html)[taro中定义以及使用全局变量](https://cloud.tencent.com/developer/article/1444359)上面两个内容相同。第一个有配置的变量。--><p>方法1：在taro中 getApp()只能取到一开始定义的值，并不能取到改变后的值<br>要在构造函数中创建，或者在函数外定义，如果在componentDidMount()函数中定义无效。<br>PS: 如果是混合到原生小程序中，同样取不到Taro小程序里定义的变量。</p><p>方法2：新增一个自行命名的 JS 文件，例如 global.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalData = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setGlobalData</span> (<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">  globalData[key] = val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getGlobalData</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> globalData[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法3：使用 Redux 来进行全局变量的管理</p><p>方法4：使用配置。<br>使用config下的env<br>使用config下的defineConstants</p><h3 id="dom-相关"><a href="#dom-相关" class="headerlink" title="dom 相关"></a>dom 相关</h3><p><code>const observer = Taro.createIntersectionObserver(this, { thresholds: [0], observeAll: true })</code></p><blockquote><p>创建并返回一个 IntersectionObserver 对象实例。<br>监听文档/dom的变化以他用<!-- 比如：添加埋点 --></p></blockquote><p>#### </p><ol><li>获取输入标签的值<code>Input</code> <code>Textarea</code> 通过<code>event.detail.value</code>。<!--  通过event.target.value 取不到值，设置值的时候也不准确。 event.target 是容器标签里面的target，并没有最新的值。 [h5 的textarea组件,oninput的e.detail.value获取不到值 ](https://github.com/NervJS/taro/issues/1713) -->为防止按钮提交的时候，onblur 还没有设置好值。提前函数可以添加延时setTimeout。</li></ol><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><a href="https://nervjs.github.io/taro/docs/children#children" target="_blank" rel="noopener">Children 与组合</a><br><code>this.props.children</code>, <code>this.props.renderHeader</code></p><!-- <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View className=<span class="string">'dialog'</span>&gt;</span><br><span class="line">        &lt;View className=<span class="string">'header'</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.renderHeader&#125;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;View className='body'&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">        &lt;View className=<span class="string">'footer'</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.renderFooter&#125;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View className=<span class="string">'container'</span>&gt;</span><br><span class="line">        &lt;Dialog</span><br><span class="line">          renderHeader=&#123;</span><br><span class="line">            &lt;View className=<span class="string">'welcome-message'</span>&gt;Welcome!&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          renderFooter=&#123;</span></span><br><span class="line"><span class="regexp">            &lt;Button className='close'&gt;Close&lt;/</span>Button&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;View className=<span class="string">"dialog-message"</span>&gt;</span><br><span class="line">            Thank you <span class="keyword">for</span> using Taro.</span><br><span class="line">          &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Dialog&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>请不要对 this.props.children 进行任何操作。Taro 在小程序中实现这个功能使用的是小程序的 slot 功能，也就是说你可以把 this.props.children 理解为 slot 的语法糖，this.props.children 在 Taro 中并不是 React 的 ReactElement 对象，因此形如 this.props.children &amp;&amp; this.props.children、this.props.children[0] 在 Taro 中都是非法的。</p><p>this.props.children 无法用 defaultProps 设置默认内容。由于小程序的限制，Taro 也无法知道组件的消费者是否传入内容，所以无法应用默认内容。</p><p>不能把 this.props.children 分解为变量再使用。由于普通的 props 有一个确切的值，所以当你把它们分解为变量运行时可以处理，this.props.children 则不能这样操作，你必须显性地把 this.props.children 全部都写完整才能实现它的功能。</p><p> –&gt;</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="修改路径-url"><a href="#修改路径-url" class="headerlink" title="修改路径-url"></a>修改路径-url</h4><p>在现有路径上面添加参数。<br>（h5）使用<code>new URI</code>可以获取路径，但是修改hash的时候报错了：不可以修改。<br>正确方式：需要获取路径（小程序），然后调用路由跳转方式。<br><code>getCurrentInstance().router</code>和<code>getCurrentPages</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = Taro.getCurrentInstance().router || &#123; <span class="attr">params</span>: &#123;&#125;, <span class="attr">path</span>: <span class="string">''</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> go2CouponList = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// location.hash = 'jdyushouquan';</span></span><br><span class="line">    <span class="comment">// history.pushState('couponList', '', null)</span></span><br><span class="line">    <span class="keyword">let</span> path = router.path;</span><br><span class="line">    <span class="keyword">const</span> url = path.replace(<span class="regexp">/#.*/g</span>, <span class="string">''</span>) + <span class="string">'#jdyushouquan'</span></span><br><span class="line">    <span class="comment">// console.log('url', url)</span></span><br><span class="line">    gotoUrl(&#123;url&#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></p><p>在旧版本中可以通过 this.$router 访问当前组件/页面路由的详情。在 Taro Next 对应的 API 是在 @tarojs/taro 中的 getCurrentInstance().router，两者的属性一模一样。</p><p>### </p><p> // useEffect(() =&gt; {<br>    //     history.pushState(‘couponList’, ‘’, null)<br>    //     return () =&gt; {<br>    //         if(!history.state.couponList) {<br>    //             Taro.removeStorageSync(‘bl_confirm_cids’);<br>    //         }<br>    //     }<br>    // }, []);</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>v3.4.1 版本默认使用webpack 4.x。 后续版本可以指定webpack 版本。</p><h3 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h3><ol><li>静态资源hash，解决cdn缓存问题。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    path.join(process.cwd(), <span class="string">"/plugins/events/index.ts"</span>),</span><br><span class="line">    path.join(process.cwd(), <span class="string">"/plugins/move/index.js"</span>),</span><br><span class="line">    <span class="string">"@tarojs/plugin-indie"</span></span><br><span class="line">  ],</span><br><span class="line">  h5: &#123;</span><br><span class="line">    <span class="comment">// NOTE H5 打包静态资源时带 hash 值，方便缓存、版本管理</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    staticDirectory: <span class="string">'static'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">'js/[name].[hash].js'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    imageUrlLoaderOption: &#123;</span><br><span class="line">      limit: <span class="number">5000</span>,</span><br><span class="line">      name: <span class="string">'static/images/[name].[hash].[ext]'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    miniCssExtractPluginOption: &#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'css/[name].[chunkhash].css'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><h4 id="devbd-wx"><a href="#devbd-wx" class="headerlink" title="devbd:wx"></a>devbd:wx</h4><p>执行小程序的dev，<code>process.env.NOTE_ENV = &#39;development&#39;</code>。</p><h4 id="build-h5"><a href="#build-h5" class="headerlink" title="build:h5"></a>build:h5</h4><p>build:h5 的时候，生成html 应该是使用的html-webpack-plugin。<br>如果要生成多个html页面，添加多个插件实例，需要手动引入依赖<code>npm i --save-dev html-webpack-plugin@4</code></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li>读取根路径的上一级（混合项目需要）, <code>const rootPath = path.resolve(__dirname, &quot;../../..&quot;);</code><!-- 不通：`const mProjectPath = path.resolve("../", appPath);`  --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copyHtmlFiles = <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('copy html files', ctx);</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">paths</span>: &#123; outputPath &#125;, initialConfig &#125; = ctx;</span><br><span class="line">        <span class="comment">// console.log('copy html files', ctx);</span></span><br><span class="line">        <span class="comment">// m_static 中html文件夹路径</span></span><br><span class="line">        <span class="comment">// const destPath = path.resolve(__dirname, "../../../../m_static/html");</span></span><br><span class="line">        <span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">"../../.."</span>);</span><br><span class="line">        <span class="comment">// const mProjectPath = path.resolve("../", appPath);</span></span><br><span class="line">        <span class="keyword">const</span> destPath = path.join(mProjectPath, <span class="string">"m_static/html"</span>);</span><br><span class="line">        <span class="keyword">const</span> customRoutes = initialConfig?.h5?.router?.customRoutes;</span><br><span class="line">        <span class="comment">// console.log('bjdi', mProjectPath, destPath, customRoutes)</span></span><br><span class="line">        <span class="built_in">Object</span>.values(customRoutes).map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// html文件路径</span></span><br><span class="line">            <span class="keyword">const</span> filePath = path.join(destPath, route);</span><br><span class="line">            <span class="keyword">if</span> (fs.existsSync(filePath)) fs.removeSync(filePath);</span><br><span class="line">            fs.copyFileSync(outputPath + <span class="string">"/index.html"</span>, filePath);</span><br><span class="line">            <span class="comment">// # 写入特定html片</span></span><br><span class="line">            <span class="keyword">const</span> pos = <span class="string">`        &lt;div id="app"&gt;&lt;/div&gt;`</span>;</span><br><span class="line">            <span class="keyword">const</span> inc0 = <span class="string">`        &lt;!--#include virtual="/sinclude/common/spdtimming_foot.shtml"--&gt;`</span></span><br><span class="line">            <span class="keyword">const</span> inc1 = <span class="string">`        &lt;!--#include virtual="/sinclude/common/cart_link_guide.shtml" --&gt; &lt;!-- 结算链接灰度控制ppms --&gt;`</span></span><br><span class="line">            <span class="keyword">const</span> inc2 = <span class="string">`        &lt;!--#include virtual="/sinclude/update/wx/2016/5/cartlock.html"--&gt;  &lt;!-- 购物车lock 灰度ppms--&gt;`</span></span><br><span class="line">            <span class="keyword">if</span> ([<span class="string">"/order/orderlist_jdm.shtml"</span>].includes(route)) &#123;</span><br><span class="line">                <span class="keyword">const</span> data = fs.readFileSync(filePath, <span class="string">"utf8"</span>);</span><br><span class="line">                <span class="keyword">const</span> html = data.replace(pos, [inc1, pos, inc0].join(<span class="string">"\r\n"</span>));</span><br><span class="line">                fs.writeFileSync(filePath, html);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"拷贝html结束！"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"拷贝html失败！"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ISSUES"><a href="#ISSUES" class="headerlink" title="ISSUES"></a>ISSUES</h1><h2 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="watch-文件修改没有更新"><a href="#watch-文件修改没有更新" class="headerlink" title="watch 文件修改没有更新"></a>watch 文件修改没有更新</h4><p><code>npm run build dev:h5</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev:h5": "cross-env NODE_ENV=development CLIENT_ENV=h5 taro build --type h5 --watch",</span><br></pre></td></tr></table></figure></p><p>app.config.js 中pages配置和文件夹名 大小写不一致。</p><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>在windows中转化后的路径 taro-cli 不能正确编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编译失败...</span><br><span class="line">./src/app.tsx</span><br><span class="line">untime&apos; in &apos;E:\order\src\&apos;resolve &apos;E:orderpluginsevents</span><br></pre></td></tr></table></figure></p><p>windows 的路径是<code>\\</code>，build的时候找不到；而且把\r也转义了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectRuntimePath</span>(<span class="params">platform</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const injectedPath = path.join(__dirname, "./runtime"); // windows 有问题</span></span><br><span class="line">  <span class="keyword">const</span> injectedPath = path.normalize(path.join(__dirname, <span class="string">"./runtime"</span>));</span><br><span class="line">  <span class="keyword">if</span> (isArray(platform.runtimePath)) &#123;</span><br><span class="line">    platform.runtimePath.push(injectedPath);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isString(platform.runtimePath)) &#123;</span><br><span class="line">    platform.runtimePath = [platform.runtimePath, injectedPath];</span><br><span class="line">    <span class="comment">// windows 有问题，手动修改路径</span></span><br><span class="line">    <span class="comment">// platform.runtimePath = [platform.runtimePath, 'E:/order/plugins/events/runtime'];</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><h3 id="版本不一致"><a href="#版本不一致" class="headerlink" title="版本不一致"></a>版本不一致</h3><p>大概率所有问题都可以通过版本一致去解决。<br>包括：路由问题，。。。等<br>涉及到依赖：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@tarojs/components"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line"><span class="attr">"@tarojs/react"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line"><span class="attr">"@tarojs/runtime"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line"><span class="attr">"@tarojs/taro"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line">    <span class="attr">"@tarojs/cli"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line"><span class="attr">"@tarojs/mini-runner"</span>: <span class="string">"3.3.12"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="gyp-ERR-find-VS-gyp-ERR-find-VS-msvs-version"><a href="#gyp-ERR-find-VS-gyp-ERR-find-VS-msvs-version" class="headerlink" title="gyp ERR! find VS gyp ERR! find VS msvs_version"></a>gyp ERR! find VS gyp ERR! find VS msvs_version</h3><h4 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h4><p><code>gyp ERR! find VS gyp ERR! find VS msvs_version not set from command line or npm config gyp ERR! find</code><br><code>error gyp ERR! stack Error: Could not find any Visual Studio installation to use</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">npm config <span class="built_in">set</span> python python3.9</span><br><span class="line">npm config <span class="built_in">set</span> msvs_version 2019</span><br><span class="line"><span class="comment"># npm config set registry https://registry.npm.taobao.org</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.org</span><br></pre></td></tr></table></figure><p>解决问题步骤：<br><!-- 0）windows-build-tools 执行了。（不确定会有影响） --><br>0) 手动安装了python3.8. (版本保持是一致的)<br>1） 设置了msvs_version 的版本 2019<br><!-- 1） 开始设置成VS Code 版本2021 是错误的。 --><br><!-- 2）虽然把全局改回了2019,但是当前项目还是错误的2021. 再次修改本地的配置  --><br>2) 手动安装了visual studio 的相关应用(web, Linux, node, .net, C++ 等).<br><!-- 仍然不可以,不确定是否有影响 --><br>3) 最后设置了npm registry 为原始地址.<!-- 之前修改全局为公司内部地址 --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.11.3 星期三 17:00 &lt;/p&gt;


&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="miniapp" scheme="http://yoursite.com/categories/sum/miniapp/"/>
    
    
      <category term="taro.js" scheme="http://yoursite.com/tags/taro-js/"/>
    
  </entry>
  
</feed>
