<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-04T09:13:55.412Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博文状态</title>
    <link href="http://yoursite.com/prepared/"/>
    <id>http://yoursite.com/prepared/</id>
    <published>2020-02-04T09:13:55.412Z</published>
    <updated>2020-02-04T09:13:55.412Z</updated>
    
    <content type="html"><![CDATA[<p>博文状态: 计划和正在更新的博文         </p><h2 id="一-计划中"><a href="#一-计划中" class="headerlink" title="一 计划中"></a>一 计划中</h2><h3 id="onGoing"><a href="#onGoing" class="headerlink" title="onGoing"></a>onGoing</h3><ol><li><ul><li style="list-style: none"><input type="checkbox"> </li></ul></li></ol><h3 id="preparing"><a href="#preparing" class="headerlink" title="preparing"></a>preparing</h3><ol start="4"><li><ul><li style="list-style: none"><input type="checkbox"> </li></ul></li></ol><h3 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h3><ol><li><ul><li style="list-style: none"><input type="checkbox"> </li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> aboutme  </li></ul></li></ol><a id="more"></a><!-- ### needTime(relex) --><h3 id="relex"><a href="#relex" class="headerlink" title="relex"></a>relex</h3><ol><li></li><li>webRTC 研究  </li></ol><h3 id="considering"><a href="#considering" class="headerlink" title="considering"></a>considering</h3><ol><li>ssr/vpn  </li></ol><h2 id="二-需完善-新定义"><a href="#二-需完善-新定义" class="headerlink" title="二 需完善/新定义"></a>二 需完善/新定义</h2><h3 id="fixing"><a href="#fixing" class="headerlink" title="fixing"></a>fixing</h3><ol><li><ul><li style="list-style: none"><input type="checkbox"> </li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> burnedBrain </li></ul></li></ol><h3 id="updating"><a href="#updating" class="headerlink" title="updating"></a>updating</h3><ol><li><ul><li style="list-style: none"><input type="checkbox"> </li></ul></li></ol><h3 id="watching"><a href="#watching" class="headerlink" title="watching"></a>watching</h3><ol><li><ul><li style="list-style: none"><input type="checkbox"> 基于Hexo+NexT的博客搭建指导：性能、自动化、备份     </li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> angular.js 坑</li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> vjs on work  </li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> css使用记录：     </li></ul></li></ol><h2 id="三-下划线-不计划（目前为止）"><a href="#三-下划线-不计划（目前为止）" class="headerlink" title="三 下划线/不计划（目前为止）"></a>三 下划线/不计划（目前为止）</h2><h3 id="abandon"><a href="#abandon" class="headerlink" title="abandon"></a>abandon</h3><ol><li>mongo with php/mongo   </li></ol><h3 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h3><p><del>_webpack_5-loaders</del><br><del>_webpack_6-plugins</del> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博文状态: 计划和正在更新的博文         &lt;/p&gt;
&lt;h2 id=&quot;一-计划中&quot;&gt;&lt;a href=&quot;#一-计划中&quot; class=&quot;headerlink&quot; title=&quot;一 计划中&quot;&gt;&lt;/a&gt;一 计划中&lt;/h2&gt;&lt;h3 id=&quot;onGoing&quot;&gt;&lt;a href=&quot;#onGoing&quot; class=&quot;headerlink&quot; title=&quot;onGoing&quot;&gt;&lt;/a&gt;onGoing&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;preparing&quot;&gt;&lt;a href=&quot;#preparing&quot; class=&quot;headerlink&quot; title=&quot;preparing&quot;&gt;&lt;/a&gt;preparing&lt;/h3&gt;&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;schedule&quot;&gt;&lt;a href=&quot;#schedule&quot; class=&quot;headerlink&quot; title=&quot;schedule&quot;&gt;&lt;/a&gt;schedule&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; aboutme  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Js使用记录-兼容性</title>
    <link href="http://yoursite.com/sum/js/js%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95-%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    <id>http://yoursite.com/sum/js/js使用记录-兼容性/</id>
    <published>2020-01-13T00:00:00.000Z</published>
    <updated>2020-02-17T02:47:26.098Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2020.1.13 星期一 13:34 </p><h2 id="IOS-Safari"><a href="#IOS-Safari" class="headerlink" title="IOS/Safari"></a>IOS/Safari</h2><ol><li>IOS 10  不支持 async/await; 但是支持Promise   </li><li>IOS 浏览器，<code>window.location.href=&#39;javascript:if(typeof openQuitAppClick === \&#39;function\&#39;){openQuitAppClick();}window.location.href=\&#39;&#39;.product_url(&#39;%d.html&#39;).&#39;\&#39;;;console&#39;</code><br> 上面的地址不会跳转，需要在后边加上一个<code>;console</code>。 可能和安全策略有关系</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2020.1.13 星期一 13:34 &lt;/p&gt;


&lt;h2 id=&quot;IOS-Safari&quot;&gt;&lt;a href=&quot;#IOS-Safari&quot; class=&quot;headerlink&quot; title=&quot;IOS/Safari&quot;&gt;&lt;/a&gt;I
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>页面可视化编辑器设计</title>
    <link href="http://yoursite.com/sum/jsplus/%E9%A1%B5%E9%9D%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/sum/jsplus/页面可视化编辑器设计/</id>
    <published>2020-01-01T00:00:00.000Z</published>
    <updated>2020-03-26T08:39:45.387Z</updated>
    
    <content type="html"><![CDATA[<p>参考（已经yinxiang）：<br><a href="https://juejin.im/post/5dc81428e51d4523632ee793" target="_blank" rel="noopener">Vue + Koa从零打造一个H5页面可视化编辑器——Quark-h5</a><br><a href="https://zhuanlan.zhihu.com/p/67096132" target="_blank" rel="noopener">页面可视化搭建工具技术要点</a><br><a href="https://blog.csdn.net/philip502/article/details/77838856" target="_blank" rel="noopener">页面可视化编辑器设计</a>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考（已经yinxiang）：&lt;br&gt;&lt;a href=&quot;https://juejin.im/post/5dc81428e51d4523632ee793&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue + Koa从零打造一个H5页面可视化编辑器——Qu
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="http://yoursite.com/sum/ser/nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/sum/ser/nginx配置/</id>
    <published>2019-12-16T00:00:00.000Z</published>
    <updated>2020-02-17T02:47:26.100Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.12.16 星期一  2108 </p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><ol start="0"><li>nginx 配置和 cgi, fast cgi. 和php-fpm   </li><li>cd /usr/local/nginx/config/site-enable<br> nginx.conf  里面有<code>include sites-enabled/*</code></li><li>可以配置访问日志，并定义格式；有变量可以使用。access_log，error log；log_format name。<br> 然后可以根据日志，做一些其他操作。比如，pv，访问/接口，报错，统计等。    </li><li><p>nginx （php项目）访问502，可能是 root 文件夹权限不够。<br> chmode 777 /var/www/html  </p></li><li><p>在重启云主机（系统）之后，执行 nginx -t 是OK的，然而在执行 nginx -s reload 的时候报错<br>nginx: [error] invalid PID number “” in “/run/nginx.pid”</p></li></ol><p>经过查找，找到<a href="http://www.cnblogs.com/yuqianwen/p/4285686.html" target="_blank" rel="noopener">http://www.cnblogs.com/yuqianwen/p/4285686.html</a><br>需要先执行<br>nginx -c /etc/nginx/nginx.conf</p><p>nginx.conf文件的路径可以从nginx -t的返回中找到。</p><p>nginx -s reload</p><ol start="5"><li><p>Nginx负载均衡的几种模式：轮询，权重轮询，IP_Hash（可以解决Session失效重新登录问题；配合upstream），Fair，Url_hash    </p></li><li><p>(ajax:post) 访问405： 因为用rewrite 重写了 host/mtouch/project.html  到/var/www/hosts<br> get请求是没问题的。用ajax 提交post请求报405.<br> 网上有说把，post 转为get 的。但是未采用，担心参数等问题。<br> 最后用proxy 代理，还需要设置头部。</p><ul><li>proxy_set_header  Host  $host;  作用web服务器上有多个站点时，用该参数header来区分反向代理哪个域名。比如下边的代码举例。</li><li>proxy_set_header X-Forwarded-For  $remote_addr; 作用是后端服务器上的程序获取访客真实IP，从该header头获取。部分程序需要该功能。</li></ul></li><li>X-Forwarded-For： 记录访问ip 来源/路径   </li><li><p>rewrite 和proxy 的区别<br> rewrite        <regex>        <replacement>        <flag>;<br> IF判断和内置全局环境变量</flag></replacement></regex></p></li><li><p>在nginx中配置proxy_pass代理转发时<br>如果在proxy_pass后面的url加/，表示绝对根路径；如果没有/，表示相对路径，把匹配的路径部分也给代理走。</p></li></ol><p>假设下面四种情况分别用 <a href="http://192.168.1.1/proxy/test.html" target="_blank" rel="noopener">http://192.168.1.1/proxy/test.html</a> 进行访问。<br>第一种：<br>location /proxy/ {<br>    proxy_pass <a href="http://127.0.0.1/" target="_blank" rel="noopener">http://127.0.0.1/</a>;<br>}<br>代理到URL：<a href="http://127.0.0.1/test.html" target="_blank" rel="noopener">http://127.0.0.1/test.html</a></p><p>第二种（相对于第一种，最后少一个 / ）<br>location /proxy/ {<br>    proxy_pass <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>;<br>}<br>代理到URL：<a href="http://127.0.0.1/proxy/test.html" target="_blank" rel="noopener">http://127.0.0.1/proxy/test.html</a></p><p>第三种：<br>location /proxy/ {<br>    proxy_pass <a href="http://127.0.0.1/aaa/" target="_blank" rel="noopener">http://127.0.0.1/aaa/</a>;<br>}<br>代理到URL：<a href="http://127.0.0.1/aaa/test.html" target="_blank" rel="noopener">http://127.0.0.1/aaa/test.html</a></p><p>第四种（相对于第三种，最后少一个 / ）<br>location /proxy/ {<br>    proxy_pass <a href="http://127.0.0.1/aaa" target="_blank" rel="noopener">http://127.0.0.1/aaa</a>;<br>}<br>代理到URL：<a href="http://127.0.0.1/aaatest.html" target="_blank" rel="noopener">http://127.0.0.1/aaatest.html</a></p><ol start="6"><li>alias。 阅读打卡，vue 单页应用 两个项目，使用同一域名。<br> 开始直接代码到 8088, js,css 文件的content-type错误，导致页面空白。<br> 添加/readingpunch_admin   alias  就好了。<br>readingpunch.config<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  readingpunch.dangdang.com;</span><br><span class="line"></span><br><span class="line">    root /var/www/html/readingPunch;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location /readingpunch_admin&#123;  ## succ:  http://readingpunch.dangdang.com/readingpunch_admin </span><br><span class="line">        alias  /var/www/html/readingPunch_admin/readingpunch_admin/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /activityData&#123; ## succ: http://readingpunch.dangdang.com/activityData</span><br><span class="line">        proxy_pass http://localhost:8088/activityData;  ## 不加/readingpunch_admin  alias   js,css 文件路径出错404，而且content-type不对</span><br><span class="line">    &#125;</span><br><span class="line">location /experienceData&#123; ## succ: http://readingpunch.dangdang.com/experienceData</span><br><span class="line">        proxy_pass http://localhost:8088;   ## 不加/readingpunch_admin  alias   js,css 文件路径出错404，而且content-type不对</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    location /activityStatic&#123; ## 路径问题：http://readingpunch.dangdang.com/activityStatic?a=2342  =》http://readingpunch.dangdang.com/activityStatic/?a=2342</span><br><span class="line">        alias  /var/www/html/readingPunch_admin/readingpunch_admin/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /participantStatic&#123;  ## ## 路径问题：和上面一样</span><br><span class="line">        alias  /var/www/html/readingPunch_admin/readingpunch_admin;</span><br><span class="line">    &#125;</span><br><span class="line">    ## 正则有问题</span><br><span class="line">    location ^/(activityData|activityStatic|experienceData|participantStatic)&#123;</span><br><span class="line">        # proxy_pass http://localhost:8088;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /readingpunch/?$query_string;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>reading_punch_admin.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  readingpunch.dangdang.com;</span><br><span class="line"></span><br><span class="line">    root /var/www/html/readingPunch_admin;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /readingpunch_admin/?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.php?$ &#123;</span><br><span class="line">        include     fastcgi.conf;</span><br><span class="line">        # access_log  /var/log/httpd/access_log ;</span><br><span class="line">        fastcgi_max_temp_file_size 0;</span><br><span class="line">        fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_connect_timeout 3200;</span><br><span class="line">        fastcgi_send_timeout 3200;</span><br><span class="line">        fastcgi_read_timeout 3200;</span><br><span class="line">        gzip on;</span><br><span class="line"></span><br><span class="line">        # fastcgi_param RUNTIME_ENVIRONMENT &apos;develop&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>testreadingpunch.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  testreadingpunch.dangdang.com;</span><br><span class="line"></span><br><span class="line">    root /var/www/html/readingpunch_test;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    rewrite /activityData /readingpunch_admin  break;  ## succ: </span><br><span class="line">    rewrite /activityStatic /readingpunch_admin break; ## error: 跳到readingpunch_admin，然后路由到了 activityData； 并不是当前路由</span><br><span class="line">    rewrite /participantStatic /readingpunch_admin/participantStatic break;  ## 错误： 404</span><br><span class="line"></span><br><span class="line">### Uncaught SyntaxError: Unexpected token &apos;&lt;&apos;；</span><br><span class="line">### Resource interpreted as Stylesheet but transferred with MIME type text/html: </span><br><span class="line">location /experienceData &#123; </span><br><span class="line">        rewrite /experienceData  break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /experienceData &#123;  ## 路径问题：http://readingpunch.dangdang.com/experienceData?a=2342  =》http://readingpunch.dangdang.com/experienceData/?a=2342</span><br><span class="line">        alias /var/www/html/readingpunch_test/readingpunch_admin;</span><br><span class="line">    &#125;</span><br><span class="line">location /experienceData &#123;  ## 错误： 下面两个都是404</span><br><span class="line">        # rewrite /readingpunch_admin/ break;</span><br><span class="line">rewrite /readingpunch_admin break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">######  前台页面配置  #######</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;  ## succ：</span><br><span class="line">        try_files $uri $uri/ /readingpunch/?$query_string;</span><br><span class="line">        root /var/www/html/readingpunch_test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">## error： js，css文件解析出错：（下面的配置应该写到 location  /上面，但是为了好看/区分配置  写到了下面）</span><br><span class="line">### Uncaught SyntaxError: Unexpected token &apos;&lt;&apos;；</span><br><span class="line">### Resource interpreted as Stylesheet but transferred with MIME type text/html: </span><br><span class="line">location /activityList &#123; </span><br><span class="line">        rewrite /readingpunch  break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.12.16 星期一  2108 &lt;/p&gt;

&lt;h1 id=&quot;实际操作&quot;&gt;&lt;a href=&quot;#实际操作&quot; class=&quot;headerlink&quot; title=&quot;实际操作&quot;&gt;&lt;/a&gt;实际操作&lt;/h1&gt;&lt;ol start=
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2019 英语单词</title>
    <link href="http://yoursite.com/ins/ens/characters-2020/"/>
    <id>http://yoursite.com/ins/ens/characters-2020/</id>
    <published>2019-06-27T00:00:00.000Z</published>
    <updated>2020-02-17T02:47:26.098Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h2 id="202001"><a href="#202001" class="headerlink" title="202001"></a>202001</h2><p>阅读打卡：<br>1) 老外常用“punch in and out”来表示“上下班打卡”。<br>Don’t forget to punch in and out. (上下班都要记得打卡。)<br>其实这和在酒店入住登记和结账时用的“check in”以及“check out”有异曲同工之理。<br>2) 同时，“punch in”还能表示“用拳击(某人鼻、眼、脸或腹等部位)”。<br>3) 此外，我们还可以用“clock in”和“clock out”来表示上下班的打卡。</p><h2 id="2019-6"><a href="#2019-6" class="headerlink" title="2019.6"></a>2019.6</h2><p>scintilla: 火花<br>    a tiny trace or spark of a specified quality or feeling.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h2 id=&quot;202001&quot;&gt;&lt;a href=&quot;#202001&quot; class=&quot;headerlink&quot; title=&quot;202001&quot;&gt;&lt;/a&gt;202001&lt;/h2&gt;&lt;p&gt;阅读打卡：&lt;br&gt;1) 老外常用“punch in and out”来
      
    
    </summary>
    
      <category term="ins" scheme="http://yoursite.com/categories/ins/"/>
    
      <category term="ens" scheme="http://yoursite.com/categories/ins/ens/"/>
    
    
      <category term="ens" scheme="http://yoursite.com/tags/ens/"/>
    
  </entry>
  
  <entry>
    <title>流程图软件选择</title>
    <link href="http://yoursite.com/sum/others/%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/sum/others/流程图软件/</id>
    <published>2019-05-26T00:00:00.000Z</published>
    <updated>2020-02-05T08:10:50.173Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.5.26 星期日 23：11</p><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><p># <a href="https://ld.sogou.com/article?aid=2137797" target="_blank" rel="noopener">几款免费流程图制作软件</a><br>一、免费流程图软件<br>以下免费软件可以用来绘制流程图。<br>介绍顺序是按照体积从小到大：EVE、Diagram Designer、Dia、EDraw Mind Map、OOo Draw。<br>EVE v3.56｜73kb｜超小的神奇矢量绘图程序        </p><p>直接引用Zenzen的介绍吧：一个小巧免费的流程图绘制工具，Diagram Designer。速度飞快，无需安装。</p><p>Dia（主页）是基于GTK的图形（diagram）绘制程序，适用于Linux, Unix和Windows，以GPL 许可发布。通俗的说，一个10MB量级的免费软件，代替visio基本没问题，        </p><p>推荐！EDraw Mind Map（官网English｜中文化主页）作为国产免费软件，终结了流程图软件“好用则价高，免费则难用”的局面。<br>EDraw Mind Map体积小巧、功能丰富、作为免费软件，完全可以满足普通用户绘制流程图的需求。        </p><p>如同MS Office的Word/Powerpoint中有画图功能一样，OpenOffice.org也具有画图功能        </p><p># <a href="https://www.zhihu.com/question/19799559" target="_blank" rel="noopener">哪个免费的流程图制作软件最好用？</a><br>个人最常用axure，画面元素多对效果呈现要求高的人推荐使用    </p><p>微软的Visio制作工艺流程很方便啊，<br>从前使用Visio，但是Visio画出来的图真心很丑，而且版本更新之后也没什么提升，还经常容易卡死，图就白画了</p><p>其实我觉得mindManager最好用，不过要收费</p><p>如果能翻墙 Flowchart Maker &amp; Online Diagram Software 是一个非常好的选择，全免费，同时可以把文件即时同步到谷歌云盘，超级方便。</p><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>都有模版。有的是网页在线的。<br>文档什么的不是非常重要，先找一个练练手。专业要求不是很高<br>x-mind，mind manager做思维导图，processon/迅捷 也有读书笔记的模版，支持图片和大纲。<br>axure，office word/excl/ppt/visio 也都可以制作。还有上面提到的一些小工具。    </p><p>迅捷和process on差不多都是在线网页；亿图需下载软件，看起来好像更专业。visio是micro旧有的。<br>上面三个都是中文，有付费/会员 高级使用权限。<br>导出（不同格式文件），分享/协作 等都是可以实现的。      </p><p>迅捷中发现了泳道（最近同事有用到），免费（需注册），在线，读书笔记等。先上上手<br>$PS: 同事好像用的是“泳道” 在线编辑工具。解锁更多图形也需要邀请好友     </p><h2 id="ED-Edraw"><a href="#ED-Edraw" class="headerlink" title="ED Edraw"></a>ED Edraw</h2><p><a href="https://www.edrawsoft.com/cn/" target="_blank" rel="noopener">https://www.edrawsoft.com/cn/</a><br>220种绘图类型，设计更轻松<br>创建流程图，信息图，组织结构图，科学教育插画，网络图，思维导图以及更多。 免费例子下载。        </p><p>打造强大的综合图形图表设计软件！<br>亿图图示专家是一款综合图形图表制作软件，<br>它包含丰富的实例和模版，帮助您轻松创建流程图、网络拓扑图、组织结构图、商业图表、工程图，思维导图、软件设计图和平面布局图等。<br>亿图采用更智能和人性化的绘制方式，包括丰富的图形模板库和特色实例库，大程度帮助设计者降低工作量，更快捷阐述设计思想，提升创作灵感。</p><h2 id="迅捷"><a href="#迅捷" class="headerlink" title="迅捷"></a>迅捷</h2><p>迅捷画图：<a href="https://www.liuchengtu.com/" target="_blank" rel="noopener">https://www.liuchengtu.com/</a><br>一款小白也会用的在线流程图/思维导图    </p><h2 id="ProcessON"><a href="#ProcessON" class="headerlink" title="ProcessON"></a>ProcessON</h2><p>ProcessON:<a href="https://www.processon.com/" target="_blank" rel="noopener">https://www.processon.com/</a><br>免费在线作图，实时协作<br>ProcessOn 支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等</p><p>1) ProcessOn是一个在线作图工具的聚合平台，<br>它可以在线画流程图、思维导图、UI原型图、UML、网络拓扑图、组织结构图等等，<br>您无需担心下载和更新的问题，不管Mac还是Windows，一个浏览器就可以随时随地的发挥创意，规划工作<br>2) 团队协作、头脑风暴<br>3) 海量图库，知识分享</p><p>$PS: 有详细文档<br>$PS: 免费只支持9个文件，需要邀请好友，集赞等增加     </p><h2 id="visio"><a href="#visio" class="headerlink" title="visio"></a>visio</h2><p><a href="https://support.office.com/zh-cn/visio" target="_blank" rel="noopener">https://support.office.com/zh-cn/visio</a><br>创建数据可视化工具图表：<a href="https://support.office.com/zh-cn/article/创建数据可视化工具图表-17211b46-d144-4ca2-9ea7-b0f48f0ae0a6" target="_blank" rel="noopener">https://support.office.com/zh-cn/article/创建数据可视化工具图表-17211b46-d144-4ca2-9ea7-b0f48f0ae0a6</a></p><p style="text-align:right">23：38</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.5.26 星期日 23：11&lt;/p&gt;

&lt;h1 id=&quot;调研&quot;&gt;&lt;a href=&quot;#调研&quot; class=&quot;headerlink&quot; title=&quot;调研&quot;&gt;&lt;/a&gt;调研&lt;/h1&gt;&lt;p&gt;# &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Layui使用记录</title>
    <link href="http://yoursite.com/sum/jsplus/layui%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/sum/jsplus/layui使用记录/</id>
    <published>2019-05-23T00:00:00.000Z</published>
    <updated>2020-02-17T02:47:26.099Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.5.23 星期四 14：45</p><p>layui文档：<a href="https://www.layui.com/doc/element/layout.html" target="_blank" rel="noopener">https://www.layui.com/doc/element/layout.html</a>     </p><!-- 当当号后台使用 --><p>当当号后台审核   </p><h2 id="入手评测"><a href="#入手评测" class="headerlink" title="入手评测"></a>入手评测</h2><p>1) <strong>返璞归真</strong>，自己写的模块，可以按需引入。也可以全部引入。<br>2) UI样式不必修改，因为是给后台使用的。原有ui基本可以使用。<br>3) 动态（按需）引入，需要在<code>layui.use()</code>的回调中写js；有些模块涉及到样式，虽然模块在js中没有使用，但是需要声明模块引入，比如表单，上下拉等。<br>4) layui的模块无法全局引用，需要通过window传递；导致debug困难，所有js都在layui的回调中，控制台取不到debug对象。<br>5) 同理，layui外部的代码和layui里面的代码 通信（互相调用）费事。比如，样式在初始化渲染后，会把原先的dom隐藏掉，建立新的，如果通过js动态修改数据需要修改layui渲染的新dom，有时还需要进行re-redener或者reload.    </p><h3 id="网友讨论"><a href="#网友讨论" class="headerlink" title="网友讨论"></a>网友讨论</h3><p>包括作者（贤心），从某逼乎<br>layui另辟蹊径，专门给后端人员提供了一套简单好用的前端框架/ui/模板；<br>后端人员取到数据，直接可以渲染，一个表格或者表单提交数据。   </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于完全没有基础的后端人员，又没有特殊的需求，样式方便也没有太多修改。layui来说可以说很合适。<br>听说另一个extjs，界面样式老套（没有接触过，看样子，确实和现在的风格不符）   </p><p>如果有前端，有特殊需求的话，还是交给前端去判断吧。前端专用框架bootstarp，jquery ui，vue,element-ui等，可以方便引入第三方插件，前端写起来也比较顺手，调试修改都比较快。<br>如果时间比较紧，又没有特殊需求，layui是完全可以接受的。毕竟’开箱即用‘。可以节省大量时间      </p><h2 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h2><ol start="0"><li>该组件比较常用，可以单独使用js，全局可以直接使用     </li><li>不同类型弹窗，都有api直接方便操作，比如:<code>layer.msg();layer.alert();layer.load(icon, options)</code></li><li>层级影响，如果不放到body外面位置会比较怪。可以取消遮罩层    <blockquote><p>这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响</p></blockquote></li><li>content可以是 $(‘#id’), 该html中的内容页可以通过layui渲染。弹窗显示内容未layui渲染之后的<br>~~ date弹窗组件闪现问题也没那么明显~~   </li><li>layer loading是全页面遮罩的，不能设置某个div元素。<br>需要借助插件 loading     </li></ol><p style="text-align:right">15:58</p><br><p style="text-align:right">2019.8.10 星期六 14：41 </p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><ol><li>如果date是在一个layer中，需要设置触发条件为trigger:click。 否则 date组件不稳定  </li></ol><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><ol><li>获取表单组件值的方式，在新版本才生效<blockquote><p>其中「取值」功能为 layui 2.5.5 开始新增</p></blockquote></li></ol><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ol><li>初始化，会把原先的表格隐藏掉。新建一个，导致js中动态添加进body的内容并不会显示在渲染后的表格中   </li><li>默认排序方式，是根据td中html 排序的。<br>也就是说td中的html,或者属性等都会内容会影响排序结果<br>而且排序是默认的字符串排序方式，即： 1，11，14，2，3，4，42，5<br>1）单独把排序数据放在一个display：none的标签中；2）重新渲染表格</li><li>如果自定义排序（不使用服务端排序） 打开表头默认给的 排序小箭头，会直接按照 小箭头 采用layui默认排序，而不是自定义<br>方式：1）只能不设置小箭头的排序方式，只让它显示。然后通过js 控制className 为正确的样式<br> 虽然会报错：没有排序的field，不用搭理<br> 2） 不使用layui的小箭头，自己给表头上插入 小箭头。    <pre><code>不合适，那干脆自己写table样式了   </code></pre> 3） 去修改源码，或者 做纠正     </li><li>导出xls数据，为当前表格展示的内容。即使是获取的所有数据（然后用自带分页展示），也是展示当前页<br>可以用table.exportFile() 直接导出数据。<br>$_Next: 但是，文件名  怎么命名啊？？ </li></ol><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>loading        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.5.23 星期四 14：45&lt;/p&gt;

&lt;p&gt;layui文档：&lt;a href=&quot;https://www.layui.com/doc/element/layout.html&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="jslib" scheme="http://yoursite.com/tags/jslib/"/>
    
  </entry>
  
  <entry>
    <title>文档在线预览</title>
    <link href="http://yoursite.com/sum/js/%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88/"/>
    <id>http://yoursite.com/sum/js/文档在线预览/</id>
    <published>2019-05-20T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.420Z</updated>
    
    <content type="html"><![CDATA[<p># <a href="https://blog.csdn.net/csdn_cjgu/article/details/69389474" target="_blank" rel="noopener">[Office Online 在线预览]</a><br>2017年04月06日 14:41:39 csdn_cjgu 阅读数：8359<br>首先，office的在线预览无疑问是在不用下载的前提下通过浏览器直接进行浏览，所以针对浏览器的版本不同系统是有要求的，具体的浏览器支持情况可以查看官方提供的文档：点我查看</p><p>利用office online 平台进行office 文档的在线查看，主旨在于获取文档的具体地址，通过Office 平台提供的链接地址指向需要预览的文档地址即可，例：<br><a href="http://view.officeapps.live.com/op/view.aspx?src=http%3a%2f%2fvideo.ch9.ms%2fbuild%2f2011%2fslides%2fTOOL-532T_Sutter.pptx" target="_blank" rel="noopener">http://view.officeapps.live.com/op/view.aspx?src=http%3a%2f%2fvideo.ch9.ms%2fbuild%2f2011%2fslides%2fTOOL-532T_Sutter.pptx</a><br>这个链接分为了两部分，一部分是 <a href="http://view.officeapps.live.com/op/view.aspx?src=，后面那个是具体的文档地址，用URLEncode进行处理的链接地址" target="_blank" rel="noopener">http://view.officeapps.live.com/op/view.aspx?src=，后面那个是具体的文档地址，用URLEncode进行处理的链接地址</a></p><p>通过拼接的地址即可实现office 的在线预览<br>需要注意的是：office 在线预览限制</p><ol><li>文档访问地址不能直接使用 ip，需要通过域名访问，并且端口必须是 80 端口</li><li>文档的格式（必须为以下格式之一）：<br>Word：docx、docm、dotm、dotx<br>Excel：xlsx、xlsb、xls、xlsm<br>PowerPoint：pptx、ppsx、ppt、pps、pptm、potm、ppam、potx、ppsm</li><li>文档的大小：Word 和 PowerPoint 文档必须小于 10 兆字节;Excel 必须小于五兆字节（通过office web app 部署的本地服务器可以设置文档大小）</li></ol><p># <a href="https://www.zhihu.com/question/24530006" target="_blank" rel="noopener">如何利用Office Online实现文档在线预览？</a><br>利用其它成熟公司开发的在线预览，包括baidu，华为云等。大多需要付费，但是功能全<br>自己部署  Office Web Apps Server ，有要求，软件要求和硬件要求<br>Office Web Apps Server<br>Collabora online    </p><p>可以用百度文库的技术啊，开放出来了：<a href="https://cloud.baidu.com/product/doc.html" target="_blank" rel="noopener">https://cloud.baidu.com/product/doc.html</a><br>可以使用成熟的I Doc View在线文档预览：<a href="http://www.idocv.com" target="_blank" rel="noopener">http://www.idocv.com</a><br>可以用 易度云的文档API：<a href="http://viewer.everydo.com" target="_blank" rel="noopener">http://viewer.everydo.com</a><br>可以看看这个 ekoz/kbase-doc<br>可以用插件pageoffice试试。<br>Office的配置很复杂而且Windows Server 很贵，可以试试这个产品，应该是价廉物美啦：<a href="https://ibisheng.cn" target="_blank" rel="noopener">https://ibisheng.cn</a><br>用永中的吧，除了产品，品牌和服务更有保证    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;a href=&quot;https://blog.csdn.net/csdn_cjgu/article/details/69389474&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[Office Online 在线预览]&lt;/a&gt;&lt;br&gt;2017年04月0
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Node库</title>
    <link href="http://yoursite.com/sum/ser/node%E5%BA%93/"/>
    <id>http://yoursite.com/sum/ser/node库/</id>
    <published>2019-05-20T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.5.20 星期一 </p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>http,request,axios等<br>当时只是做一个图片下载和上传（cdn），尝试找php中curl发现并不需要。只是网络请求就可以了。<br>上传图片的时候，只是因为格式不对，和接口定义的不一致，需要上传表格类型数据    </p><p>$NOTE: 在用pipe传递流的时候，需要注意监听error,<strong>而且要在pipe之前</strong>。否则error没有handle，就会出错，导致这个进程结束。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request(imgUrl,&#123;<span class="attr">timeout</span>:<span class="number">2000</span>&#125;)</span><br><span class="line">.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// $PS:  需要写在pipe前面监听error</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request图片失败err:'</span>,err.code)</span><br><span class="line">    <span class="keyword">return</span> reject(err)</span><br><span class="line">&#125;)</span><br><span class="line">.pipe(fs.createWriteStream(<span class="string">'image-temp.jpg'</span>))</span><br><span class="line">.on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="request上传表单"><a href="#request上传表单" class="headerlink" title="request上传表单"></a>request上传表单</h3><p>request：<a href="https://github.com/request/request#forms" target="_blank" rel="noopener">https://github.com/request/request#forms</a><br>For multipart/form-data we use the form-data library by @felixge. For the most cases, you can pass your upload form data via the formData option.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">request.post(<span class="string">'http://service.com/upload'</span>, &#123;<span class="attr">form</span>:&#123;<span class="attr">key</span>:<span class="string">'value'</span>&#125;&#125;)</span><br><span class="line">request.post(<span class="string">'http://service.com/upload'</span>).form(&#123;<span class="attr">key</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="comment">// ## form-data </span></span><br><span class="line"><span class="keyword">const</span> form = r.form();</span><br><span class="line">form.append(<span class="string">'my_field'</span>, <span class="string">'my_value'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formData = &#123;</span><br><span class="line">  my_field: <span class="string">'my_value'</span>,</span><br><span class="line">  my_buffer: Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">  my_file: fs.createReadStream(__dirname + <span class="string">'/unicycle.jpg'</span>),</span><br><span class="line">  attachments: [</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">'/attachment1.jpg'</span>),</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">'/attachment2.jpg'</span>)</span><br><span class="line">  ],</span><br><span class="line">  custom_file: &#123;</span><br><span class="line">    value:  fs.createReadStream(<span class="string">'/dev/urandom'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">      filename: <span class="string">'topsecret.jpg'</span>,</span><br><span class="line">      contentType: <span class="string">'image/jpeg'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.post(&#123;<span class="attr">url</span>:<span class="string">'http://service.com/upload'</span>, <span class="attr">formData</span>: formData&#125;, <span class="function"><span class="keyword">function</span> <span class="title">optionalCallback</span>(<span class="params">err, httpResponse, body</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'upload failed:'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Upload successful!  Server responded with:'</span>, body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/5744990/how-to-upload-a-file-from-node-js" target="_blank" rel="noopener">how to upload a file from node.js</a>  </p><p><a href="https://segmentfault.com/q/1010000000095621" target="_blank" rel="noopener">nodejs 如何读取远程的图片并显示出来?</a><br><code>request(&#39;http://abc.com/abc.png&#39;).pipe(fs.createWriteStream(&#39;abc.png&#39;));</code></p><p><a href="https://stackoverflow.com/questions/28245729/what-is-the-equivalent-of-curl-upload-file-in-node-request" target="_blank" rel="noopener">What is the equivalent of curl –upload-file in node-request</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.createReadStream(filePath).pipe(request.put(putURL,options,<span class="function"><span class="keyword">function</span>(<span class="params">err, httpsResponse, body</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( err ) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><p><a href="https://code.i-harness.com/zh-CN/q/680d47" target="_blank" rel="noopener">node.js javascript使用curl - 在nodejs中相当于curl？</a><br><del>由于看起来像node-curl已经死了，我已经分叉了它，重新命名并修改了它，使之更像curl，并在Windows下编译。node-libcurl</del></p><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>gm功能强大,node-images使用简单；两者都需要安装GraphicsMagick或者ImageMagick；实际通过安装GraphicsMagick成功的<br>$PS: 安装完记得配置环境变量</p><p># <a href="https://www.cnblogs.com/vipzhou/p/4798769.html" target="_blank" rel="noopener">nodejs图片裁剪、缩放、水印</a><br>关于nodejs下图片的裁剪、水印，网上的模块很多，主要如下：<br>gm：<a href="https://github.com/aheckmann/gm" target="_blank" rel="noopener">https://github.com/aheckmann/gm</a><br>node-canvas：<a href="https://github.com/Automattic/node-canvas" target="_blank" rel="noopener">https://github.com/Automattic/node-canvas</a><br>node-images：<a href="https://github.com/zhangyuanwei/node-images" target="_blank" rel="noopener">https://github.com/zhangyuanwei/node-images</a><br>Cloudinary：<a href="http://cloudinary.com/documentation/node_image_manipulation" target="_blank" rel="noopener">http://cloudinary.com/documentation/node_image_manipulation</a></p><p>这里推荐使用gm模块，首先是安装：<br>先要安装GraphicsMagick或者ImageMagick，因为gm是基于这两种图形处理工具包的。</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p># <a href="https://cnodejs.org/topic/51355c05df9e9fcc580e97e4" target="_blank" rel="noopener">node内三种mysql的库，mysql,libmysqlclient,mysql-native，到底哪个效率高些？</a>    </p><p>shinohane 1楼•6 年前<br>个人还是认为mysql会好于剩下两个……虽然效率低～但由于是纯js实现，把服务器移到Windows上的时候可以不那么复杂（偶尔会有这种需求……）      </p><p>zhiyu 5楼•6 年前<br>性能可接受的情况下，mysql应该是目前最好的选择，而且支持连接池。     </p><p>chappakochappako 8楼•6 年前<br>如果不太考虑性能的话，当然是选 mysql。维护的人多，更新的快，用的人也多  </p><p>chappako 3楼•6 年前<br>看下面的一些对比，你应该会有自己的选择。有的时候效率并不是最重要的<br>NPM地址<br>mysql <a href="https://npmjs.org/package/mysql" target="_blank" rel="noopener">https://npmjs.org/package/mysql</a><br>mysql-libmysqlclient <a href="https://npmjs.org/package/mysql-libmysqlclient" target="_blank" rel="noopener">https://npmjs.org/package/mysql-libmysqlclient</a><br>mysql-native <a href="https://npmjs.org/package/mysql-native" target="_blank" rel="noopener">https://npmjs.org/package/mysql-native</a></p><p>最后更新时间<br>mysql last updated a month ago<br>mysql-libmysqlclient last updated 25 days ago<br>mysql-native last updated 7 months ago</p><p>上个月下载次数<br>mysql  29 323<br>mysql-libmysqlclient 1 026<br>mysql-native 334</p><p>项目维护人数<br>mysql  5人<br>mysql-libmysqlclient 1人<br>mysql-native 1人</p><p>依赖其的项目<br>mysql  104<br>mysql-libmysqlclient 10<br>mysql-native 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.5.20 星期一 &lt;/p&gt;


&lt;h2 id=&quot;网络请求&quot;&gt;&lt;a href=&quot;#网络请求&quot; class=&quot;headerlink&quot; title=&quot;网络请求&quot;&gt;&lt;/a&gt;网络请求&lt;/h2&gt;&lt;p&gt;http,request,
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>代理工具</title>
    <link href="http://yoursite.com/sum/others/%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/sum/others/代理工具/</id>
    <published>2019-05-20T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhubangbang.com/charlesproxy" target="_blank" rel="noopener">抓包工具Charles的使用教程</a>   </p><p>不需要用同一个wifi，网线也可以，应该是在一个网段<br>手机设置代理后，提示建立连接，同意即可。        </p><h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h2><ol><li>设置https。需要本机安装证书，启用ssl   </li><li>单个文件（比如js）map到本地文件   </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhubangbang.com/charlesproxy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;抓包工具Charles的使用教程&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;不需要用同一个wifi，网线也可以，应该是在一个网段&lt;b
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql学习</title>
    <link href="http://yoursite.com/sum/ser/mysql%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/ser/mysql学习/</id>
    <published>2019-05-05T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.5.5 星期日 21：00</p><p>## </p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>#### 更新字段值<br>UPDATE book_comment SET title=left(content,10) WHERE product_id=24243060;         </p><p>#### 查找有无数据<br><a href="https://blog.csdn.net/linshichen/article/details/52919383" target="_blank" rel="noopener">Mysql判断记录是否存在</a><br>select count(*) from tablename where col = ‘col’;<br>select 1 from tablename where col = ‘col’ limit 1;<br>执行这条sql语句，所影响的行数不是0就是1。<br>特别解释下limit 1，mysql在找到一条记录后就不会往下继续找了。性能提升很多。</p><p>#### 查看<br>select * from book_comment limit 10\G       </p><h3 id="查字段（名称，类型）"><a href="#查字段（名称，类型）" class="headerlink" title="查字段（名称，类型）"></a>查字段（名称，类型）</h3><p>show columns from site_book_comment;</p><p>select column_name,column_comment,data_type from information_schema.columns where table_name=’查询表名称’ and table_schema=’数据库名称’<br>select COLUMN_NAME,DATA_TYPE,COLUMN_COMMENT from information_schema.COLUMNS where table_name = ‘表名’ and table_schema = ‘数据库名称’;</p><p>// 2) <a href="https://blog.csdn.net/god_wen/article/details/79271032" target="_blank" rel="noopener">mysql 查看表中字段的数据类型</a><br>// 2_1 查询结果显示<br>desc 表名;<br>show columns from 表名;<br>describe 表名;<br>// 2_2 sql语句显示<br>show create table 表名;<br>// 2_3:还可以通过专门的管理表来查看<br>use information_schema<br>select * from columns where table_name=’表名’;</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><a href="https://www.cnblogs.com/whgk/p/6179612.html" target="_blank" rel="noopener">[MySQL(五) MySQL中的索引详讲]</a><br>三、索引的分类　　<br>注意：索引是在存储引擎中实现的，也就是说不同的存储引擎，会使用不同的索引<br>　　　　　　　　　　　　MyISAM和InnoDB存储引擎：只支持BTREE索引， 也就是说默认使用BTREE，不能够更换<br>　　　　　　　　　　　　MEMORY/HEAP存储引擎：支持HASH和BTREE索引</p><p>1、索引我们分为四类来讲 单列索引(普通索引，唯一索引，主键索引)、组合索引、全文索引、空间索引、      </p><p>1.1、单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引。 这里不要搞混淆了。<br>1.1.1、普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。<br>1.1.2、唯一索引：索引列中的值必须是唯一的，但是允许为空值，<br>1.1.3、主键索引：是一种特殊的唯一索引，不允许有空值。</p><p>1.2、组合索引<br>在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。这个如果还不明白，等后面举例讲解时在细说　</p><p>1.3、全文索引<br>全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”你是个大煞笔，二货 …” 通过大煞笔，可能就可以找到该条记录。这里说的是可能，因为全文索引的使用涉及了很多细节，我们只需要知道这个大概意思，如果感兴趣进一步深入使用它，那么看下面测试该索引时，会给出一个博文，供大家参考。</p><p>1.4、空间索引<br>空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。<br>在创建空间索引时，使用SPATIAL关键字。</p><p>要求，引擎为MyISAM，创建空间索引的列，必须将其声明为NOT NULL。具体细节看下面　　　</p><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>实际用了MySQL-Front，sqlYog，还有基于php的mysql-admin</p><p># <a href="https://www.cnblogs.com/william-lee/p/7065061.html" target="_blank" rel="noopener">MySQL客户端工具的选择</a><br># <a href="https://www.zhihu.com/question/20423448" target="_blank" rel="noopener">[大家常用哪个MySQL客户端工具，除了命令行那个mysql之外？]</a>     </p><p># <a href="https://blog.csdn.net/lidujun1028/article/details/54616000" target="_blank" rel="noopener">[7款经典的MySQL客户端软件]</a>   </p><ol><li>EMS MySQL Manager<br>　　强大的mysql管理工具，允许用户通过图形界面创建或编辑数据库对象，并提供通过sql语句管理用户和权限，通过图形界面建立sql语句，自动生成html格式的数据库文档，导入/导出数据，查看/编辑blob字段等功能。     </li><li><p>MySQL-Front<br>　　mysql数据库的图形工具，主要特性包括多文档界面，语法突出，拖拽方式的数据库和表格，可编辑/可增加/删除的域，可编辑/可插入/删除的记录，可显示的成员，可执行的SQL 脚本，提供与外程序接口，保存数据到CSV文件等。</p></li><li><p>Navicat for MySQL<br>　　一套适用于MySQL数据库系统地图形化数据库管理、报告以及监控的工具。新版本具有高性能的、具有商业智能的、强大的备份功能，此外还有许多的改进。含简体中文文件。</p></li><li>MySqlYog<br>　　MySqlYog软件是纯JAVA编写的软件，可以运行于WINDOWS，LINUX，UNIX系统，基本版本可以实现对数据库的基本管理，可视化创建表，视图，触发器，数据库的热备份，恢复,可远程管理系统等功能。</li></ol><ol start="5"><li>MySQL Browser</li><li>Workbench</li><li>Sequel Pro</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.5.5 星期日 21：00&lt;/p&gt;

&lt;p&gt;## &lt;/p&gt;
&lt;h3 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h3&gt;&lt;p&gt;#### 更新
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB(023)/"/>
    <id>http://yoursite.com/sum/jsplus/前后端分离(023)/</id>
    <published>2019-05-03T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.5.3 星期五 23：45 </p><p>前后端分离开发痛点<br>解决问题：文档，mock data/mock server，自动化测试<br>上面三个单拆开来，都不难；关键是怎么和自动测试集合在一起    </p><p>还有 契约测试：基于持续集成与自动化测试</p><blockquote><p>契约测试：当我们定义好了这个API的规范时，这个API就可以称为是前后端之间的契约，这种设计方式称之为契约式测试  </p></blockquote><!-- [你是如何构建 Web 前端 Mock Server 的？](https://www.zhihu.com/question/35436669) --><h2 id="分述"><a href="#分述" class="headerlink" title="分述"></a>分述</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>许多写文档的库，比如：jsDoc、apidoc，swagger，showDoc，<br>YUIDoc、Dox、Docco、JSDuck   </p><p>$BLOB:[文档注释生成库调研]</p><p>根据一定的规则，写文档。也可以直接从注释中生成。   </p><h3 id="mock-data"><a href="#mock-data" class="headerlink" title="mock data"></a>mock data</h3><p>如果只是mock data/mock server 是比较简单的。<br>mock data的库：fakejs, mockjs<br>方式：<br>1) 代码中硬编码(直接写数据)<br>2) 封装拦截器<br>3) 为所有接口统一添加前缀<br>4) 代理。server代理，工具代理<br>webpack-dev-server,nginx<br>Fiddler、charles; chrome 插件($PS: 应该可以实现)   </p><p>mock server：json-server，express，mockjs，…<br>有的代价比较大，比如express；直接mock data简单。只是没有网络请求，但是不影响异步，可以封装Promise   </p><h3 id="测试-自动测试"><a href="#测试-自动测试" class="headerlink" title="测试/自动测试"></a>测试/自动测试</h3><p>单个接口：get 可以直接在浏览器url请求<br>post等需要借助工具/插件：postman，runapi,36nu<br><!-- http://runapi.showdoc.cc/     --><br><!-- http://www.36nu.com/apiTest --></p><p>如果多个接口要测试，需要写测试用例/导入测试数据，可以自动测试<br>正常情况，非正常情况（参数判断，返回判断，边界值，异常）   </p><p>需要写脚本测试，可以建表格导入不同的测试数据，也可以测试性能。生成报告？？<br>上述不包括性能测试。有比较强大的可以顺带测试性能的，比如基于java的（$PS: 咱也不熟）  </p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="以前做法"><a href="#以前做法" class="headerlink" title="以前做法"></a>以前做法</h3><p>hybris 开发：json server 试成功也没有用（chrome设置也可以直接请求json文件）<br>直接引入fakejs和fake data ，硬编码。<br>fake相较于mock简单，造假能力也丰富，不同于mock的语法、规则，没有占位符，api（命名）一看就懂   </p><p>danghao一期：没有发送请求，硬编码数据，需要的地方用Promise返回数据。（当时已经证明接口是通的）<br>danghao二期: 发送请求，用webpack-dev-server 做了代理（都代理到同一个接口了），请求回来的数据直接硬编码，也没有fake  </p><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><p>首先没有文档，需要文档，这是最主要的。<br>其次，最好可以对后端的接口做自动测试，通过后再接入，不需要挨个去测后端的接口（即使后端测完，也需要验证；而且他们测的也不全/正确）<br>mock data也少不了     </p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="showdoc"><a href="#showdoc" class="headerlink" title="showdoc"></a>showdoc</h3><p><a href="https://www.showdoc.cc/" target="_blank" rel="noopener">https://www.showdoc.cc/</a><br>适合写文档，单纯的文档。可以有多个页面，可以写api文档，字典，说明书、术规范说明文档<br>可以团队管理，自己搭环境    </p><p>没有mock data能力，也没有导出数据。测试更没有    </p><h3 id="swagger-ui"><a href="#swagger-ui" class="headerlink" title="swagger-ui"></a>swagger-ui</h3><p><a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-ui</a><br>$PS: 有在线编辑器<br><a href="http://swagger.io" target="_blank" rel="noopener">http://swagger.io</a><br>swagger语法写起来比较复杂，虽然功能看起来很强大，yaml语法似乎写起来也省事（$PS: 只用缩进看起来有晃眼）<br>可以对接口进行测试（try it out），接口可以提供访问白名单？？   </p><p>和jsdocs 比起来，还是jsdoc对前端友好一些。但是jsdoc貌似只生成文档，在js中写写注释还是不错的。如果写js库的话，可以考虑<br>fakejs/mockjs 只生成mock数据，或拦截请求，没有文档   </p><p>postman 只对接口进行测试，可以写requests,可以添加到scenarios 做自动测试，也有ASSERTIONS<br>同样不是文档，也无法mock data   </p><h3 id="rap2"><a href="#rap2" class="headerlink" title="rap2"></a>rap2</h3><p><a href="http://rap2.taobao.org/repository" target="_blank" rel="noopener">http://rap2.taobao.org/repository</a><br><a href="https://github.com/thx/RAP/" target="_blank" rel="noopener">https://github.com/thx/RAP/</a><br>文档：twiki  $PS: 好像还是rap1<br>上面是公开的在线地址，也可以自己搭建<br>建仓库，有model概念，团队管理，写文档，mock data/mock server ，还有状态    </p><p>关键这个2，页面不鲁棒：不是加载半天不出来，就是提交缓慢<br>$PS: 可能和作者后端不熟有关   </p><p>如果要做测试，可以配合postman一起使用      </p><h3 id="yapi"><a href="#yapi" class="headerlink" title="yapi"></a>yapi</h3><p><a href="http://yapi.demo.qunar.com/project/" target="_blank" rel="noopener">http://yapi.demo.qunar.com/project/</a><br><a href="https://github.com/YMFE/yapi/" target="_blank" rel="noopener">https://github.com/YMFE/yapi/</a><br>文档：<a href="https://yapi.ymfe.org/documents/index.html" target="_blank" rel="noopener">https://yapi.ymfe.org/documents/index.html</a>        </p><p>需要自己搭，公共的没有管理权限；权限管理，可视化接口管理，Mock Server，自动化测试，数据导入，插件机制<br>功能还是比较强大的：<br>接口（接口列表，测试集合），动态，数据管理，设置（项目，环境，请求，token，全局mock），wiki    </p><p>mock data： 参数支持（rap2没有试成功）；json-schema；json（mockjs+json5）；拖动排序<br>    还有高级mock（自定义mock数据，rap2的话，还需要自己写点东西），测试校验<br>自动化测试：环境配置（方便测试不同环境，线上/测试/本地）；服务端测试；全局变量<br>数据导入/导出：json，swagger，har，postman； html，插件还支持word<br>二次开发：勾子函数，全局api  </p><p>唯一弱于rap2的是版本管理，但是有tag； 感觉tag和版本管理没有关系，但是这个不影响目前使用，因为目前还没有不同版本的需求<br>yapi还有收藏，文档也比较全，有技术团队支持（去哪儿），完全中文开放<br>部署貌似也简单   </p><h3 id="rap2-和api共同问题"><a href="#rap2-和api共同问题" class="headerlink" title="rap2 和api共同问题"></a>rap2 和api共同问题</h3><p>和rap2相同的不足是，相同的路径，即使url不同，也会是同一个接口。<br>rap2 可以根据 ${method} 区分get，post,delete等（rest风格）；yapi 有query？？<br>$PS: 上面的方式都没有尝试过，不确定        </p><p>提需求了，实现不实现就不知道了<br>rap2: <a href="https://github.com/thx/RAP/issues/1304" target="_blank" rel="noopener">不同url可以返回不同的接口数据</a><br>    $PS: Yalhu提的<br>    <a href="https://github.com/YMFE/yapi/issues/49#issuecomment-488746153" target="_blank" rel="noopener">yapi 下个版本需求收集</a><br>yapi：<a href="https://github.com/YMFE/yapi/issues/867" target="_blank" rel="noopener">接口地址是否允许重复开关</a>  </p><p>danghao接口地址都是<code>/index</code> :<code>/index?control=user&amp;action=</code>,<code>/index?control=order&amp;action=,/index?</code><br>在rap2和yapi看来这都是同一个接口，虽然可以根据参数动态返回数据；但这毕竟是当一个接口对待的，用yapi无法实现测试，测线上数据     </p><p>需要和后端确认，接口路径是不是都是这一个，还是有不同的路径可以访问<br>如果都是一个路径，需要包装做拦截，如果不做webpack-dev-server代理，需要baseUrl。yapi的自动测试也难以实现了      </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当然选yapi了， rap2 页面慢就有点难忍；还有文档，部署，团队方面<br>$PS: yapi（8k）的star比rap（9k）少，rap2（3k）。 出现晚？？    </p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="mock-data-1"><a href="#mock-data-1" class="headerlink" title="mock data"></a>mock data</h3><p><a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">https://github.com/nuysoft/Mock/wiki</a><br><!-- http://mockjs.com/examples.html#Array --><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> baseURL=process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'http://yapi.demo.qunar.com/mock/1304'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data=fakeData <span class="comment">// 1) 代码中硬编码(直接写数据)</span></span><br><span class="line">    fetch(BaseUrl+<span class="string">'/index'</span>)  <span class="comment">// 3) 为所有接口统一添加前缀 </span></span><br><span class="line">    fetch2(<span class="string">'/index'</span>) <span class="comment">// 2) 封装拦截器  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// let redirect = "http://" + ROOT + '/mockjsdata/' + projectId + url;</span></span><br><span class="line">    <span class="keyword">let</span> redirect=<span class="string">`<span class="subst">$&#123;RAP.protocol&#125;</span>://<span class="subst">$&#123;RAP.host&#125;</span>/app/mock/<span class="subst">$&#123;match.repositoryId&#125;</span>/<span class="subst">$&#123;match.method&#125;</span>/<span class="subst">$&#123;match.url&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="jsdoc文档"><a href="#jsdoc文档" class="headerlink" title="jsdoc文档"></a>jsdoc文档</h3><p><a href="http://usejsdoc.org/" target="_blank" rel="noopener">http://usejsdoc.org/</a><br>也可以给类添加文档。<br>$PS: 可以自定义数据结构吗？？ definitions / Mock.Random.extend<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this is foo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>1 &#123;string&#125; param1 - this is param1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>2 &#123;Object&#125; param2 - this is param2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;&#125;</span> </span>- </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">funciton foo(param1,param2)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="swagger文档"><a href="#swagger文档" class="headerlink" title="swagger文档"></a>swagger文档</h3><p>// swagger 。可以是rest风格。可分隔文件<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">swagger:"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="string">version:1.0.0</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Simple</span> <span class="string">API</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">simple</span> <span class="string">API</span> <span class="string">to</span> <span class="string">learn</span> <span class="string">how</span> <span class="string">to</span> <span class="string">write</span> <span class="string">OpenAPI</span> <span class="string">Specification</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">simple.api</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/openapi101</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/persons:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Gets</span> <span class="string">some</span> <span class="string">persons</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Returns</span> <span class="string">a</span> <span class="string">list</span> <span class="string">containing</span> <span class="string">all</span> <span class="string">persons.</span> <span class="string">The</span> <span class="string">list</span> <span class="string">supports</span> <span class="string">paging.</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pageSize</span></span><br><span class="line">         <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">         <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">persons</span> <span class="string">returned</span></span><br><span class="line">         <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pageNumber</span></span><br><span class="line">         <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">         <span class="attr">description:</span> <span class="string">Page</span> <span class="string">number</span></span><br><span class="line">         <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">A</span> <span class="string">list</span> <span class="string">of</span> <span class="string">Person</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">"#/definitions/Persons"</span></span><br><span class="line">        <span class="attr">500:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">"#/responses/Standard500ErrorResponse"</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Creates</span> <span class="string">a</span> <span class="string">person</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Adds</span> <span class="string">a</span> <span class="string">new</span> <span class="string">person</span> <span class="string">to</span> <span class="string">the</span> <span class="string">persons</span> <span class="string">list.</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">person</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">The</span> <span class="string">person</span> <span class="string">to</span> <span class="string">create.</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">"#/definitions/Person"</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">204:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Persons</span> <span class="string">succesfully</span> <span class="string">created.</span></span><br><span class="line">        <span class="attr">400:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Persons</span> <span class="string">couldn't</span> <span class="string">have</span> <span class="string">been</span> <span class="string">created.</span></span><br><span class="line">        <span class="attr">500:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">"#/responses/Standard500ErrorResponse"</span></span><br><span class="line">  <span class="string">/persons/&#123;username&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Gets</span> <span class="string">a</span> <span class="string">person</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Returns</span> <span class="string">a</span> <span class="string">single</span> <span class="string">person</span> <span class="string">for</span> <span class="string">its</span> <span class="string">username.</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">username</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">The</span> <span class="string">person's</span> <span class="string">username</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">A</span> <span class="string">Person</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">"#/definitions/Person"</span></span><br><span class="line">        <span class="attr">404:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">The</span> <span class="string">Person</span> <span class="string">does</span> <span class="string">not</span> <span class="string">exists.</span></span><br><span class="line">        <span class="attr">500:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">"#/responses/Standard500ErrorResponse"</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Person:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">firstName:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">lastName:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure></p><p style="text-align:right">2019.5.4 星期六 02：13 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.5.3 星期五 23：45 &lt;/p&gt;

&lt;p&gt;前后端分离开发痛点&lt;br&gt;解决问题：文档，mock data/mock server，自动化测试&lt;br&gt;上面三个单拆开来，都不难；关键是怎么和自动测试集合在一起    
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue实用</title>
    <link href="http://yoursite.com/sum/jsplus/vue%E5%AE%9E%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/vue实用/</id>
    <published>2019-04-14T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.4.14 星期日 17:30</p><h1 id="vue实用"><a href="#vue实用" class="headerlink" title="vue实用"></a>vue实用</h1><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>### 1 一般父子组件。<br>1) 通过prop,和$emit  $danghao:ContentNav 切换<br>2) parent/root,children  或者父组件中可以用 $refs调用子组件  $danghao:定时发布<br>如何实时响应？<br>如果修改父组件的值？</p><p>### 2 在有些情况下，我们可能需要对一个 prop 进行“双向绑定”<br>1) 为了方便起见，我们为这种模式提供一个缩写，即 .sync 修饰符：     </p><blockquote><p>.sync 修饰符的 v-bind 不能和表达式一起使用    $PS: 同v-model<br>将 v-bind.sync 用在一个字面量的对象上是无法正常工作的  </p></blockquote><p>2) 比如表单的数据v-model。定义表单自己的数据，然后在声明周期中把父组件的值赋给 表单自己定义的值    $danghao: ContenNav nav组件的active 值；帐号信息 申请描述  </p><p>### 根/父组件 值为异步获取/更新<br>1) 如果要直接引用<code>$root.$data.userInfo</code> 或<code>$root.userInfo</code>, 属性的值，需要注意数据类型正确。不能直接给一个空值<code>userInfo: {}</code> 属性也需要赋值 <code>user:{tags:[]}</code>,因为使用了tags的值<br>2) 如果可以确定 子组件 装载时，根组件的异步获取的数据已经成功，可以在子组件的生命周期中重新赋值<br>3) 通过watch 监听数据的变化      </p><p>？ 子组件直接使用的 父/根 组件的值 会不会 同步更新视图  </p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>1） 为什么组件data是一个函数？多个/不同实例间 不共用相同的数据<br>2）data：组件数据。<br>computed：根据data或者其他数据 过滤的数据，可以缓存，只要源数据发生变动。<br>也可以有set方法     </p><blockquote><p>计算属性是基于它们的响应式依赖进行缓存的<br>method: 每次调用都会执行。如果你不希望有缓存，请用方法来替代。<br>watch(侦听属性): 数据变化时执行异步或开销较大的操作时    </p></blockquote><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>Vuex:<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a><br>## 一 安装<br>Vuex 依赖 Promise。如果你支持的浏览器并没有实现<br>## 二 vuex是什么   </p><blockquote><p>Flux 架构就像眼镜：您自会知道什么时候需要它。<br>状态管理模式:state,view,action<br>### 三 开始<br>## 四 核心概念<br>State：单一状态树（可module）。唯一数据源。多实例也可返回函数，相当与vue的data<br>Getter：相当与vue的计算属性，可缓存。可通过属性和方法访问<br>Mutation:可直接修改State，不能使用异步 。可用常量来管理所有事件类型，<br>Action：提交mutation非直接修改状态 ，可以包含异步。 可以多个异步组合<br>Module: 多种便捷方式，可以减少命名空间的书写  </p></blockquote><p>辅助函数 和 对象展开运算符  ：<code>...mapState，...mapGetters，...mapMutations，...mapActions</code><br>## 五 项目结构<br>根目录下可index 和根级别的action,mutation,module   </p><p>## 六 插件     $Skip    </p><p>## 七 严格模式<br><code>strict: true</code>.生产时要去掉<br>## 八 表单处理<br>当在严格模式中使用 Vuex 时，在属于 Vuex 的 state 上使用 v-model 会比较棘手：      在严格模式中，由于这个修改不是在 mutation 函数中执行的, 这里会抛出一个错误。      </p><p>另一个方法是使用带有 setter 的双向绑定计算属性：    </p><p>## 测试   $Skip<br>## 热重载  $Skip   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.4.14 星期日 17:30&lt;/p&gt;


&lt;h1 id=&quot;vue实用&quot;&gt;&lt;a href=&quot;#vue实用&quot; class=&quot;headerlink&quot; title=&quot;vue实用&quot;&gt;&lt;/a&gt;vue实用&lt;/h1&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>JS模式-7：设计模式</title>
    <link href="http://yoursite.com/pdf/js/js%E6%A8%A1%E5%BC%8F/7_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/pdf/js/js模式/7_设计模式/</id>
    <published>2019-04-07T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.400Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.4.7 星期日 17:57</p><p>1 单体<br>2 工厂<br>3 迭代器<br>4 装饰者<br>5 策略<br>6 外观<br>7 代理<br>8 中介者<br>9 观察者        </p><h2 id="7-1-单体-Singleton"><a href="#7-1-单体-Singleton" class="headerlink" title="7.1 单体 Singleton"></a>7.1 单体 Singleton</h2><p>对象字面量   </p><h3 id="使用new操作符"><a href="#使用new操作符" class="headerlink" title="使用new操作符"></a>使用new操作符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uni=<span class="keyword">new</span> Universe()</span><br><span class="line"><span class="keyword">var</span> uni2=<span class="keyword">new</span> Universe()</span><br><span class="line">uni===uni2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>1) 全局变量存储<br>2) 构造函数的静态属性中缓存该实例<br>3) 将该实例包装在闭包中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ## 2 构造函数的静态属性中缓存该实例</span></span><br><span class="line">funciton Universe()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> Universe.instance === <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Universe.instance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.bang=<span class="string">'Big'</span></span><br><span class="line">    <span class="comment">// 缓存</span></span><br><span class="line">    Universe.instance=<span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 隐式返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ## 3 将该实例包装在闭包中</span></span><br><span class="line">funciton Universe()&#123;</span><br><span class="line">    <span class="comment">// 缓存实例</span></span><br><span class="line">    <span class="keyword">var</span> instance=<span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.bang=<span class="string">'Big'</span></span><br><span class="line">    <span class="comment">// 重写构造函数</span></span><br><span class="line">    Universe=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方案3缺点：重写构造函数，会丢失所有初始定义和重新定义添加的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">funciton Universe()&#123;</span><br><span class="line">    <span class="comment">// 缓存实例</span></span><br><span class="line">    <span class="keyword">var</span> instance=<span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.bang=<span class="string">'Big'</span></span><br><span class="line">    <span class="comment">// 重写构造函数</span></span><br><span class="line">    Universe=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保留原型属性</span></span><br><span class="line">    Universe.prototype=<span class="keyword">this</span></span><br><span class="line">    instance=<span class="keyword">new</span> Universe()</span><br><span class="line">    instance.construtor=Universe</span><br><span class="line"></span><br><span class="line">    instance.bang=<span class="string">'Big'</span></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ### 3.2 另一种方案：</span></span><br><span class="line"><span class="keyword">var</span> Universe</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance</span><br><span class="line">    Universe=<span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance</span><br><span class="line">        instance=<span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>.bang=<span class="string">'big'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h2 id="7-2-工厂"><a href="#7-2-工厂" class="headerlink" title="7.2 工厂"></a>7.2 工厂</h2><p>目的是未来创建对象。通常定义在类或者类的静态方法中实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> corolla=CarMaker.factory(<span class="string">'Compact'</span>)</span><br><span class="line"><span class="keyword">var</span> solstice=CarMaker.factory(<span class="string">'Convertible'</span>)</span><br><span class="line"><span class="keyword">var</span> cherokee=CarMaker.factory(<span class="string">'SUV'</span>)</span><br><span class="line">corolla.drive()</span><br><span class="line">solstice.drive()</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarMaker</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">CarMaker.prototype.drive=funciton()&#123;<span class="keyword">return</span> <span class="string">'Vromm, i have '</span>+<span class="keyword">this</span>.doors+<span class="string">' doors'</span>&#125;</span><br><span class="line">CarMaker.factory=funciton(type)&#123;</span><br><span class="line">    <span class="keyword">var</span> constr=type,newcar</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> CarMaker[constr]!==<span class="string">'funciton'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span>&#123;<span class="attr">name</span>:<span class="string">'Error'</span>,<span class="attr">message</span>:constr+<span class="string">'doesn\'t exist'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> CarMaker[constr].prototype.drive!==<span class="string">'function'</span>)&#123;</span><br><span class="line">        CarMaker[constr].prototype=<span class="keyword">new</span> CarMaker()</span><br><span class="line">    &#125;</span><br><span class="line">    newcar=<span class="keyword">new</span> CarMaker[constr]()</span><br><span class="line">    <span class="keyword">return</span> newcar</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义汽车制造商</span></span><br><span class="line">CarMaker.Compact=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.doors=<span class="number">4</span>&#125;</span><br><span class="line">CarMaker.SUV=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.doors=<span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象工厂"><a href="#内置对象工厂" class="headerlink" title="内置对象工厂"></a>内置对象工厂</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>(),</span><br><span class="line">n=<span class="keyword">new</span> <span class="built_in">Object</span>(<span class="number">1</span>)</span><br><span class="line">s=<span class="built_in">Object</span>(<span class="string">'1'</span>)</span><br><span class="line">b=<span class="built_in">Object</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">o.construtor === <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">s.construtor === <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="7-3-迭代器"><a href="#7-3-迭代器" class="headerlink" title="7.3 迭代器"></a>7.3 迭代器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element</span><br><span class="line"><span class="comment">// while(element=agg.next())</span></span><br><span class="line"><span class="keyword">while</span>(element=agg.hasNext())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> agg=(funciton()&#123;</span><br><span class="line">    <span class="keyword">var</span> index=<span class="number">0</span>,</span><br><span class="line">    data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    length=data.length</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> element</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.hasNext()) reutnr <span class="literal">null</span></span><br><span class="line">            element=data[index]</span><br><span class="line">            index=index+<span class="number">2</span>  <span class="comment">// $PS: 此处可能是+1</span></span><br><span class="line">            <span class="keyword">return</span> element</span><br><span class="line">        &#125;,</span><br><span class="line">        hasNext:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> index&lt;length&#125;,</span><br><span class="line">        rewind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;index=<span class="number">0</span>&#125;,</span><br><span class="line">        current:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> data[index]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="7-4-装饰者"><a href="#7-4-装饰者" class="headerlink" title="7.4 装饰者"></a>7.4 装饰者</h2><p>在运行时动态添加附加功能到对象中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sale=<span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale=sale.decorate(<span class="string">'fedtax'</span>)<span class="comment">// 增加联邦税</span></span><br><span class="line">sale=sale.decorate(<span class="string">'quebec'</span>) <span class="comment">// 增加省级税</span></span><br><span class="line">sale.getPrice() <span class="comment">// $112.88</span></span><br><span class="line"><span class="comment">// 另一情况，没有省级税，用加元</span></span><br><span class="line"><span class="keyword">var</span> sale=<span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale.decorate(<span class="string">'fedtax'</span>)</span><br><span class="line">sale.decorate(<span class="string">'cdn'</span>)</span><br><span class="line">sale.getPrice() <span class="comment">// CDN$105.00</span></span><br></pre></td></tr></table></figure></p><p>### 实现1:每个装饰者成为一个对象，并且包含了应该被重载的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>)</span>&#123;<span class="keyword">this</span>.price=price||<span class="number">100</span>&#125;</span><br><span class="line">Sale.prototype.getPrice=<span class="function"><span class="keyword">function</span>(<span class="params">return this.price</span>)</span></span><br><span class="line"><span class="function"><span class="title">Sale</span>.<span class="title">decorators</span>=</span>&#123;&#125;</span><br><span class="line">Sale.decorators.fedtax=&#123;</span><br><span class="line">    getPrice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> price=<span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">        price += price * <span class="number">5</span> / <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> price</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.money=&#123;</span><br><span class="line">    getPrice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'$'</span>+<span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 神奇的decorate方法</span></span><br><span class="line">Sale.prototype.decorate=<span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    overrides=<span class="keyword">this</span>.constructor.decorators[decorator]</span><br><span class="line">    ,i,newObj</span><br><span class="line">    F.prototype=<span class="keyword">this</span></span><br><span class="line">    newObj=<span class="keyword">new</span> F()</span><br><span class="line">    newObj.uber=F.prototype</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> overrides)&#123;</span><br><span class="line">        <span class="keyword">if</span>(overrides.hasOwnProperty(i))&#123;</span><br><span class="line">            newObj[i]=overrides[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用列表实现"><a href="#使用列表实现" class="headerlink" title="使用列表实现"></a>使用列表实现</h3><p>利用js动态语言特性，不需要继承。不是每个装饰方法调用链中前面的方法，而是将结果做为参数传递到下一个方法<br>$PS: js面向对象中，好像是用了第一种方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.price=(price&gt;<span class="number">0</span>) || <span class="number">100</span>  <span class="comment">// $PS: price &gt;0 返回的是一个boolean吧，怎么传递给price赋值</span></span><br><span class="line">    <span class="keyword">this</span>.decorators_list=[]</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators=&#123;&#125;</span><br><span class="line">Sale.decorators.fedtax=&#123;</span><br><span class="line">    getPrice:<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price += price * <span class="number">5</span> / <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.decorate=<span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.decorators_list.push(decorator)</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price=<span class="keyword">this</span>.price,i,max=<span class="keyword">this</span>.decorators_list.length,name</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;max;i+=<span class="number">1</span>)&#123;</span><br><span class="line">        name=<span class="keyword">this</span>.decorators_list[i]</span><br><span class="line">        price=Sale.decorators[name].getPrice(price)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-5-策略"><a href="#7-5-策略" class="headerlink" title="7.5 策略"></a>7.5 策略</h2><p>支持您在运行时选择算法。<br>一个例子是表单验证。创建具有validate方法的对象validator。不论表单的具体类型，都调用且返回相同结果：。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;<span class="attr">first_name</span>:<span class="string">'Super'</span>,<span class="attr">last_name</span>:<span class="string">'Man'</span>,<span class="attr">age</span>:<span class="string">'unknow'</span>,<span class="attr">useranme</span>:<span class="string">'o_0'</span>&#125;</span><br><span class="line">validator.config=&#123;</span><br><span class="line">    first_name:<span class="string">'isNonEmpty'</span>,</span><br><span class="line">    age:<span class="string">'isNumber'</span>,</span><br><span class="line">    useranme:<span class="string">'isAplhaNum'</span></span><br><span class="line">&#125;</span><br><span class="line">validator.validate(data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(validator.hasErrors())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(validator.message.join(<span class="string">'\n'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>$PS: element UI：rules, props(vue,react)的类型检查类似都是这个格式<code>rule:[{name:{required:true}},],pros:{name:{type:String,required:true,default:&#39;&#39;},age:{}}</code><br>### 实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">validator.type.isNonEmpty=&#123;</span><br><span class="line">    validate:funciton(value)&#123;</span><br><span class="line">        <span class="keyword">return</span> value!==<span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    instructions:<span class="string">'the value cannot be empty'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> validator=&#123;</span><br><span class="line">    types:&#123;&#125;, <span class="comment">// 所有可用的检查</span></span><br><span class="line">    messages:[], <span class="comment">// </span></span><br><span class="line">    config:&#123;&#125;, <span class="comment">// 当前验证配置，名称：验证类型</span></span><br><span class="line">    validate:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i,msg,type,checker,result_ok</span><br><span class="line">        <span class="keyword">this</span>.messages=[]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.hasOwnProperty(i))&#123;</span><br><span class="line">                type=<span class="keyword">this</span>.config[i]</span><br><span class="line">                checker=<span class="keyword">this</span>.types[type]</span><br><span class="line">                <span class="keyword">if</span>(!type)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> <span class="comment">// 不需要验证</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!checker)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> &#123;<span class="attr">name</span>:<span class="string">'ValidationError'</span>,<span class="attr">message</span>:<span class="string">'No handler to validate type '</span>+type&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result_ok=checker.validate(data[i])</span><br><span class="line">                <span class="keyword">if</span>(!result_ok)&#123;</span><br><span class="line">                    msg=<span class="string">'Invalid value for '</span>+i+checker.instructions  </span><br><span class="line">                    <span class="keyword">this</span>.message.push(msg)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors</span><br><span class="line">    &#125;,</span><br><span class="line">    hasErrors:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message.length!==<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-6-外观"><a href="#7-6-外观" class="headerlink" title="7.6 外观"></a>7.6 外观</h2><p>有时候，两个或更多方法可能普遍的被一起调用。这，创建另一个方法以包装重复的方法嗲用非常有意义<br>对重新设计和重构工作也有帮助。当需要替换一个具有不同实现对象时，不得不重新修改，而且新代码。通过外观模式，首先考虑新对象的api，然后继续在原有对象的前面创建一个外观。这样，。。。<br>$PS: 包装几个方法；或者，在原有的基础上再包一层，相当于穿衣服，所以叫外观。<br>$PS: Dangd-ReviewCode, 新的api可以在老的api，外面包一层<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myevent=&#123;</span><br><span class="line">    stop:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> e.preventDefault === <span class="string">'function'</span>) e.preventDefault()</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> e.stopPropagation === <span class="string">'function'</span>) e.stopPropagation()</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> e.returnValue === <span class="string">'boolean'</span>) e.returnValue=<span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> e.cancelBubble===<span class="string">'boolean'</span>) e.cancelBubble=<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-7-代理"><a href="#7-7-代理" class="headerlink" title="7.7 代理"></a>7.7 代理</h2><p>一个对象充当另一个对象的接口。<br>与外观合并多个方法调用不同。代理介于对象的客户端和对象本身，且对该对象的访问进行保护    </p><p>举例：客户端发起初始化请求，然后代理以一切正常做为响应。实际没有传递消息，直到客户端明显需要本体对象完成一些工作时，才将消息一并发出。   </p><p>1) 短时间内请求了多个，代理后可以一并发出。50ms的延迟对用户是不易察觉的。<br>2) 代理可以将结果缓存到新短的cache属性中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码：略</span></span><br></pre></td></tr></table></figure></p><h2 id="7-8-中介者"><a href="#7-8-中介者" class="headerlink" title="7.8 中介者"></a>7.8 中介者</h2><p>多个对象互相通信，一定程度上不<br>中介者模式缓解了该问题并促进形成松耦合，且有助于提高可维护性。<br>独立对象并不直接通信，而是通过mediator对象。   </p><p>实例：玩家1，玩家2，计分板，中介者  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.points=<span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.points+=<span class="number">1</span></span><br><span class="line">    mediator.played()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> scoreboard=&#123;</span><br><span class="line">    element:<span class="built_in">document</span>.getElementById(<span class="string">'result'</span>),</span><br><span class="line">    update:<span class="function"><span class="keyword">function</span>(<span class="params">score</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i,msg=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> score)&#123;</span><br><span class="line">            <span class="keyword">if</span>(score.hasOwnProperty(i))&#123;</span><br><span class="line">                msg+=<span class="string">'&lt;strong&gt;'</span>+i+<span class="string">'&lt;/strong&gt;'</span></span><br><span class="line">                msg+=score[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.element.innerHTML=msg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mediator=&#123;</span><br><span class="line">    players:&#123;&#125;,</span><br><span class="line">    setup:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> players=<span class="keyword">this</span>.players</span><br><span class="line">        players.home=<span class="keyword">new</span> Play(<span class="string">'Home'</span>)</span><br><span class="line">        players.gest=<span class="keyword">new</span> Play(<span class="string">'Guest'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    played:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> players=<span class="keyword">this</span>.players,</span><br><span class="line">        score=&#123;</span><br><span class="line">            Home:players.home.points</span><br><span class="line">            Guest:players.guest.points</span><br><span class="line">        &#125;</span><br><span class="line">        scoreboard.update(score)</span><br><span class="line">    &#125;,</span><br><span class="line">    keypress:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e=e||<span class="built_in">window</span>.event</span><br><span class="line">        <span class="keyword">if</span>(e.which===<span class="number">49</span>)&#123; <span class="comment">// 按键1</span></span><br><span class="line">            mediator.players.home.play()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(e.which===<span class="number">48</span>)&#123; <span class="comment">// 按键0</span></span><br><span class="line">            mediator.players.guest.play()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-观察者"><a href="#7-9-观察者" class="headerlink" title="7.9 观察者"></a>7.9 观察者</h2><p>所有浏览器事件<br>主要动机是促进形成松散耦合。并不是一个对象调用另一个对象，而是一个对象订阅另一个对象的特定活动并在状态改变后获得通知。订阅者也称之为观察者，被观察的对象称为发布者或者主题。    </p><h3 id="示例1：杂志订阅"><a href="#示例1：杂志订阅" class="headerlink" title="示例1：杂志订阅"></a>示例1：杂志订阅</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> publisher=&#123;</span><br><span class="line">    subscribers:&#123;</span><br><span class="line">        any:[] <span class="comment">// 事件类型：订阅者</span></span><br><span class="line">    &#125;,</span><br><span class="line">    subscribe:<span class="function"><span class="keyword">function</span>(<span class="params">fn,type</span>)</span>&#123;</span><br><span class="line">        type=type || <span class="string">'any'</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.subscribers[type]===<span class="string">'undefined'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.subscribers[type]=[]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.subscribers[type].push(fn)</span><br><span class="line">    &#125;,</span><br><span class="line">    unsubscribe:<span class="function"><span class="keyword">function</span>(<span class="params">fn,type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.visitSubscribers(<span class="string">'unsubscribe'</span>,fn,type)</span><br><span class="line">    &#125;,</span><br><span class="line">    publish:<span class="function"><span class="keyword">function</span>(<span class="params">publication,type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.visitSubscribers(<span class="string">'publish'</span>,publication,type)</span><br><span class="line">    &#125;,</span><br><span class="line">    visitSubscribers:<span class="function"><span class="keyword">function</span>(<span class="params">action,arg,type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pubtype=type||<span class="string">'any'</span></span><br><span class="line">        ,subscribers=<span class="keyword">this</span>.subscribers[pubtype],i</span><br><span class="line">        ,max=subscribers.length</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;max;i+=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(action===<span class="string">'action'</span>)&#123;</span><br><span class="line">                subscribers[i](arg)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(subscribers[i]===arg)&#123;</span><br><span class="line">                    subscribers.splice(i,<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePublisher</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> publisher)&#123;</span><br><span class="line">        <span class="keyword">if</span>(publisher.hasOwnProperty(i)&amp;&amp; <span class="keyword">typeof</span> publisher[i]===<span class="string">'function'</span>)&#123;</span><br><span class="line">            o[i]=publish[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    o.subscribers=&#123;<span class="attr">any</span>:[]&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> pager=&#123;</span><br><span class="line">    daily:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.publish(<span class="string">'big news today'</span>)&#125;,</span><br><span class="line">    monthly:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.publish(<span class="string">'interestion analysis'</span>,<span class="string">'monthly'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">makePublisher(pager)</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> joe=&#123;</span><br><span class="line">    drinkCoffee:<span class="function"><span class="keyword">function</span>(<span class="params">pager</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'just read'</span>+pager)</span><br><span class="line">    &#125;,</span><br><span class="line">    sundayPreNap:<span class="function"><span class="keyword">function</span>(<span class="params">monthly</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'about to fall asleep reading this'</span>+monthly)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pager注册Joe：joe向pager订阅</span></span><br><span class="line">pager.subscribe(joe.drinkCoffee)</span><br><span class="line">pager.subscribe(joe.sundayPreNap,<span class="string">'monthly'</span>)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">pager.daily()</span><br><span class="line">pager.daily()</span><br><span class="line">pager.monthly()</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 2  joe成为发布者</span></span><br><span class="line">makePublisher(joe)</span><br><span class="line">joe.tweet=<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.publish(msg)</span><br><span class="line">&#125;</span><br><span class="line">pager.readTweets=funciton(tweet)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call big meeting! someone'</span>+tweet)</span><br><span class="line">&#125;</span><br><span class="line">joe.tweet(<span class="string">'hated the pager today'</span>)</span><br></pre></td></tr></table></figure><h3 id="示例2：键盘按键游戏"><a href="#示例2：键盘按键游戏" class="headerlink" title="示例2：键盘按键游戏"></a>示例2：键盘按键游戏</h3><p>接受无限量玩家<br>中介者：mediator对象必须知道所有其他参与对象并调用他们的方法；<br>观察者更缺乏只能，主要依赖于对象观察某些事件并采取行动。比如scoreboard监听scorechange事件<br>调整使更解决浏览器：fire,on,remove;type;context    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码：略</span></span><br></pre></td></tr></table></figure><p style="text-align:right">20:28</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.4.7 星期日 17:57&lt;/p&gt;


&lt;p&gt;1 单体&lt;br&gt;2 工厂&lt;br&gt;3 迭代器&lt;br&gt;4 装饰者&lt;br&gt;5 策略&lt;br&gt;6 外观&lt;br&gt;7 代理&lt;br&gt;8 中介者&lt;br&gt;9 观察者        &lt;/p&gt;
      
    
    </summary>
    
      <category term="pdf" scheme="http://yoursite.com/categories/pdf/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/pdf/js/"/>
    
      <category term="js模式" scheme="http://yoursite.com/categories/pdf/js/js%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>JS模式-5：对象创建模式</title>
    <link href="http://yoursite.com/pdf/js/js%E6%A8%A1%E5%BC%8F/5_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/pdf/js/js模式/5_对象创建模式/</id>
    <published>2019-04-05T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.400Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.4.5 星期五 19:09</p><p>$PS: 自检<br>1) namespace的缺点及解决方式：沙箱模式；<br>2) 私有属性和方法，静态成员（公共和私有，互通），特权方法，揭示模式<br>构造函数私有，对象字面量私有<br>3) 模块模式，声明依赖<br>4) 链式，对象常量，method()  </p><p>5.1 命名空间模式<br>5.2 声明依赖关系<br>5.3 私有属性和方法<br>5.4 模块模式<br>5.5 沙箱模式<br>5.6 静态成员<br>5.7 对象常量<br>5.8 链模式<br>5.9 method()方法        </p><a id="more"></a><p>P96-P123    </p><h2 id="5-1-命名空间模式-namesapce"><a href="#5-1-命名空间模式-namesapce" class="headerlink" title="5.1 命名空间模式  namesapce"></a>5.1 命名空间模式  namesapce</h2><p><code>MYAPP.modules.module1=...</code>  (大写也用于常量)<br>缺点：<br>1) 跟多前缀字符；2）全局一个实例意味任何部分代码都可以修改该实例；3）长嵌套名字更长/慢的属性解析查询<br>沙箱模式可解决  </p><h3 id="1-通用命名空间函数"><a href="#1-通用命名空间函数" class="headerlink" title="1 通用命名空间函数"></a>1 通用命名空间函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0 不安全</span></span><br><span class="line"><span class="keyword">var</span> MYAPP=&#123;&#125;</span><br><span class="line"><span class="comment">// 1 修正</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> MYAPP === <span class="string">'undefined'</span>) &#123;<span class="keyword">var</span> MYAPP=&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> MYAPP=MYAPP || &#123;&#125;</span><br><span class="line"><span class="comment">// 2 附加检查会迅速导致大量重复代码  </span></span><br><span class="line">MYAPP.namesapce=<span class="function"><span class="keyword">function</span>(<span class="params">ns_sting</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts=ns_sting.split(<span class="string">'.'</span>), parent=MYAPP, i </span><br><span class="line">    <span class="comment">// 剥离最前面的冗余全局变量</span></span><br><span class="line">    <span class="keyword">if</span>(parts[<span class="number">0</span>] === <span class="string">'MYAPP'</span>) parts=parts.slice(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;parts.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> parent[parts[i]] === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            parent[parts[i]]=&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        parent=parent[parent[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3 使用</span></span><br><span class="line"><span class="comment">// 3-1 返回给一个变量</span></span><br><span class="line"><span class="keyword">var</span> module2=MYAPP.namesapce(<span class="string">'MYAPP.modules.module2'</span>)</span><br><span class="line"><span class="comment">// 3-2 忽略MYAPP</span></span><br><span class="line">MYAPP.namesapce(<span class="string">'modules.module2'</span>)</span><br><span class="line"><span class="comment">// 3-3 长命名空间</span></span><br><span class="line">MYAPP.namesapce(<span class="string">'once.upon.a.time.there.was.this.long.nested.property'</span>)</span><br></pre></td></tr></table></figure><h2 id="5-2-声明依赖关系"><a href="#5-2-声明依赖关系" class="headerlink" title="5.2 声明依赖关系"></a>5.2 声明依赖关系</h2><p>优点： 1)显示的  2）更容易发现并解析  3）解析快；4）更小代码量（uglify）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event=YAHOO.util.Event,</span><br><span class="line">        dom=YAHOO.util.dom</span><br><span class="line">     <span class="comment">// 使用 event 和 dom 变量     </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-3-私有属性和方法"><a href="#5-3-私有属性和方法" class="headerlink" title="5.3 私有属性和方法"></a>5.3 私有属性和方法</h2><p>没有像java的表示私有、保护、或公共属性和方法 ；所有都是公共的  </p><h3 id="1-私有成员"><a href="#1-私有成员" class="headerlink" title="1 私有成员"></a>1 私有成员</h3><p>闭包closure<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gadget</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">'iPod'</span></span><br><span class="line">    <span class="keyword">this</span>.getName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> name&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-特权方法-Privileged-Method"><a href="#2-特权方法-Privileged-Method" class="headerlink" title="2 特权方法 Privileged Method"></a>2 特权方法 Privileged Method</h3><p>可以访问私有成员的公共方法</p><h3 id="3-私有性失效"><a href="#3-私有性失效" class="headerlink" title="3 私有性失效"></a>3 私有性失效</h3><p>返回私有变量是一个引用类型<br>1）只返回需要的值类型；2）shallow/deep copy  </p><h3 id="4-对象字面量以及私有性"><a href="#4-对象字面量以及私有性" class="headerlink" title="4 对象字面量以及私有性"></a>4 对象字面量以及私有性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myobj</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">'my,oh my'</span></span><br><span class="line">    myobj=&#123;</span><br><span class="line">        getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 特权方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 实现2: 模式模块module pattern </span></span><br><span class="line"><span class="keyword">var</span> myobj=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">'dsfs'</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="5-原型和私有性"><a href="#5-原型和私有性" class="headerlink" title="5 原型和私有性"></a>5 原型和私有性</h3><p>避免都创建一遍，故添加到构造函数的prototype属性；还可以隐藏共享的私有成员<br>组合：构造函数的私有属性和对象字面量的私有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gadget</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有成员</span></span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">'iPod '</span></span><br><span class="line">    <span class="comment">// 共有函数</span></span><br><span class="line">    <span class="keyword">this</span>.getName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Gadget.prototype=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> browser=<span class="string">'my webki'</span></span><br><span class="line">    <span class="comment">// 共有原型成员</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getBrowser:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> browser&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="6-私有方法揭示为公共方法"><a href="#6-私有方法揭示为公共方法" class="headerlink" title="6 私有方法揭示为公共方法"></a>6 私有方法揭示为公共方法</h3><p>揭示模块模式  revealing module rattern<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarray</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> astr=<span class="string">'sdfs'</span>,toString=<span class="built_in">Object</span>.prototype.toString  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">haystack,needle</span>)</span>&#123;&#125;</span><br><span class="line">    myarray=&#123;isArray,indexOf,<span class="attr">inArray</span>:indexOf&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>如果发生意外，比如公共indexOf,但私有的indexOf安全，因此inArray继续正常  </p><h2 id="5-4-模块模式-Module-pattern"><a href="#5-4-模块模式-Module-pattern" class="headerlink" title="5.4 模块模式 Module pattern"></a>5.4 模块模式 Module pattern</h2><p>多种模式组合：命名空间，即时函数，私有和特权成员，声明依赖<br>使用广泛.js没有包package的特殊语法,该模式提供一种创建自包含非耦合代码片段。。<br>黑盒功能，并且可根据需求添加，替换，删除这些模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 命名空间</span></span><br><span class="line">MYAPP.namesapce(<span class="string">'MYAPP.utilities.array'</span>)</span><br><span class="line"><span class="comment">// 2 定义该模块:可提供私有作用域的即时函数，返回一个对象，具有公共接口的实际模块</span></span><br><span class="line">MYAPP.utilities.array=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 4 顶部可 声明司有关，任何依赖</span></span><br><span class="line">    <span class="keyword">var</span> ubbj=MYAPP.utilities.object </span><br><span class="line">    <span class="keyword">var</span> ops=<span class="built_in">Object</span>.prototype.toString </span><br><span class="line">    <span class="comment">// 2 返回对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 3 公共接口添加方法</span></span><br><span class="line">        inArray:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        isArray:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="揭示模块模式"><a href="#揭示模块模式" class="headerlink" title="揭示模块模式"></a>揭示模块模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.utilities.array=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="keyword">var</span> ubbj=MYAPP.utilities.object, </span><br><span class="line">    <span class="keyword">var</span> ops=<span class="built_in">Object</span>.prototype.toString, </span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    inArray=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    isArray=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 揭示公有api</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 3 公共接口添加方法</span></span><br><span class="line">        inArray,</span><br><span class="line">        isArray,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="创建构造函数的模块"><a href="#创建构造函数的模块" class="headerlink" title="创建构造函数的模块"></a>创建构造函数的模块</h3><p>比前面创建对象更为方便。任然使用模式模块，只不过返回函数，而不是对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.namesapce(<span class="string">'MYAPP.utilities.Array'</span>)</span><br><span class="line">MYAPP.utilities.Array=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 依赖，私有属性和方法  </span></span><br><span class="line">    <span class="keyword">var</span> ubbj=MYAPP.utilities.object ,</span><br><span class="line">    <span class="keyword">var</span> ops=<span class="built_in">Object</span>.prototype.toString ,</span><br><span class="line">    Constr;</span><br><span class="line">    <span class="comment">// 可选的一次性初始化过程</span></span><br><span class="line">    <span class="comment">// 公有API——构造函数</span></span><br><span class="line">    Constr=<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements=<span class="keyword">this</span>.toArray(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 公有API——原型</span></span><br><span class="line">    Constr.property=&#123;</span><br><span class="line">        <span class="keyword">constructor</span>:MYAPP.utilities.Array,</span><br><span class="line">        version:'2.0',</span><br><span class="line">        toArray:function(obj)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回要分配给新命名空间的构造函数</span></span><br><span class="line">    <span class="keyword">return</span> Constr</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> MYAPP.utilities.Array(obj)</span><br></pre></td></tr></table></figure></p><h3 id="将全局变量导入到模块中"><a href="#将全局变量导入到模块中" class="headerlink" title="将全局变量导入到模块中"></a>将全局变量导入到模块中</h3><p>可将参数传递到包装了模块的即时函数中。可以是任何值，通常是全局变量，甚至是全局对象本身的引用。加速解析，因为导入的变量成为了该函数的局部变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYAPP.utilities.Array=(<span class="function"><span class="keyword">function</span>(<span class="params">app,global</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)(MYAPP,<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></p><h2 id="5-5-沙箱模式"><a href="#5-5-沙箱模式" class="headerlink" title="5.5 沙箱模式"></a>5.5 沙箱模式</h2><p>解决命名空间模式缺点：无法是同一程序两个版本运行一个页面；需要长字符及解析</p><h3 id="使用"><a href="#使用" class="headerlink" title="$使用"></a>$使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Sandbox(<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;   &#125;)</span><br><span class="line">Sandbox([<span class="string">'ajax'</span>,<span class="string">'event'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;   &#125;)</span><br><span class="line">Sandbox(<span class="string">'ajax'</span>,<span class="string">'event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;   &#125;)</span><br><span class="line">Sandbox(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;   &#125;)</span><br><span class="line"><span class="comment">// ### 多次/嵌套</span></span><br><span class="line">Sandbox(<span class="string">'dom'</span>,funciton(box)&#123;</span><br><span class="line">    Sandbox(<span class="string">'ajax'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="$实现"></a>$实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 1 增加模块,接受当前实例box做为参数，还可向该实例添加额外的属性和方法  </span></span><br><span class="line">Sandbox.modules=&#123;&#125;</span><br><span class="line">Sandbox.modules.dom=<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;box.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;</span><br><span class="line">Sandbox.modules.event=<span class="function"><span class="keyword">function</span>(<span class="params">box</span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// ### 2 实现构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sandbox</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args=<span class="built_in">Array</span>.property.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    callback=args.pop()</span><br><span class="line">    <span class="comment">// 模块可做为数组，或单独传递</span></span><br><span class="line">    modules=(args[<span class="number">0</span>]&amp;&amp;<span class="keyword">typeof</span> args[<span class="number">0</span>]===<span class="string">'string'</span>) ? args:args[<span class="number">0</span>]</span><br><span class="line">    ,i </span><br><span class="line">    <span class="comment">// 确保做为构造函数调用</span></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Sandbox))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sandbox(modules,callback)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向`this`添加的属性</span></span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">1</span></span><br><span class="line">    <span class="comment">// 向该核心 this 对象添加模块</span></span><br><span class="line">    <span class="keyword">if</span>(!modules||modules===<span class="string">'*'</span>)&#123;</span><br><span class="line">        modules=[]</span><br><span class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> Sandbox.modules)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Sandbox.modules.hasOwnProperty(i))&#123;</span><br><span class="line">                modules.push(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化所需模块 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;modules.length;i+=<span class="number">1</span>)&#123;</span><br><span class="line">        Sandbox.modules[modules[i]](<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// call the callback</span></span><br><span class="line">    callback(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ### 需要的任何原型属性</span></span><br><span class="line">Sandbox.property=&#123;</span><br><span class="line">    nam:<span class="string">'My application'</span>,</span><br><span class="line">    version:<span class="string">'1.0'</span>,</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6-静态成员"><a href="#5-6-静态成员" class="headerlink" title="5.6 静态成员"></a>5.6 静态成员</h2><p>从一个实例到另一个实例都不会发生改变的属性和方法。  </p><h3 id="共有静态成员"><a href="#共有静态成员" class="headerlink" title="共有静态成员"></a>共有静态成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Gadget=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line">Gadget.isShiny=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// ### 1.1 有时可以是静态方法与实例一起工作; 需要注意this；</span></span><br><span class="line">Gadget.prototype.isShiny=Gadget.isShiny</span><br><span class="line"><span class="comment">// ### 2 instance有助于确认是谁调用的</span></span><br><span class="line">Gadget.isShiny=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Gadget)&#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向原型添加一个普遍方法</span></span><br><span class="line">Gadget.property.isShiny=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Gadget.isShiny.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="私有静态成员"><a href="#私有静态成员" class="headerlink" title="私有静态成员"></a>私有静态成员</h3><p>1) 同一个构造函数创建的所有对象共享该成员<br>2) 构造函数外部不可访问该成员<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Gadget=(funciton()&#123;</span><br><span class="line">    <span class="keyword">var</span> counter=<span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> NewGadget=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        counter+=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特权方法</span></span><br><span class="line">    NewGadget.property.getLastId=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 覆盖该构造函数</span></span><br><span class="line">    <span class="keyword">return</span> NewGadget</span><br><span class="line">    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h2 id="5-7-对象常量"><a href="#5-7-对象常量" class="headerlink" title="5.7 对象常量"></a>5.7 对象常量</h2><p>创建一个私有属性，提供取值方法，不提供设置函数。（矫枉过正）<br>大写命名约定<br>$PS: 现在js已经有常量的概念了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：声明常量与内置属性不冲突，比如toString，hasOwnProperty等，通过hasOwnproperty检查；</span></span><br><span class="line">    <span class="comment">// 并且加前缀，确保 名称之间互相适应</span></span><br><span class="line"><span class="keyword">var</span> constant=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> constants=&#123;&#125;</span><br><span class="line">    ,ownProp=<span class="built_in">Object</span>.property.hasOwnProperty</span><br><span class="line">    ,allowed=&#123;<span class="attr">string</span>:<span class="number">1</span>,<span class="attr">number</span>:<span class="number">1</span>,<span class="attr">boolean</span>:<span class="number">1</span>&#125;</span><br><span class="line">    ,prefix=(<span class="built_in">Math</span>.random()+<span class="string">'_'</span>).slice(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>:function(name,value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.isDefined(name)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span>(!ownProp.call(allowed,<span class="keyword">typeof</span> value)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            constants[prefix+name] = value</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        isDefined:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ownProp.call(constants,prefix+name)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span>:function(name)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.isDefined(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> constants[prefix+name]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//  使用:检测，set，尝试更改，取值</span></span><br><span class="line">constant.isDefined(<span class="string">'maxwidt'</span>)</span><br><span class="line">constant.set(<span class="string">'maxwith'</span>,<span class="number">450</span>)</span><br></pre></td></tr></table></figure></p><h2 id="5-8-链模式-Chaining-Pattern"><a href="#5-8-链模式-Chaining-Pattern" class="headerlink" title="5.8 链模式  Chaining Pattern"></a>5.8 链模式  Chaining Pattern</h2><p>当创建的方法返回五任何意义的值时，可以返回this<br>优缺点<br>缺点：难以调试，步骤太多，无法知道哪一个方法失效。 火车失事 train wreck</p><h2 id="5-9-method-方法"><a href="#5-9-method-方法" class="headerlink" title="5.9 method()方法"></a>5.9 method()方法</h2><p>以类思考的程序员，是js更加类似类。作者回想起来并不值得推荐<br>语法糖：向编程语言中添加便利的功能  </p><p>然而实例向this添加方法的机制效率低下，每一实例都重新创建，并且耗更多内存空间。也就产生prototype<br>许多程序员对prototype陌生，因此将其隐藏在方法之后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">&#125;.</span><br><span class="line">    method(<span class="string">'getName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name&#125;).</span><br><span class="line">    method(<span class="string">'setName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name=name;<span class="keyword">return</span> <span class="keyword">this</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现.this指构造函数   </span></span><br><span class="line"><span class="keyword">if</span>(type <span class="keyword">of</span> <span class="built_in">Function</span>.property.method!==<span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="built_in">Function</span>.property.method=<span class="function"><span class="keyword">function</span>(<span class="params">name,implemention</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.property[name]=implemention</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p style="text-align:right">21:06</p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-align:right&quot;&gt;2019.4.5 星期五 19:09&lt;/p&gt;

&lt;p&gt;$PS: 自检&lt;br&gt;1) namespace的缺点及解决方式：沙箱模式；&lt;br&gt;2) 私有属性和方法，静态成员（公共和私有，互通），特权方法，揭示模式&lt;br&gt;构造函数私有，对象字面量私有&lt;br&gt;3) 模块模式，声明依赖&lt;br&gt;4) 链式，对象常量，method()  &lt;/p&gt;
&lt;p&gt;5.1 命名空间模式&lt;br&gt;5.2 声明依赖关系&lt;br&gt;5.3 私有属性和方法&lt;br&gt;5.4 模块模式&lt;br&gt;5.5 沙箱模式&lt;br&gt;5.6 静态成员&lt;br&gt;5.7 对象常量&lt;br&gt;5.8 链模式&lt;br&gt;5.9 method()方法        &lt;/p&gt;
    
    </summary>
    
      <category term="pdf" scheme="http://yoursite.com/categories/pdf/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/pdf/js/"/>
    
      <category term="js模式" scheme="http://yoursite.com/categories/pdf/js/js%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Jquery学习</title>
    <link href="http://yoursite.com/sum/jsplus/jquery%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/jsplus/jquery学习/</id>
    <published>2019-03-18T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.420Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.3.18 </p><h2 id="jQuery封装"><a href="#jQuery封装" class="headerlink" title="jQuery封装"></a>jQuery封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前置符号：`+ - !`</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global,factory</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    window.$=window.jQuery=function(</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init()</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.fn=jQuery.prototype=&#123;</span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.fn.init.prototype=jQuery.prototype</span><br><span class="line"></span><br><span class="line">)&#123;&#125;))</span><br></pre></td></tr></table></figure><h2 id="bind-on-实现"><a href="#bind-on-实现" class="headerlink" title="bind/on 实现"></a>bind/on 实现</h2><h2 id="ready"><a href="#ready" class="headerlink" title="ready()"></a>ready()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><p>setInterval实现，通过setStyle（好像是这个函数）</p><h2 id="extend-扩展"><a href="#extend-扩展" class="headerlink" title="extend 扩展"></a>extend 扩展</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.3.18 &lt;/p&gt;


&lt;h2 id=&quot;jQuery封装&quot;&gt;&lt;a href=&quot;#jQuery封装&quot; class=&quot;headerlink&quot; title=&quot;jQuery封装&quot;&gt;&lt;/a&gt;jQuery封装&lt;/h2&gt;&lt;fig
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Fetch使用</title>
    <link href="http://yoursite.com/sum/jsplus/fetch%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/fetch使用/</id>
    <published>2019-03-14T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.420Z</updated>
    
    <content type="html"><![CDATA[<p>MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p><a id="more"></a><p style="text-align:right">2019.3.14 四 16:01</p><!-- MDN:[使用 Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)     --><h2 id="json-格式数据处理"><a href="#json-格式数据处理" class="headerlink" title="json 格式数据处理"></a>json 格式数据处理</h2><p>最佳实践是在使用之前检查 content type 是否正确，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(myRequest).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.headers.get(<span class="string">"content-type"</span>) === <span class="string">"application/json"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// process your JSON further</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, we haven't got JSON!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line"><span class="keyword">if</span>(response.ok) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.blob();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="为什么我不再使用Fetch-API开发应用"><a href="#为什么我不再使用Fetch-API开发应用" class="headerlink" title="为什么我不再使用Fetch API开发应用"></a>为什么我不再使用Fetch API开发应用</h2><p><a href="https://zhuanlan.zhihu.com/p/28206325" target="_blank" rel="noopener">[为什么我不再使用Fetch API开发应用]</a>        </p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>我们需要加上一句 response.json() 来从 response 流对象中获取数据，但这只是一点很小的代价。   </p><p>之前我提到的所有 http 工具库会把状态码错误的响应（比如404，500等）当成一个错误来处理，而 fetch 与 XMLHttpRequest 一样，只会在网络错误的情况下（比如 IP 地址无法解析，服务器不可访问或是不允许 CORS）reject 这个 promise。       </p><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>fetch 是一种底层的 api，它不会在我们处理这种一般情形时带来便利，你必须清楚明确地使用它。首先，JSON 必须先转换成字符串，然后还要设置 ‘Content-Type’ 头部，指出实体的类型是 JSON，否则服务器会把它当做普通的字符串处理。<br>$PS: axios 有instance       </p><h3 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h3><p>我的服务器使用基于 cookie 的认证方式，而 fetch 默认情况下不会发送 cookie<br>我的服务器需要知道客户端是否可以处理 JSON 数据<br>我的服务器在另一个子域名下，而 fetch 默认不启用 CORS<br>为了防御 XSRF 攻击，我的服务器要求每一个请求都必须带上一个 X-XSRF-TOKEN 头部，来证明请求确实是从我自己的页面发出的</p><h2 id="fetch-api不带cookie"><a href="#fetch-api不带cookie" class="headerlink" title="fetch api不带cookie"></a>fetch api不带cookie</h2><blockquote><p>fetch API 的一个特性是默认不发送 Cookie，只有设置适当的 credentials 时才会发送。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://example.com'</span>, &#123;</span><br><span class="line">    cache: <span class="string">'no-cache'</span>, <span class="comment">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class="line">    credentials: <span class="string">'same-origin'</span>, <span class="comment">// include, same-origin, *omit</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>[<a href="http://www.qingpingshan.com/jb/javascript/263396.html" target="_blank" rel="noopener">Fetch API Cookie问题</a>       </p><p>翻阅 Fetch Standard 才寻求到了答案。</p><p>A request has an associated credentials mode, which is “omit”, “same-origin”, or “include”. Unless stated otherwise, it is “omit”.</p><p>Request’s credentials mode controls the flow of credentials during a fetch. Credentials are HTTP cookies, TLS client certificates, and authentication entries. When request’s mode is “navigate”, its credentials mode is assumed to be “include” and fetch does not currently account for other values. If HTML changes here, this standard will need corresponding changes.</p><p>好嘛，Fetch 默认 credentials: ‘omit’ 。 那我们吧参数改成 include 就万事大吉了。</p><p>至于为什么 Fetch API 不带 cookie 一起飞，具体原因官方文档也有描述。</p><p>When request’s credentials mode is “include” it has an impact on the functioning of the CORS protocol other than including credentials in the fetch.</p><p>将 credentials 模式设置为 “include” 虽然能让请求包含 HTTP cookies TLS client certificates 和 authentication entries 这些内容，但它会影响到 CORS 协议的功能。</p><p>A request’s credentials mode is not necessarily observable on the server; only when credentials exist for a request can it be observed by virtue of the credentials being included. Note that even so, a CORS-preflight request never includes credentials.</p><p>请求的 credentials 模式没有必要对服务器可见，只有当 credentials 存在的时候才让服务器知晓。即便如此，CORS 预请求不会带上 credentials 。</p><p>The server developer therefore needs to decide whether or not responses “tainted” with credentials can be shared. And also needs to decide if requests necessitating a CORS-preflight request can include credentials. Generally speaking, both sharing responses and allowing requests with credentials is rather unsafe, and extreme care has to be taken to avoid the confused deputy problem.</p><p>开发人员应该自主决定是否确定要在请求内代上 credentials 。总之，无论是分发 responses 还是响应 requests，要带上 credentials 都是不安全的，开发人员需要非常注意这一点以避开这个派生问题。</p><p style="text-align:right">16:36</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MDN:&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Shell命令</title>
    <link href="http://yoursite.com/sum/os/shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/sum/os/shell命令/</id>
    <published>2019-02-17T00:00:00.000Z</published>
    <updated>2020-02-05T10:23:51.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h1><ol><li>设置编码格式：工具条上有个地球的图标 可以设置，可能需要重启   </li><li>二次/跳转登录：在属性设置中，连接  通过 登录脚本  可以添加跳转或者进入文件夹(设置expect和send)。<br>复杂的还可以自己的写登录脚本（好像是.vbs）    </li><li>传输文件，比如imp.tar.gz 经常会失败，可能是因为跳转机二次登录，导致文件传输中把文件中某些信息 当做指令了。所以上传不成功<br>先传到跳转机，然后再同步到线上/st机器 <code>rsync -avP ./imp.tar.gz 10.5.60.199:/var/www/cim/</code> </li><li>删除乱码/中文文件或目录<br>ls -i //列出文件节点<br>find ./ -inum XXX（节点号） -print -exec rm -rf {} \;    //删除节点号文件<br>find . -inum XXXX（节点号） -exec mv {} file.txt \；   //其实我们还可以执行这个命令，修改乱码文件名为正常文件名  </li></ol><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>查找文件中内容<br>grep -nir “.top-bg” ./</p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><p>刷新DNS缓存： ipconfig /flushDNS<br>    ipconfig /all    </p><p>nslookup mix.dangdang.com   </p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><!-- [Xshell常用命令及使用教程](https://www.2cto.com/kf/201711/696431.html)    --><!-- \# [Linux系统下常见的Xshell运行命令——Xshell入门必看](https://blog.csdn.net/u013058618/article/details/55006518)      --><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>查看的命令是cat host.xml；      </p><p>ls命令会把文件横向显示，看着不舒服，ll和ls -l是一样的效果，建议使用ll，因为它最简单    </p><p>在Linux系统下执行文件我们需要使用的的 ./文件名.sh</p><p>授权命令，chmod u+x <em>.sh  给sh文件授权，当然了我们也可以将</em>替换为具体的文件名</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>上传 rz -y (当前路径); 下载 sz file.text(只不过默认情况下是不能使用的，我们需要使用yum install lrzsz来安装)</p><p>$PS: 输入rz命令，看是否已经安装了lrzsz，如果没有安装则执行  yum   -y  install  lrzsz命令进行安装。<br>$PS: 另外：可以下载工具xftp去传输文件。<br>下载后，从xshell点击新建文件传输按钮，就会打开xftp工具，来更专业的传输文件。<br>快捷键：Ctrl+Alt+F</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>sz filename<br>sz filename1 filename2<br>sz dir/*</p><p>文件夹及文件夹下的所有文件的复制【cp -r 源文件目录 目标文件目录】<br>[root@localhost /]# cp -r /soft/bak/* /home/bak</p><h3 id="文件编辑"><a href="#文件编辑" class="headerlink" title="文件编辑"></a>文件编辑</h3><p>编辑的命令是vi host.xml，然后按下i，进入修改模式，要不然就只是看，<br>如果我们突然不想修改时，按下ESC 然后在命令行中写下 :q! ? 然后回车就接触编辑，<br>如果我们是编辑完了需要保存，也需要按下ESC，然后输入 :wq 回车。<br>总结一下就是：编辑文件 vi，按下i进行编辑 ??保存结束编辑 ESC :wq 回车 ??不保存结束编辑 ESC :q! 回车</p><p>$PS: 使用vim  </p><p>设置编码格式：工具条上有个地球的图标 可以设置，可能需要重启   </p><h3 id="文件统计"><a href="#文件统计" class="headerlink" title="文件统计"></a>文件统计</h3><p><a href="https://www.linuxidc.com/Linux/2011-02/32390.htm" target="_blank" rel="noopener">Linux获取一个文件的行数或者字符数</a><br>wc命令主要对文件中的行数、字符数、字节数进行计数</p><p>-c     统计字节数，除非指定 -k 标志。如果指定 -k 标志，wc 命令统计字符数。<br>-k     统计字符数。指定 -k 标志等同于指定 -klwc 标志。如果把 -k 标志同其它标志一起使用，那么必须包含 -c 标志。否则，将会忽略 -k 标志。<br>-l     统计行数。<br>-m     统计字符数。这个标志不能与 -c 标志一起使用。<br>-w     统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。</p><p>1字节（Byte）= 8位（bit）<br>在ASCII码中，一个英文字母（不分大小写）占一个字节的空间，<br>中文字符占两个字节</p><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>1.作用<br>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。 </p><p>2.格式<br>grep [options]  </p><h3 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h3><p>du -sh /var/www/*<br>df -h </p><p style="text-align:right">2019.6.26 星期三 23：21 $1</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>在Linux下使用Crontab来添加定时任务执行shell文件．shell文件有数据库备份命令<br>查看/etc/crontab文件: vim  /etc/crontab     </p><p>除了root用户之外的用户可以执行crontab配置计划任务。<br>所有用户定义的crontab存储在目录/var/spool/cron下，任务会以创建者的身份被执行。<br>要以特定用户创建一个crontab，先以该用户登录，执行命令crontab -e，系统会启动在VISUAL或者EDITOR中指定的的编辑软件编辑crontab。<br>文件内容与/etc/crontab格式相同。示例如下：     </p><p>crontab文件格式：<br><code>*           *        *        *        *           command</code><br>minute（1-59）（或/1表示每分钟）    hour（1-23）（0表示0点）<br>day（1-31）   month（1-12）   week（1-6, 0表示周日）     </p><p>30 3,12 <em> </em> *  /home/test.sh     </p><p>#### crontab命令选项:<br>-u 指定一个用户<br>-l 列出(某个用户的)任务计划<br>-r 删除(某个用户的)任务<br>-e 编辑(某个用户的)任务</p><p>查看执行的日志 cat /var/log/cron</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.  查看调度任务</span><br><span class="line">crontab -l //列出当前的所有调度任务</span><br><span class="line">crontab -l -u jp   //列出用户jp的所有调度任务</span><br><span class="line"></span><br><span class="line">11. 删除任务调度工作</span><br><span class="line">crontab -r   //删除所有任务调度工作</span><br><span class="line"></span><br><span class="line">12. 任务调度执行结果的转向</span><br><span class="line">例1：每天5：30执行ls命令，并把结果输出到/jp/test文件中</span><br><span class="line">30 5 * * * ls &gt;/jp/test 2&gt;&amp;1</span><br><span class="line">    注：2&gt;&amp;1 表示执行结果及错误信息。</span><br></pre></td></tr></table></figure><p>#### 特殊符号<br>1.星号(<em>)表示取值范围内的所有值。例如，</em>在hour的位置，表示每小时执行一次。<br>2.连字符(-)表示一个范围。例如，8-12表示8、9、10、11、12。<br>3.逗号(,)表示分割指定的数值。例如：3,5-7,9表示3,5,6,7,9。<br>4.正斜杠(/)表示步进值。例如，分钟的位置为<em>/5，表示每五分钟执行一次<br>5.“？”只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 </em><br>6.“#”字符：表示该月第几个周X。6#3表示该月第3个周五<br>7.“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X<br>8.“W”字符：指定离给定日期最近的工作日(周一到周五)   </p><p>#### 2 检查是否安装了crontab，<br>如果提示未安装请自行安装，crontab安装包在系统光盘里面的pacekage文件夹crontabs安装包。<br><code>rpm -qa | grep conrtab</code></p><p>#### crontab服务的启动关闭<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sbin/service crond start //启动服务</span><br><span class="line">/sbin/service crond stop //关闭服务</span><br><span class="line">/sbin/service crond restart //重启服务</span><br><span class="line">/sbin/service crond reload //重新载入配置</span><br></pre></td></tr></table></figure></p><p>#1 <a href="https://www.cnblogs.com/zoulongbin/p/6187238.html" target="_blank" rel="noopener">[crontab命令概念]</a><br>#### 全局配置文件：<br>crontab在/etc目录下面存在cron.hourly,cron.daily,cron.weekly,cron.monthly,cron.d五个目录和crontab,cron.deny二个文件。</p><p>cron.daily是每天执行一次的job<br>cron.weekly是每个星期执行一次的job<br>cron.monthly是每月执行一次的job<br>cron.hourly是每个小时执行一次的job<br>cron.d是系统自动定期需要做的任务<br>crontab是设定定时任务执行文件<br>cron.deny文件就是用于控制不让哪些用户使用Crontab的功能</p><p>#### <strong>**</strong>定时任务书写要领<strong>**</strong><br>要领1：定时任务要加注释<br>要领2：定时任务命令或脚本结尾加 &amp;&gt;/dev/null 或 &gt;/dev/null 2&gt;&amp;1 或 1&gt;/dev/null 2&gt;/dev/null<br>要领3：定时任务执行shell脚本前加/bin/sh，定时任务执行shell脚本不必添加执行权限<br>要领4：定时任务命令或程序尽量写到脚本里，定时任务只要执行脚本即可<br>         注意操作步骤：<br>　　（1）、命令行执行<br>　　（2）、编写脚本<br>　　（3）、测试脚本<br>　　（4）、设置定时任务</p><p>要领5：生产任务程序不要随意打印输出信息<br>要领6：定时任务执行的脚本要规范路径 (例如 /server/script)<br>要领7：配置定时任务要规范操作过程<br>要领8：定时任务执行特殊的字符需要进行转义，否则会报错，例如 百分号% 转义 \%<br>要领9：定时任务脚本中如果涉及使用到环境变量，必须在脚本中重新定义，不然，定时任务识别不了<br><!-- end #1 --></p><p>### 其他定时任务指令<br>1、at<br>命令at从文件或标准输入中读取命令并在将来的一个时间执行，只执行一次。at的正常执行需要有守护进程atd<br>2、crontab<br>命令crontab用来设置、移除、列出服务crond表格，crond服务的作用类似atd，区别的地方在于crond可以设置任务多次执行。相对来说比atd更常用。<br>3、systemd.timer<br>crond和atd服务基于分钟的，意思是说它们每分钟醒来一次检查是否有任务需要执行。如果有任务的执行需要精确到秒，crond和atd是无能为力的。在基于systemd的系统上，可以通过计时器systemd.timer来实现精确到秒的计划任务。  </p><p style="text-align:right">2019.6.27 00：12 $1</p><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p><a href="https://blog.csdn.net/u013107656/article/details/52438939" target="_blank" rel="noopener">【Linux】后台运行进程的命令</a><br>一、简介<br>Linux提供了fg和bg命令，可以轻松调度正在运行的任务</p><blockquote><p>Ctrl-Z 挂起程序<br>bg %n   把程序调度到后台执行，bg后面的数字为作业号<br>jobs 查看正在运行的任务<br>fg %n  把程序调回到前台运行，这样在控制台上就只能等待任务完成<br>kill %n 管理后台的任务  </p></blockquote><p>【3】Linux后台运行进程有两种方式<br>command &amp;：后台运行，关掉终端会停止运行<br>nohup command &amp;：后台运行，关掉终端会继续运行</p><p>二、&amp;<br>【1】可以使用&amp;命令，把作业放到后台执行，实际是放入到一个作业队列中<br>jobs -l 可以查看当前的后台进程</p><p>三、nohup<br>【1】可以使用nohup命令运行进程，并且在退出帐号后可以继续运行，nohup就是不挂起(no hang up)<br>【2】一般形式：nohup command &amp;<br>【3】使用nohup命令提交作业，在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件</p><p><a href="https://blog.csdn.net/cqbamboo/article/details/44706011" target="_blank" rel="noopener">[Linux 的常用后台运行指令]</a><br>指令或符號        使用範例            說明<br>&amp;    % fasta &amp;    在背景中執行程式<br>jobs    % jobs    顯示送入背景之工作<br>kill    % kill (job#)    移除指定之批次工作<br>ctrl-z         暫停前景中執行之程式<br>bg    % bg    將暫停之工作送入背景執行<br>fg    % fg    將背景之工作拉回前景執行</p><p>5.如何结束一个job<br>如果你想结束一个正在运行的job，可以使用中断键（interrupt key，通常是Ctrl-C）来结束。<br>如果上面方法无法正常工作，那么你可以考虑使用Ctrl-Z（Suspend key）来暂停job，使用’jobs’命令来查看这个job的job number,然后通过’kill’命令来结束这个job.    </p><p>Linux下Ctrl-Z、Ctrl-C、Ctrl-D的具体含义<br>初识Linux，可能会对Ctrl-Z、Ctrl-C、Ctrl-D的具体含义混淆不清，因为这三个按键都能够在一些情况下使shell退出正在执行的命令或程序，提示用户输入下一个命令，从而对初识者造成假象，认为三个键的功能一样，但具体情况下哪个按键能起作用、起什么作用却拿捏不定。</p><p>Ctrl-Z：该键是linux下面默认的挂起键（Suspend Key），当键入Ctrl-Z时，系统会将正在运行的程序挂起，然后放到后台，同时给出用户相关的job信息。此时，程序并没有真正的停止，用户可以通过使用fg、bg命令将job恢复到暂停前的上下文环境，并继续执行。  </p><p>Ctrl-C：该键是linux下面默认的中断键（Interrupt Key），当键入Ctrl-C时，系统会发送一个中断信号给正在运行的程序和shell。具体的响应结果会根据程序的不同而不同。一些程序在收到这个信号后，会立即结束并推出程序，一些程序可能会忽略这个中断信号，还有一些程序在接受到这个信号后，会采取一些其他的动作（Action）。当shell接受到这个中断信号的时候，它会返回到提示界面，并等待下一个命令。  </p><p>Ctrl-D：该键是Linux下面标准输入输出的EOF。在使用标准输入输出的设备中，遇到该符号，会认为读到了文件的末尾，因此结束输入或输出。</p><h1 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h1><p>原文出自：<a href="http://www.hangge.com" target="_blank" rel="noopener">www.hangge.com</a>  转载请保留原文链接：<a href="https://www.hangge.com/blog/cache/detail_2499.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_2499.html</a><br>3，通过网络同步时间<br>（1）首先安装 ntpdate 命令：<br>yum install -y ntpdate</p><p>（2）接着执行如下命令开始同步：<br>ntpdate 0.asia.pool.ntp.org<br>若上面的时间服务器不可用，也可以改用如下服务器进行同步：<br>time.nist.gov<br>time.nuri.net<br>0.asia.pool.ntp.org<br>1.asia.pool.ntp.org<br>2.asia.pool.ntp.org<br>3.asia.pool.ntp.org</p><p>（3）最后执行如下命令将系统时间同步到硬件，防止系统重启后时间被还原。<br>hwclock –systohc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实用&quot;&gt;&lt;a href=&quot;#实用&quot; class=&quot;headerlink&quot; title=&quot;实用&quot;&gt;&lt;/a&gt;实用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;设置编码格式：工具条上有个地球的图标 可以设置，可能需要重启   &lt;/li&gt;
&lt;li&gt;二次/跳转登录：在属性设置中，连接  通过
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>X-Shell学习</title>
    <link href="http://yoursite.com/sum/os/x-shell%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/os/x-shell学习/</id>
    <published>2019-02-17T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.435Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2019.2.17 星期日 11:38</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p># <a href="https://www.cnblogs.com/perseverancevictory/p/4910145.html" target="_blank" rel="noopener">Xshell学习–菜鸟篇</a><br>1）关于Xshell<br>网上更多的资料里提到的SSH客户端是putty，因为简单、开源、免费。但是也正是由于功能过于简单，所以在这里推荐大家使用Xshell。<br>Xshell最初并不能免费使用，而且也没有带中文语言，所以导致用户非常少，但是现在已经可以免费安装并且能设置中文，相信使用的人会越来越多。    </p><p>简单说下个人认为Xshell的优点：<br>1，界面设计简洁，很人性化，用起来让人觉得很舒服。<br>2，支持标签，打开多个链接的时候很方便。<br>3，可以保存密码。（至于安全问题，见仁见智吧，个人觉得，如果能拿到保存在电脑上的密码，至少需要攻陷或者能够控制你的PC机，而这样的情况下，不管是每次登录都手工输入密码还是用密钥，结果都是一样的）<br>4，支持rz和sz命令，这两个命令在传输少量小文件时非常方便。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="快捷设置"><a href="#快捷设置" class="headerlink" title="快捷设置"></a>快捷设置</h3><ol><li>默认选中复制    </li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://www.2cto.com/kf/201711/696431.html" target="_blank" rel="noopener">Xshell常用命令及使用教程</a>   </p><h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h2><ol><li>跳转机登录/二次登录/自动执行脚本   </li></ol><h2 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h2><p>Xshell 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。<br>Xftp 是一个基于 MS windows 平台的功能强大的SFTP、FTP 文件传输软件。     </p><p>Xftp是一个功能强大的SFTP、FTP 文件传输软件。使用了 Xftp 以后，MS Windows 用户能安全地在 UNIX/Linux 和 Windows PC 之间传输文件。Xftp 能同时适应初级用户和高级用户的需要。它采用了标准的 Windows 风格的向导，它简单的界面能与其他 Windows 应用程序紧密地协同工作，此外它还为高级用户提供了众多强劲的功能特性。     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2019.2.17 星期日 11:38&lt;/p&gt;

&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;# &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux教程-Runoob</title>
    <link href="http://yoursite.com/w3/ser/linux%E6%95%99%E7%A8%8B-runoob/"/>
    <id>http://yoursite.com/w3/ser/linux教程-runoob/</id>
    <published>2019-02-16T00:00:00.000Z</published>
    <updated>2020-02-04T09:13:55.451Z</updated>
    
    <content type="html"><![CDATA[<p>toc and abstract.  </p><p>linux教程-runoob:<a href="http://www.runoob.com/linux/linux-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-tutorial.html</a><br><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux 命令大全</a>  </p><p style="text-align:right">2019.2.16 星期六 17:56</p><!-- $PS: 1.13 就学习了    --><p>Linux 英文解释为 Linux is not Unix。<br><a id="more"></a></p><p>1. Linux 简介<br>2. Linux 安装<br>3. Linux 系统启动过程<br>4. Linux 系统目录结构<br>5. Linux 忘记密码解决方法<br>6. Linux 远程登录<br>7. Linux 文件基本属性<br>8. Linux 文件与目录管理<br>9. Linux 用户和用户组管理<br>10. Linux 磁盘管理<br>11. Linux vi/vim<br>12. linux yum 命令  </p><h2 id="1-Linux-简介"><a href="#1-Linux-简介" class="headerlink" title="1 Linux 简介"></a>1 Linux 简介</h2><p>Linux内核最初只是由芬兰人李纳斯·托瓦兹（Linus Torvalds）在  </p><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。  </p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h3 id="Linux的发行版"><a href="#Linux的发行版" class="headerlink" title="Linux的发行版"></a>Linux的发行版</h3><p>Linux的发行版说简单点就是将Linux内核与应用软件做一个打包。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。    </p><h3 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h3><p>并且在服务器领域确定了地位，通常服务器使用LAMP（Linux + Apache + MySQL + PHP）或LNMP（Linux + Nginx+ MySQL + PHP）组合。   </p><p>### Linux vs Windows   </p><h2 id="2-Linux-安装"><a href="#2-Linux-安装" class="headerlink" title="2 Linux 安装"></a>2 Linux 安装</h2><h2 id="3-Linux-系统启动过程"><a href="#3-Linux-系统启动过程" class="headerlink" title="3 Linux 系统启动过程"></a>3 Linux 系统启动过程</h2><p>可以分为5个阶段：<br>1) 内核的引导。<br>2) 运行 init。<br>3) 系统初始化。<br>4) 建立终端 。<br>5) 用户登录系统。  </p><p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。<br>init 程序首先是需要读取配置文件 /etc/inittab。   </p><h2 id="4-Linux-系统目录结构"><a href="#4-Linux-系统目录结构" class="headerlink" title="4 Linux 系统目录结构"></a>4 Linux 系统目录结构</h2><p>### note1<br>在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。  </p><p>文件系统的最顶层是由根目录开始的，系统使用 / 来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。如此反复就可以构成一个庞大的文件系统。   </p><p>### note2<br>1) 系统启动必须<br>/boot：存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。<br>/etc：存放所有的系统需要的配置文件和子目录列表，更改目录下的文件可能会导致系统不能启动。<br>/lib：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。<br>/sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中    </p><p>2) 指令集合：<br>/bin：存放着最常用的程序和指令<br>/sbin：只有系统管理员能使用的程序和指令。   </p><p>3) 外部文件管理：<br>/dev ：Device(设备)的缩写, 存放的是Linux的外部设备。注意：在Linux中访问设备和访问文件的方式是相同的。<br>/media：类windows的其他设备，例如U盘、光驱等等，识别后linux会把设备放到这个目录下。<br>/mnt：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。  </p><p>4) 临时文件：<br>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。<br>/lost+found：一般情况下为空的，系统非法关机后，这里就存放一些文件。<br>/tmp：这个目录是用来存放一些临时文件的。    </p><p>5) 账户：<br>/root：系统管理员的用户主目录。<br>/home：用户的主目录，以用户的账号命名的。<br>/usr：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br>/usr/bin：系统用户使用的应用程序与指令。<br>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。<br>/usr/src：内核源代码默认的放置目录。    </p><p>6) 运行过程中要用：<br>/var：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。<br>/proc：管理内存空间！虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。   </p><p>7) 扩展用的：<br>/opt：默认是空的，我们安装额外软件可以放在这个里面。<br>/srv：存放服务启动后需要提取的数据（不用服务器就是空）  </p><h2 id="5-Linux-忘记密码解决方法"><a href="#5-Linux-忘记密码解决方法" class="headerlink" title="5 Linux 忘记密码解决方法"></a>5 Linux 忘记密码解决方法</h2><p>重新安装系统吗？当然不用！进入单用户模式更改一下root密码即可。  </p><h2 id="6-Linux-远程登录"><a href="#6-Linux-远程登录" class="headerlink" title="6 Linux 远程登录"></a>6 Linux 远程登录</h2><p>Linux系统中是通过ssh服务实现的远程登录功能，默认ssh服务端口号为 22。<br>Window系统上 Linux 远程登录客户端有SecureCRT, Putty, SSH Secure Shell等，本文以Putty为例来登录远程服务器。<br>$PS: 用 X-Shell  </p><h3 id="使用密钥认证机制远程登录linux"><a href="#使用密钥认证机制远程登录linux" class="headerlink" title="使用密钥认证机制远程登录linux"></a>使用密钥认证机制远程登录linux</h3><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定。<br>SSH 为建立在应用层和传输层基础上的安全协议。        </p><h2 id="7-Linux-文件基本属性"><a href="#7-Linux-文件基本属性" class="headerlink" title="7 Linux 文件基本属性"></a>7 Linux 文件基本属性</h2><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。<br>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：<br>dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot   </p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。<br>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。  </p><p>每个文件的属性由左边第一部分的10个字符来确定<br>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。<br>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。<br>对于 root 用户来说，一般情况下，文件的权限对其不起作用。   </p><p>当为[ d ]则是目录<br>当为[ - ]则是文件；<br>若是[ l ]则表示为链接文档(link file)；<br>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；<br>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</p><h3 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h3><p>1、chgrp：更改文件属组   chgrp [-R] 属组名 文件名<br>2、chown：更改文件属主，也可以同时更改文件属组  chown [–R] 属主名 文件名 ，chown [-R] 属主名：属组名 文件名<br>3、chmod：更改文件9个属性<br>Linux文件属性有两种设置方法，一种是数字，一种是符号。<br>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。<br>可以使用 u, g, o 来代表三种身份的权限！<br>此外， a 则代表 all，即全部的身份。读写的权限可以写成 r, w, x<br>+(加入)，-(除去)，=(设定)  </p><p>chmod [-R] xyz 文件或目录： chmod 777 .bashrc<br>chmod u=rwx,g=rx,o=r 文件名：  chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限  </p><p>将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限：chmod  a-x test1  </p><h2 id="8-Linux-文件与目录管理"><a href="#8-Linux-文件与目录管理" class="headerlink" title="8 Linux 文件与目录管理"></a>8 Linux 文件与目录管理</h2><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。<br>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。  </p><h3 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h3><p>接下来我们就来看几个常见的处理目录的命令吧：<br>ls: 列出目录  -a -d -l   $PS:-al<br>cd：切换目录 [相对路径或绝对路径]  $PS:~ 亦即是 /root 这个目录; cd ..<br>pwd：显示目前的目录 -P $PS: Print Working Directory<br>    &gt; 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail<br>    &gt; 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！<br>mkdir：创建一个新的目录 -m -p<br>    mkdir -p test1/test2/test3/test4  $PS:没办法直接创建此目录啊！要加参数 -p<br>    mkdir -m 711 test2<br>rmdir：删除一个空的目录  -p ：连同上一级『空的』目录也一起删除； $PS: 仅能删除空<br>cp: 复制文件或目录  -a==-pdr, -d,-f,-i,-l,-s,-u<br>rm: 移除文件或目录   -fir<br>mv: 移动文件与目录，或修改文件与目录的名称  -fiu<br>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。       </p><h3 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h3><p>Linux系统中使用以下命令来查看文件的内容：$PS: 参数自己查，可以用man命令<br>cat  由第一行开始显示文件内容<br>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！<br>nl   显示的时候，顺道输出行号！<br>more 一页一页的显示文件内容<br>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！<br>head 只看头几行<br>tail 只看尾巴几行<br>### note<br>1.Linux 链接概念<br>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln 命令产生硬链接。     </p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。…<br>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。   </p><p>软连接:符号连接（Symbolic Link）。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。…<br>A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。  </p><h2 id="9-Linux-用户和用户组管理"><a href="#9-Linux-用户和用户组管理" class="headerlink" title="9 Linux 用户和用户组管理"></a>9 Linux 用户和用户组管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。  </p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：<br>用户账号的添加、删除与修改。<br>用户口令的管理。<br>用户组的管理。</p><h3 id="一、Linux系统用户账号的管理"><a href="#一、Linux系统用户账号的管理" class="headerlink" title="一、Linux系统用户账号的管理"></a>一、Linux系统用户账号的管理</h3><p>useradd 选项 用户名<br>userdel 选项 用户名<br>usermod 选项 用户名:  修改帐号<br>passwd 选项 用户名:用户口令的管理,用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。  </p><h3 id="Linux系统用户组的管理"><a href="#Linux系统用户组的管理" class="headerlink" title="Linux系统用户组的管理"></a>Linux系统用户组的管理</h3><p>groupadd 选项 用户组<br>groupdel 用户组<br>groupmod 选项 用户组<br>newgrp root:如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。  </p><h3 id="三、与用户账号有关的系统文件"><a href="#三、与用户账号有关的系统文件" class="headerlink" title="三、与用户账号有关的系统文件"></a>三、与用户账号有关的系统文件</h3><p>1、/etc/passwd文件是用户管理工作涉及的最重要的一个文件。<br>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。<br>这个文件对所有用户都是可读的。它的内容类似下面的例子：<br>/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：<br>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<br>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。<br>8)系统中有一类用户称为伪用户（pseudo users）。<br>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。<br>常见的伪用户如下所示：<br>bin 拥有可执行的用户命令文件<br>sys 拥有系统文件<br>adm 拥有帐户文件<br>uucp UUCP使用<br>lp lp或lpd子系统使用<br>nobody NFS使用<br>#### 拥有帐户文件<br>### 四、添加批量用户  </p><h2 id="10-Linux-磁盘管理"><a href="#10-Linux-磁盘管理" class="headerlink" title="10 Linux 磁盘管理"></a>10 Linux 磁盘管理</h2><p>Linux磁盘管理常用三个命令为df、du和fdisk。<br>df：列出文件系统的整体磁盘使用量   [-ahikHTm]<br>du：检查磁盘空间使用量      [-ahskm]   :du [-ahskm] 文件或目录名称<br>    Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的<br>fdisk：用于磁盘分区   [-l]   </p><p>磁盘格式化: mkfs [-t 文件系统格式] 装置文件名<br>磁盘检验: fsck [-t 文件系统] [-ACay] 装置名称<br>磁盘挂载: mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点<br>磁盘卸除: umount [-fn] 装置文件名或挂载点    </p><h2 id="11-Linux-vi-vim"><a href="#11-Linux-vi-vim" class="headerlink" title="11 Linux vi/vim"></a>11 Linux vi/vim</h2><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。<br>但是目前我们使用比较多的是 vim 编辑器。   </p><h3 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。  </p><h3 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h3><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：<br>1) 命令模式：用户刚刚启动 vi/vim，便进入了命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。<br>以下是常用的几个命令：<br>i 切换到输入模式，以输入字符。<br>x 删除当前光标所在处的字符。<br>: 切换到底线命令模式，以在最底一行输入命令。    </p><p>2) 若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。     </p><p>3) 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。<br>在命令模式下按下:（英文冒号）就进入了底线命令模式。<br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>q 退出程序<br>w 保存文件<br>按ESC键可随时退出底线命令模式。 </p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p>### vi/vim 使用实例  </p><h4 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h4><p>第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等<br>移动光标的方法<br>你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键<br>搜索替换<br>删除、复制与贴上   </p><p>第二部份：一般模式切换到编辑模式的可用的按钮说明<br>进入输入或取代的编辑模式<br>第三部份：一般模式切换到指令行模式的可用的按钮说明<br>指令行的储存、离开等指令<br>vim 环境的变更  </p><h2 id="12-linux-yum-命令"><a href="#12-linux-yum-命令" class="headerlink" title="12 linux yum 命令"></a>12 linux yum 命令</h2><p>yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。<br>基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。      </p><p>yum [options] [command] [package …]  </p><p style="text-align:right">20:15</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;toc and abstract.  &lt;/p&gt;
&lt;p&gt;linux教程-runoob:&lt;a href=&quot;http://www.runoob.com/linux/linux-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/linux/linux-tutorial.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-command-manual.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux 命令大全&lt;/a&gt;  &lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;2019.2.16 星期六 17:56&lt;/p&gt;

&lt;!-- $PS: 1.13 就学习了    --&gt;
&lt;p&gt;Linux 英文解释为 Linux is not Unix。&lt;br&gt;
    
    </summary>
    
      <category term="w3" scheme="http://yoursite.com/categories/w3/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/w3/ser/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
