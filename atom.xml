<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-14T07:02:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Iview 实践</title>
    <link href="http://yoursite.com/sum/jsplus/iview%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/iview实践/</id>
    <published>2021-07-14T00:00:00.000Z</published>
    <updated>2021-07-14T07:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.7.14 星期三  14：57 </p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="datePicker"><a href="#datePicker" class="headerlink" title="datePicker"></a>datePicker</h3><p>编辑的时候，日期显示有问题。（因为是表单提交，使用了v-model）<br><!-- 解决：把日期用 new Date() 转一下。 --></p><p>value:    日期，可以是 JavaScript 的 Date，例如 new Date()，也可以是标准的日期格式，点击右边查看</p><blockquote><p>注意：value 使用 v-model 时，值是 Date 类型，可以配合 @on-change 使用</p></blockquote><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.7.14 星期三  14：57 &lt;/p&gt;



&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2 id=&quot;组件&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="http://yoursite.com/sum/ser/nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/sum/ser/nginx配置/</id>
    <published>2021-07-12T00:00:00.000Z</published>
    <updated>2021-09-04T08:06:52.924Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.7.12 星期一  ： </p><h2 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h2><!-- \# [nginx配置http跳转https](https://www.cnblogs.com/is-possible/p/12524115.html)[Nginx的https配置记录以及http强制跳转到https的方法梳理](https://cloud.tencent.com/developer/article/1026994) --><h3 id="rewrite方法"><a href="#rewrite方法" class="headerlink" title="rewrite方法"></a>rewrite方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name shfxx.test.com;</span><br><span class="line">    rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /usr/local/nginx/conf/ssl/START-smartcampus-org-cn.pem;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/conf/ssl/START-smartcampus-org-cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:RC4-SHA:!aNULL</span><br><span class="line">:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS;    ssl_session_cache builtin:1000 shared:SSL:10m;   </span><br><span class="line">    server_name shfxx.test.com;</span><br><span class="line">    access_log /data/wwwroot/sfzxxx/logs/access_campus.log combined;</span><br><span class="line">    error_log /data/wwwroot/sfzxxx/logs/error_campus.log;</span><br><span class="line">    root /data/wwwroot/sfzxxx/campus;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">location / &#123;</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">        rewrite ^/admin/(.*)$ /admin.php/$1 last;</span><br><span class="line">        rewrite ^/(.*)$ /index.php/$1 last;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">        #fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(.*)$;</span><br><span class="line">        fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、nginx的497状态码"><a href="#三、nginx的497状态码" class="headerlink" title="三、nginx的497状态码"></a>三、nginx的497状态码</h3><p>释：当此虚拟站点只允许https访问时，当用http访问时nginx会报出497错误码<br><!-- 思路 --><br>利用error_page命令将497状态码的链接重定向到<a href="https://test.com这个域名上" target="_blank" rel="noopener">https://test.com这个域名上</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen       192.168.1.11:443;  #ssl端口  </span><br><span class="line">    listen       192.168.1.11:80;   #用户习惯用http访问，加上80，后面通过497状态码让它自动跳到443端口  </span><br><span class="line">    server_name  test.com;  </span><br><span class="line">    #为一个server&#123;......&#125;开启ssl支持  </span><br><span class="line">    ssl                  on;  </span><br><span class="line">    #指定PEM格式的证书文件   </span><br><span class="line">    ssl_certificate      /etc/nginx/test.pem;   </span><br><span class="line">    #指定PEM格式的私钥文件  </span><br><span class="line">    ssl_certificate_key  /etc/nginx/test.key;  </span><br><span class="line">      </span><br><span class="line">    #让http请求重定向到https请求   </span><br><span class="line">    error_page 497  https://$host$uri?$args;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="四、index-html刷新网页"><a href="#四、index-html刷新网页" class="headerlink" title="四、index.html刷新网页"></a>四、index.html刷新网页</h3><p>上述两种方法均会耗费服务器的资源，<!-- 我们用curl访问baidu.com试一下，看百度的公司是如何实现baidu.com向www.baidu.com的跳转 --><br><!-- 可以看到百度很巧妙的利用meta的刷新作用，将baidu.com跳转到www.baidu.com.因此我们可以基于http://test.com的虚拟主机路径下也写一个index.html，内容就是http向https的跳转  --></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url=https://test.com/"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen 192.168.1.11:80;  </span><br><span class="line">    server_name test.com;  </span><br><span class="line">      </span><br><span class="line">    location / &#123;  </span><br><span class="line">                #index.html放在虚拟主机监听的根目录下  </span><br><span class="line">        root /srv/www/http.test.com/;  </span><br><span class="line">    &#125;  </span><br><span class="line">        #将404的页面重定向到https的首页  </span><br><span class="line">    error_page  404 https://test.com/;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="同一域名映射"><a href="#同一域名映射" class="headerlink" title="同一域名映射"></a>同一域名映射</h3><!-- \# [nginx目录路径重定向的方法，同一域名映射到其他目录](https://www.copylian.com/technology/332.html#) --><p>1、nginx修改root映射<br>2、通过nginx rewrite内部跳转实现访问重定向<br>3、nginx设置别名alias映射实现<br>4、通过nginx的permanent 301绝对跳转实现<br>5、通过判断uri实现页面跳转</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h5 id="location路径设置"><a href="#location路径设置" class="headerlink" title="location路径设置"></a>location路径设置</h5><!-- \# [nginx 反向代理location路径设置](https://blog.csdn.net/king_way/article/details/94831420) --><h5 id="一-location匹配路径末尾没有"><a href="#一-location匹配路径末尾没有" class="headerlink" title="一. location匹配路径末尾没有 /"></a>一. location匹配路径末尾没有 /</h5><p>此时proxy_pass后面的路径必须和location设置的路径一致：</p><p>location /index<br>{<br>   proxy_redirect off;<br>   proxy_set_header        Host $host;<br>   proxy_set_header        X-Real-IP $remote_addr;<br>   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_pass <a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a>;<br>}</p><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><h5 id="二-location匹配路径末尾有"><a href="#二-location匹配路径末尾有" class="headerlink" title="二. location匹配路径末尾有 /"></a>二. location匹配路径末尾有 /</h5><p>此时proxy_pass后面的路径需要分为以下四种情况讨论：</p><h6 id="proxy-pass后面的路径只有域名且最后没有-："><a href="#proxy-pass后面的路径只有域名且最后没有-：" class="headerlink" title="proxy_pass后面的路径只有域名且最后没有 /："></a>proxy_pass后面的路径只有域名且最后没有 /：</h6><p>location /index/<br>{<br>   proxy_redirect off;<br>   proxy_set_header        Host $host;<br>   proxy_set_header        X-Real-IP $remote_addr;<br>   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_pass <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>;<br>}</p><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><h6 id="proxy-pass后面的路径只有域名同时最后有-："><a href="#proxy-pass后面的路径只有域名同时最后有-：" class="headerlink" title="proxy_pass后面的路径只有域名同时最后有 /："></a>proxy_pass后面的路径只有域名同时最后有 /：</h6><p>location /index/<br>{<br>   proxy_redirect off;<br>   proxy_set_header        Host $host;<br>   proxy_set_header        X-Real-IP $remote_addr;<br>   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_pass <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>;<br>}</p><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></p><h6 id="proxy-pass后面的路径还有其他路径但是最后没有-："><a href="#proxy-pass后面的路径还有其他路径但是最后没有-：" class="headerlink" title="proxy_pass后面的路径还有其他路径但是最后没有 /："></a>proxy_pass后面的路径还有其他路径但是最后没有 /：</h6><p>location /index/<br>{<br>   proxy_redirect off;<br>   proxy_set_header        Host $host;<br>   proxy_set_header        X-Real-IP $remote_addr;<br>   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_pass <a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a>;<br>}</p><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/testindex.html" target="_blank" rel="noopener">http://localhost:8080/testindex.html</a></p><h6 id="proxy-pass后面的路径还有其他路径同时最后有-："><a href="#proxy-pass后面的路径还有其他路径同时最后有-：" class="headerlink" title="proxy_pass后面的路径还有其他路径同时最后有 /："></a>proxy_pass后面的路径还有其他路径同时最后有 /：</h6><p>location /index/<br>{<br>   proxy_redirect off;<br>   proxy_set_header        Host $host;<br>   proxy_set_header        X-Real-IP $remote_addr;<br>   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_pass <a href="http://localhost:8080/test/" target="_blank" rel="noopener">http://localhost:8080/test/</a>;<br>}</p><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><!-- 软萌切黑:第一条，我就没设置成一致过10 月前回复软萌切黑:以我的经验，最后两种是没有区别的 --><h2 id="跨域header"><a href="#跨域header" class="headerlink" title="跨域header"></a>跨域header</h2><!-- \#1 [Nginx配置跨域请求 Access-Control-Allow-Origin *](https://blog.csdn.net/qq_27008807/article/details/78877877) --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">    ; add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://domain:port&apos; always;</span><br><span class="line">    ; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">  add_header Access-Control-Allow-Headers &quot;Origin, X-Requested-With, Content-Type, Accept&quot;;</span><br><span class="line">  add_header Access-Control-Allow-Methods &quot;GET, POST, OPTIONS&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- 2. Access-Control-Allow-Headers 是为了防止出现以下错误：`Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.`这个错误表示当前请求Content-Type的值不被支持。其实是我们发起了”application/json”的类型请求导致的。这里涉及到一个概念：预检请求（preflight request）,请看下面”预检请求”的介绍。3. Access-Control-Allow-Methods 是为了防止出现以下错误：`Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.`发送”预检请求”时，需要用到方法 OPTIONS ,所以服务器需要允许该方法。 --><!-- End: #1 --><!-- \#2 [Nginx指定多个域名跨域配置](https://blog.csdn.net/u014589884/article/details/108041695) --><h3 id="2-Nginx配置域名跨域多个域名"><a href="#2-Nginx配置域名跨域多个域名" class="headerlink" title="2.Nginx配置域名跨域多个域名"></a>2.Nginx配置域名跨域多个域名</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        set $cors &apos;&apos;;</span><br><span class="line">        if ($http_origin ~* &quot;^http://deomain01:port$&quot;) &#123;</span><br><span class="line">            set $cors $http_origin;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($http_origin ~* &quot;^http://deomain02:port$&quot;) &#123;</span><br><span class="line">            set $cors $http_origin;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($http_origin ~* &quot;^http://deomain002:port$&quot;) &#123;</span><br><span class="line">            set $cors $http_origin;</span><br><span class="line">        &#125;</span><br><span class="line">        location /live&#123;</span><br><span class="line">                  ...</span><br><span class="line">                add_header &apos;Access-Control-Allow-Origin&apos; &apos;$cors&apos;;</span><br><span class="line">                add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">                # 为预检请求加的header</span><br><span class="line">                add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE&apos;;</span><br><span class="line">                #为预检请求加的header</span><br><span class="line">                add_header &apos;Access-Control-Allow-Headers&apos; &apos;*&apos;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><!-- $http_origin这个格式是nginx取请求中header的XXX的值的。这里取的是origin,而一般跨域请求都会将请求的来源放在origin中（浏览器会往跨域请求的header上面加origin这个header）$ cors 变量获取想要的跨域域名并赋值到 “add_header ‘Access-Control-Allow-Origin’ ‘$cors’”中。 --><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">map $http_origin $cors_list&#123;</span><br><span class="line">    default  http://aaa.cn;</span><br><span class="line">    &quot;~ http://bbb.cn&quot;  http://bbb.cn;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8089;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location /live&#123;</span><br><span class="line">              ...</span><br><span class="line">            add_header &apos;Access-Control-Allow-Origin&apos; &apos;$cors_list&apos;;</span><br><span class="line">            add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">            # 为预检请求加的header</span><br><span class="line">            add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE&apos;;</span><br><span class="line">            #为预检请求加的header</span><br><span class="line">            add_header &apos;Access-Control-Allow-Headers&apos; &apos;*&apos;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>map指令是ngx_http_map_module模块提供的，默认情况下nginx有加载这个模块。</p><p>语法: map $var1 $var2 {…}<br>默认值: -<br>配置段: http </p><p>map为一个变量设置的映射表。映射表由两列组成，匹配模式和对应的值。<br>在map块里的参数指定了源变量值和结果值的对应关系。</p><p>default: 没有匹配结果将使用的默认值。如果没有设置default，将会用一个空的字符串作为默认的结果。</p><p>匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用(‘~’)。</p><p>注意：在nginx.conf配置文件配置跨域时，记得清除客户端如浏览器缓存，否则会出现配置没生效的情况。<br><!-- End: #2 --></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>#3 <a href="https://blog.csdn.net/agonie201218/article/details/112562252" target="_blank" rel="noopener">Nginx配置跨域请求 Access-Control-Allow-Origin *</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">                 if ($http_origin ~* (http?://.*\.aliuncle\.top$)) &#123;</span><br><span class="line">                        add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line">                &#125;</span><br><span class="line">                index index.php;</span><br><span class="line">                try_files $uri $uri/ /index.php?$args;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>正则匹配三级域名</p><!-- [Nginx配置跨域请求 Access-Control-Allow-Origin *](https://blog.csdn.net/agonie201218/article/details/112562252)$_PS: 上面3快内容的总和 --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.7.12 星期一  ： &lt;/p&gt;



&lt;h2 id=&quot;配置https&quot;&gt;&lt;a href=&quot;#配置https&quot; class=&quot;headerlink&quot; title=&quot;配置https&quot;&gt;&lt;/a&gt;配置https&lt;/h2
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Babel使用</title>
    <link href="http://yoursite.com/sum/jsplus/babel%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/babel使用/</id>
    <published>2021-07-07T00:00:00.000Z</published>
    <updated>2021-09-04T15:50:34.259Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021. 星期  ： </p><p><a href="https://zhuanlan.zhihu.com/p/84799735" target="_blank" rel="noopener">Babel7 中 @babel/preset-env 的使用</a><br>@babel/preset-env<br>@babel/polyfill<br>@babel/polyfill 和 @babel/preset-env 的关系</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021. 星期  ： &lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84799735&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel7 中 @
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Swf文件介绍</title>
    <link href="http://yoursite.com/sum/others/swf%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/sum/others/swf文件/</id>
    <published>2021-07-07T00:00:00.000Z</published>
    <updated>2021-09-04T15:50:46.303Z</updated>
    
    <content type="html"><![CDATA[<p>swf(shock wave flash)是Macromedia（现已被ADOBE公司收购）公司的动画设计软件Flash的专用格式，被广泛应用于网页设计、动画制作等领域，swf文件通常也被称为Flash文件。<br>swf普及程度很高，现在超过99%的网络使用者都可以读取swf档案。这个档案格式由FutureWave创建，后来伴随着一个主要的目标受到Macromedia支援：创作小档案以播放动画。<br>计划理念是可以在任何操作系统和浏览器中进行，并让网络较慢的人也能顺利浏览。swf 可以用Adobe Flash Player打开，浏览器必须安装Adobe Flash Player插件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;swf(shock wave flash)是Macromedia（现已被ADOBE公司收购）公司的动画设计软件Flash的专用格式，被广泛应用于网页设计、动画制作等领域，swf文件通常也被称为Flash文件。&lt;br&gt;swf普及程度很高，现在超过99%的网络使用者都可以读取s
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Node测试基础</title>
    <link href="http://yoursite.com/sum/ser/node%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/sum/ser/node测试基础/</id>
    <published>2021-07-05T00:00:00.000Z</published>
    <updated>2021-07-09T15:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>万法皆学问。<br>那就简单处理。</p><p style="text-align:right"> 2021.7.5 星期一  00：08 </p><p>“测试驱动开发”（TDD：Test-Driven Development）</p><!-- [如何做接口测试？](https://www.sohu.com/a/333829601_216613) --><!-- ![测试几大分类](../../images/测试分类.png) --><p><a href="https://images2015.cnblogs.com/blog/77835/201604/77835-20160415180746270-1459814613.png" target="_blank" rel="noopener">测试大分类</a><br>业务功能：正常场景，异常场景<br>边界分析：<br>性能测试：响应时间，吞吐量，并发，资源使用率（cpu，内存，网络传输，io）<br>安全测试：信息加密，sql 注入</p><h1 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h1><!-- [什么是接口测试？怎样做接口测试？](https://blog.csdn.net/weixin_42273775/article/details/81868184)[什么是接口测试？怎样做接口测试？——软件测试圈](http://quan.51testing.com/pcQuan/article/117089)扫盲内容： --><p>1.什么是接口？<br>2.接口都有哪些类型？<br>3.接口的本质是什么？<br>4.什么是接口测试？<br>5.问什么要做接口测试？<br>6.怎样做接口测试？<br>7.接口测测试点是什么？<br>8.接口测试都要掌握哪些知识？<br>9.其他相关知识？</p><h2 id="接口分类"><a href="#接口分类" class="headerlink" title="接口分类"></a>接口分类</h2><!-- \# [接口测试 | 接口测试入门](https://zhuanlan.zhihu.com/p/263387082) --><!-- 二.接口的种类和分类 --><p>主要包含三种测试：<br>Web接口测试，<br>应用程序接口测试，<br>数据库测试。</p><p>外部接口，内部接口：上层服务于下层服务，同级服务。常见的接口分类http：get，post，delete，put</p><p>系统对外的接口：比如你要从别的网站或服务器上获取资源或信息，别人肯定不会把数据库共享给你，他只能给你提供一个他们写好的方法来获取数据，你引用他提供的接口就能使用他写好的方法，从而达到数据共享的目的。</p><p>程序内部的接口：方法与方法之间，模块与模块之间的交互，程序内部抛出的接口，<!-- 比如bbs系统，有登录模块、发帖模块等等，那你要发帖就必须先登录，那么这两个模块就得有交互，它就会抛出一个接口，供内 --></p><p>实际上意义就是UI界面到数据库之间，数据流经过的所有过程。</p><h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><!-- \# [接口测试流程及用例设计](https://zhuanlan.zhihu.com/p/73711479) --><ol><li>分析接口文档和需求文档</li><li>编写接口测试计划</li><li>编写接口测试用例</li><li>接口测试执行</li><li>输出接口测试报告。</li></ol><h3 id="接口用例设计原则"><a href="#接口用例设计原则" class="headerlink" title="接口用例设计原则"></a>接口用例设计原则</h3><p>接口测试采用的方法其实与黑盒测试一致的，甚至可以把接口测试理解为没有界面的功能测试。</p><h3 id="确定用例的覆盖率"><a href="#确定用例的覆盖率" class="headerlink" title="确定用例的覆盖率"></a>确定用例的覆盖率</h3><!-- [接口测试流程](https://blog.csdn.net/enemy_sprites/article/details/103519958) --><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>接口测试工具还有个最近挺火的apipost，</p><!-- \# [接口测试及常用接口测试工具](https://www.cnblogs.com/feng0815/p/7509541.html) --><p>接口测试的工具很多，比如 postman、RESTClient、jmeter、loadrunner、SoapUI等，本人首推的测试工具是postman和jmeter，接下来就简单介绍下如何使用这两款工具进行接口测试，其他工具本次暂不介绍。</p><p>1）、Postman是谷歌的一款接口测试插件，它使用简单，支持用例管理，支持get、post、文件上传、响应验证、变量管理、环境参数管理等功能，可以批量运行，并支持用例导出、导入。</p><p>jmeter是一款100%纯Java编写的免费开源的工具，它主要用来做性能测试，相比loadrunner来说，它内存占用小，免费开源，轻巧方便、无需安装，越来越被大众所喜爱。</p><!-- [PostMan接口测试(很全面的接口测试教程) ](https://www.sohu.com/a/444225679_470023)市场上有很多优秀的，完善的接口测试工具，比如SoapUI，Postman，JMeter、yapi等，能够高效的帮助后端开发人员独立进行接口测试。这里使用Postman接口测试工具，分别介绍如何对GET请求和POST请求进行接口测试。[JMeter 接口测试 小试牛刀](https://www.cnblogs.com/wintest/p/11185898.html) --><h1 id="koa-单元测试"><a href="#koa-单元测试" class="headerlink" title="koa 单元测试"></a>koa 单元测试</h1><!-- [egg-单元测试](https://eggjs.org/zh-cn/core/unittest.html) --><p>所谓单元测试，就是通过测试单个代码单元以测试代码的单一功能，单元测试可以让开发人发现很多潜在的问题。<br>JS中测试框架一般使用：mocha 、chai ，如果你还需要测试接口的话，可能还需要 supertest 测试框架。</p><h2 id="开始测试-1"><a href="#开始测试-1" class="headerlink" title="开始测试"></a>开始测试</h2><h3 id="使用-jest-supertest-进行单元测试。"><a href="#使用-jest-supertest-进行单元测试。" class="headerlink" title="使用 jest+supertest 进行单元测试。"></a>使用 jest+supertest 进行单元测试。</h3><!-- \# [koa单元测试](https://blog.csdn.net/qq_45453266/article/details/108775757) --><!-- ## --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1数据模型测试 test/model.test.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户数据模型test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../src/db/model/User'</span>)</span><br><span class="line"></span><br><span class="line">test(<span class="string">'test user model attribute'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">//build会在内存模型中构建一个User对象，但不会提交到数据库中</span></span><br><span class="line">    <span class="keyword">const</span> user = User.build(&#123;</span><br><span class="line">        userName: <span class="string">'zhangsan'</span>,</span><br><span class="line">        password: <span class="string">'123456'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 验证各个属性</span></span><br><span class="line">    expect(user.userName).toBe(<span class="string">'zhangsan'</span>)</span><br><span class="line">    expect(user.password).toBe(<span class="string">'123456'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 http请求测试</span></span><br><span class="line"><span class="comment">//登录 test/user.test.js</span></span><br><span class="line">test(<span class="string">'login接口test'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> server.post(<span class="string">'/api/user/login'</span>).send(&#123;</span><br><span class="line">        userName,</span><br><span class="line">        password</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(res.body.errCode).toBe(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">//获取COOKIE,调用logout API</span></span><br><span class="line">    COOKIE = res.headers[<span class="string">'set-cookie'</span>].join(<span class="string">';'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用mocha-chai测试单元"><a href="#使用mocha-chai测试单元" class="headerlink" title="使用mocha + chai测试单元"></a>使用mocha + chai测试单元</h3><!-- \# [前端单元测试实践（koa篇）](https://www.codercto.com/a/88361.html) [前端单元测试实践（koa篇）](https://juejin.cn/post/6844903872079593486)[前端单元测试实践（koa篇）](https://juejin.cn/post/6844903872079593486)--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add.js'</span>); </span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect; </span><br><span class="line">describe(<span class="string">'加法函数的测试'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  it(<span class="string">'1 加 1 应该等于 2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.be.equal(<span class="number">2</span>); </span><br><span class="line">  &#125;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期</span></span><br><span class="line">describe(<span class="string">'test hook'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本组测试用例开始前会执行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本组测试用例结束后会执行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本组每个测试用例开始前会执行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本组每个测试用例结束后会执行</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中 describe 称为测试套件，表示一组相关的测试。 it 称为为测试用例，表示一个单独的测试。 describe 和 it 都是 mocha 自带的全局方法。<br>chai是一个断言库，用于判断源码的执行结果是否与预期结果一致，如果不一致就会抛出一个错误。 expect 是 chai 其中一个断言方法。</p><h4 id="单元测试的mock（模拟）"><a href="#单元测试的mock（模拟）" class="headerlink" title="单元测试的mock（模拟）"></a>单元测试的mock（模拟）</h4><p>mocha 中的 –require 参数用于置在运行每个测试脚本运行前引入一些前置模块。我们可以利用前置脚本 mock 全局变量，保证每个测试脚本都能使用mock后的全局变量。 上面的 setup.js 脚本模拟了 global.logger.info 方法，该方法什么都不做，只是为了程序不会报 undefined 错误。</p><p>对于数据库方法 getListFromDB ，可以使用 sinon 来实现mock。 sinon 的作用是替换代码中复杂的部分以简化代码，具体使用方式请参考sinon的官网。先来看看控制器的测试脚本：</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.当被测试的单元模块太大时，将模块拆分成功能单一、依赖更小的模块。<br>2.测试用例不是越多越好，而是越有效越好。<br>3.借助白盒测试的覆盖方法能体能测试代码的覆盖率。<br>4.当遇到一些无需测试或者难以测试的模块时，通过mock（模拟）替换这些模块。</p><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><blockquote><p>因为Koajs对ES6 generator的支持。所以在选择模块的时候需要选择相应的co封装模块。<br>mocha 和 co-mocha<br>chai<br>supertest 和 co-supertest</p></blockquote><!-- 至于 Mocha 和 Karma 的选择这里就不再讨论了 :) --><p>jasmine<br>jasmine是一个款测试工具，类似于mocha，通过它可以定义一些BDD/TDD的单元测试用例。</p><p>supertest<br>supertest是一款http的测试工具，可以用它来模拟http请求，并验证http请求的返回值。它最大的亮点是可以跟koa、express等框架无缝衔接。 </p><!-- \# [使用mocha编写node服务单元测试](https://cloud.tencent.com/developer/article/1651095) --><p>编写单元测试代码的流程基本就是 梳理代码流程 -&gt; 针对每一个分支编写单元测试 -&gt; 运行单测代码 -&gt; 查看测试覆盖率报告。</p><h3 id="mocha介绍"><a href="#mocha介绍" class="headerlink" title="mocha介绍"></a>mocha介绍</h3><p>mocha作为最流行的JavaScript测试框架之一，可以用于测试node.js服务和运行在浏览器环境下的js代码。</p><blockquote><p>Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun.<br>官方给它自己定义的三个特点是simple、flexible、fun。</p></blockquote><p>flexible是因为mocha本身不包含断言库、mock等功能，用户可以根据自己的需要灵活地选择所需要的额外功能。</p><h3 id="chai断言库"><a href="#chai断言库" class="headerlink" title="chai断言库"></a>chai断言库</h3><p>mocha可以搭配你喜欢的任何断言库，经常使用到的有chai断言库。</p><p>chai提供了多种风格语法去帮助我们判断函数的执行结果。上述例子中用的是assert语法，它是基于node的assert模块进行扩展。</p><p>简单来说，断言库就是帮助我们去判断某些变量是否符合我们的要求，并且在不符合时做出错误提示。</p><h3 id="nyc"><a href="#nyc" class="headerlink" title="nyc"></a>nyc</h3><p>nyc用于统计我们的单测代码测试覆盖率，使用起来也很简单：在测试脚本前加上nyc即可。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha"</span>,</span><br><span class="line">    <span class="attr">"coverage"</span>: <span class="string">"nyc npm run test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="superTest"><a href="#superTest" class="headerlink" title="superTest"></a>superTest</h3><h3 id="sinon"><a href="#sinon" class="headerlink" title="sinon"></a>sinon</h3><!-- 难以模拟的逻辑 --><p>在测试服务接口时，总会遇到一些难以模拟或者说不能随便执行的逻辑。<br>例如当我们需要对一个删除数据的接口进行测试时，我们不能真的去执行数据库删除操作来判断函数是否正常执行。这时候就需要引入sinon来帮助我们替换掉这些难以模拟的逻辑。</p><p>sinon库提供了三种功能：spies、stub和mock。</p><p>spies<br>spies功能顾名思义就是间谍函数，它能帮助我们去收集被监听函数的有关调用信息。spies作为sinon最简单的功能，它不会对被监听函数的执行过程造成任何影响，stub和mock功能都是基于spies实现的。</p><!-- [\# koa2 项目基本构建（参考）](https://www.jianshu.com/p/4a458e14cb73) 一个koa 项目实践。包含日志，测试等--><!-- 使用koa-generator生成koa2项目## 3 日志```jsmodule.exports = {    "appenders":    [        //错误日志        {            "category":"errorLogger",             //logger名称            "type": "dateFile",                   //日志类型            "filename": errorLogPath,             //日志输出位置            "alwaysIncludePattern":true,          //是否总是有后缀名            "pattern": "-yyyy-MM-dd-hh.log",      //后缀，每小时创建一个新的日志文件            "path": errorPath                     //自定义属性，错误日志的根目录        },        //响应日志        {            "category":"resLogger",            "type": "dateFile",            "filename": responseLogPath,            "alwaysIncludePattern":true,            "pattern": "-yyyy-MM-dd-hh.log",            "path": responsePath          }    ],    "levels":                                   //设置logger名称对应的的日志等级    {        "errorLogger":"ERROR",        "resLogger":"ALL"    },    "baseLogPath": baseLogPath                  //logs根目录}``` --><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p><!-- \# [单元测试](https://blog.csdn.net/qq_42886163/article/details/102633587) --><p>定义：单元测试（unit testing）是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作</p><p>单元测试从长期来看，可以提高代码质量，减少维护成本，降低重构难度。<br>但是从短期来看，加大了工作量，对于进度紧张的项目中的开发人员来说，可能会成为不少的负担。</p><h2 id="什么是单元测试"><a href="#什么是单元测试" class="headerlink" title="什么是单元测试"></a>什么是单元测试</h2><!-- \# [单元测试到底是什么？应该怎么做？](https://www.zhihu.com/question/28729261) --><!-- 作者：腾讯技术工程 --><p>我曾经认为，单元测试面向的是一个函数。任何走出一个函数的测试，都不是单元测试。 其实，对“单元”的定义取决于自己。</p><p>谷歌看到这种“百家争鸣”的现象，创立了自己的命名方式，只分为小型测试、中型测试和大型测试。<br>小型测试，针对单个函数的测试，关注其内部逻辑，mock所有需要的服务。小型测试带来优秀的代码质量、良好的异常处理、优雅的错误报告.<br>中型测试，验证两个或多个制定的模块应用之间的交互大型测试，也被称为“系统测试”或“端到端测试”。<br>大型测试在一个较高层次上运行，验证系统作为一个整体是如何工作的。<br><!-- 链接：https://www.zhihu.com/question/28729261/answer/1058317111 --><br>结论：我们的单元测试，既可以针对一个函数写case，也可以按照函数的调用关系串起来写case。 金字塔模型</p><p>Mike Cohn 在他的着作《Succeeding with Agile》一书中提出了“测试金字塔”这个概念。<br>在《单元测试的艺术》这本书提到一个案例：</p><h2 id="写好好单元测试"><a href="#写好好单元测试" class="headerlink" title="写好好单元测试"></a>写好好单元测试</h2><!-- \# [单元测试-一份如何写好单元测试的参考](https://cloud.tencent.com/developer/article/1388393) --><ol><li>测试数据外部化<br>测试数据大致分为两种：变化的和不变化的，对于不变的测试数据，我们完全可以写在单元测试用例代码中，也可以将数据外部化。</li><li>构建具有特定结果的测试</li><li>测试方面全面，设计的每一方面必须有一个测试用例：</li><li>测试用例请尽量简洁、简短</li><li>测试用例尽量快</li><li>每次运行单元测试时，请确保100%运行成功！</li><li>设计好你的测试</li><li>注意测试代码覆盖率</li><li>还有就是一些其他的注意点了，比如</li></ol><!-- 使用框架进行单元测试，比如Junit5如果其中的断言支持不满足你的需求也可以使用ASsertJ框架来丰富断言，Mockito进行Mock数据等 --><h2 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h2><!-- \# [什么单元测试、执行单元测试的目的、单元测试环境、单元测试的测试策略](https://www.cnblogs.com/zhang-da/p/12291531.html) --><p>执行单元测试的目的：发现模块内部逻辑、语法、算法和功能错误。</p><p>单元测试主要是基于白盒测试：<br>验证代码与设计相符度。<br>发现设计和需求中存在错误。<br>发现在编码过程中引入的错误。</p><h3 id="单元测试环境"><a href="#单元测试环境" class="headerlink" title="单元测试环境"></a>单元测试环境</h3><p>单元本身不是一个独立的程序，一个完整的可运行的软件系统有若干个单元组成，所以必须为每个单元测试开发驱动单元和桩单元。</p><p>驱动单元（Driver）：所测函数的主程序，它接收测试数据，并把数据传递给所测试单元，最后再输出实际测试结果，当被测单元能完成相关单元时，也可以不需要驱动单元。<br>桩单元（Stub）：用来代替所测单元调用的子单元。</p><h3 id="单元测试的测试策略"><a href="#单元测试的测试策略" class="headerlink" title="单元测试的测试策略"></a>单元测试的测试策略</h3><p>孤立的测试策略<br>自顶向下测试测试策略<br>自底向上的测试策略</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;万法皆学问。&lt;br&gt;那就简单处理。&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2021.7.5 星期一  00：08 &lt;/p&gt;


&lt;p&gt;“测试驱动开发”（TDD：Test-Driven Development）&lt;/p&gt;
&lt;!-- [如何做接口测试？
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="koa.js" scheme="http://yoursite.com/tags/koa-js/"/>
    
  </entry>
  
  <entry>
    <title>Js复制内容-Navigator</title>
    <link href="http://yoursite.com/sum/js/js%E5%A4%8D%E5%88%B6%E5%86%85%E5%AE%B9-navigator/"/>
    <id>http://yoursite.com/sum/js/js复制内容-navigator/</id>
    <published>2021-07-04T00:00:00.000Z</published>
    <updated>2021-09-04T08:31:33.438Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.7  </p><h2 id="剪切功能"><a href="#剪切功能" class="headerlink" title="剪切功能"></a>剪切功能</h2><p>Navigator.clipboard： <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/clipboard" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/clipboard</a><br>只有在用户事先授予网站或应用对剪切板的访问许可之后，才能使用异步剪切板读写方法。许可操作必须通过取得权限 Permissions API 的 “clipboard-read” 和/或 “clipboard-write” 项获得。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">navigator.clipboard.readText().then(</span><br><span class="line">  clipText =&gt; <span class="built_in">document</span>.querySelector(<span class="string">".cliptext"</span>).innerText = clipText);;</span><br></pre></td></tr></table></figure><!-- \# [[Chrome 66 新增异步剪贴板API]](https://zhuanlan.zhihu.com/p/34698155) --><p>在过去的几年里我们只能使用 document.execCommand 来操作剪贴板。不过，这种操作剪贴板的操作是同步的，并且只能读取和写入 DOM。<br>现在 Chrome 66 已经支持了新的 Async Clipboard API，作为 execCommand 替代品。<br>这个新的 Async Clipboard API 还可以使用 Promise 来简化剪贴板事件并将它们与 Drag-&amp;-Drop API 一起使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ## 复制：将文本写入剪贴板</span></span><br><span class="line">navigator.clipboard.writeText(<span class="string">'要复制的文本'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文本已经成功复制到剪切板'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// This can happen if the user denies clipboard permissions:</span></span><br><span class="line">    <span class="comment">// 如果用户没有授权，则抛出异常</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'无法复制此文本：'</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 还可以使用异步函数 的 async 和 await：</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">copyPageUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> navigator.clipboard.writeText(location.href);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Page URL copied to clipboard'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Failed to copy: '</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ## 粘贴：从剪贴板中读取文本</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getClipboardContents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> navigator.clipboard.readText();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Pasted content: '</span>, text);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Failed to read clipboard contents: '</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ## 处理粘贴事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'paste'</span>, event =&gt; &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  navigator.clipboard.readText().then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Pasted text: '</span>, text);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="安全和权限"><a href="#安全和权限" class="headerlink" title="安全和权限"></a>安全和权限</h3><p>与许多新的 API 一样，<code>navigator.clipboard</code> 仅支持通过 HTTPS 提供的页面。<!-- 为了防止滥用，只有当页面处于活动选项卡时才允许剪贴板访问。活动选项卡中的页面可以在不请求权限的情况下写入剪贴板，但从剪贴板中读取始终需要权限。 --></p><!-- 为了更容易，复制和粘贴的两个新权限已添加到 Permissions API 中。当页面处于活动选项卡时，clipboard-write 权限会自动授予页面。当您通过从剪贴板中读取数据时，则必须要求获取 clipboard-read 权限。 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">navigator.permissions.query(&#123;</span><br><span class="line">  name: <span class="string">'clipboard-read'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">permissionStatus</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// permissionStatus.state 的值是 'granted'、'denied'、'prompt':</span></span><br><span class="line">  <span class="built_in">console</span>.log(permissionStatus.state);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听权限状态改变事件</span></span><br><span class="line">  permissionStatus.onchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(permissionStatus.state);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其他：<br><code>window.copy(&quot;this is a test string&quot;);</code><br>不过要注意，该方法的跨平台性不强，低版本的IE可能不支持</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.7  &lt;/p&gt;



&lt;h2 id=&quot;剪切功能&quot;&gt;&lt;a href=&quot;#剪切功能&quot; class=&quot;headerlink&quot; title=&quot;剪切功能&quot;&gt;&lt;/a&gt;剪切功能&lt;/h2&gt;&lt;p&gt;Navigator.clipboa
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Nodejs Orm 框架</title>
    <link href="http://yoursite.com/sum/ser/nodejs%20orm%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/sum/ser/nodejs orm框架/</id>
    <published>2021-06-26T00:00:00.000Z</published>
    <updated>2021-06-26T17:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.6.26 星期六  11：47 </p><h1 id="ORM-介绍"><a href="#ORM-介绍" class="headerlink" title="ORM 介绍"></a>ORM 介绍</h1><!-- \#1 [Node.js ORM框架 sequelize 入门](https://www.jianshu.com/p/07141d53f119) --><p>ORM（Object Relational Mapping，对象关系映射），是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术，通过描述对象和数据库之间映射的元数据，把程序中的对象自动持久化到关系数据库中。<br>它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了 。</p><p>ORM就是把业务实体中的对象与关系数据库中的关系数据关联起来。<br>对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。</p><p>ORM技术特点：</p><ol><li>提高了开发效率。ORM可以自动对Entity对象与数据库中的Table进行字段与属性的映射，所以我们实际可能已经不需要一个专用的、庞大的数据访问层。</li><li>ORM提供了对数据库的映射，不用sql直接编码，能够像操作对象一样从数据库获取数据。</li></ol><p>ORM的优缺点：</p><ol><li>性能影响。面向对象的处理方式会对性能造成影响</li><li>更多的系统层次会造成执行效率的降低。</li></ol><h2 id="常见框架"><a href="#常见框架" class="headerlink" title="常见框架"></a>常见框架</h2><p>常见的ORM框架</p><p>Java系列：<br>Apache OJB<br>Hibernate：目前最流行的开源ORM框架<br>iBatic<br>Mybatis</p><p>.Net系列：<br>NHibernate：面向.NET环境的对象/关系数据库映射工具<br>Linq to sql：适用于一些轻型的，小的ORM适用<br>EntitysCodeGenerate<br>PetaPoco</p><p>Node.js系列：<br>ORM2:<a href="https://github.com/dresende/node-orm2" target="_blank" rel="noopener">https://github.com/dresende/node-orm2</a><br>sequelize：本文要研究的框架,较常用<br>Knex.js:官网：<a href="https://knexjs.org/" target="_blank" rel="noopener">https://knexjs.org/</a><br>TypeORM:采用 TypeScript 编写，支持使用 TypeScript 或 Javascript（ES5，ES6，ES7） 开发。目标是保持支持最新的 Javascript 特性来帮助开发各种用户数据库的应用 - 不管是轻应用还是企业级的<br><!-- END: #1 --></p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><!-- \#3 [Nodejs之ORM框架](https://www.jianshu.com/p/0738e29d8af3) --><!-- \#3 [Nodejs之ORM框架](https://dumplingbao.github.io/2019/08/29/node-orm/) --><!-- java开发者目前主流的hibernate、mybatis很熟悉了，JDBC原始驱动的方式想必也不在成为主流了。下面介绍几款node的ORM框架，介绍之前先介绍ORM的两种模式： --><h2 id="ORM的两种模式"><a href="#ORM的两种模式" class="headerlink" title="ORM的两种模式"></a>ORM的两种模式</h2><p>Active Record 模式：活动记录模式，领域模型模式一个模型类对应关系型数据库中的一个表，模型类的一个实例对应表中的一行记录。这个不难理解，比较简单，但是不够灵活，再看另一种模式，比较一下</p><p>Data Mapper 模式：数据映射模式，领域模型对象和数据表是松耦合关系，只进行业务逻辑的处理，和数据层解耦。需要一个实体管理器来将模型和持久化层做对应，这样一来，灵活性就高，当然复杂性也增加了。</p><p>所以说，Data Mapper模式对业务代码干预少，Active Record模式直接在对象上CRUD，代码编写也更方便，这就像hibernate和mybatis两种框架，如果想深入研究，可以了解一下贫血与充血领域对象的平衡。</p><p>有这么一句话很认同，ActiveRecord更加适合快速开发成型的短期简单项目，而DataMapper更加适合长线开发，保持业务逻辑与数据存储独立的复杂项目。除此之外，技术选型还要考虑其他因素，比如项目历史背景等等。</p><h2 id="TypeORM"><a href="#TypeORM" class="headerlink" title="TypeORM"></a>TypeORM</h2><p>TypeORM 是一个 ORM 框架，详细介绍见 TypeORM 官方介绍，TypeORM 也借鉴了hibernate，所以你会发现它特别熟悉，尤其是装饰类的方式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体model，user类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Entity, PrimaryGeneratedColumn, Column&#125; <span class="keyword">from</span> <span class="string">"typeorm"</span>;</span><br><span class="line">@Entity()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">​    @PrimaryGeneratedColumn()</span><br><span class="line">​    id: number;</span><br><span class="line"></span><br><span class="line">​    @Column()</span><br><span class="line">​    firstName: string;</span><br><span class="line"></span><br><span class="line">​    @Column()</span><br><span class="line">​    lastName: string;</span><br><span class="line"></span><br><span class="line">​    @Column()</span><br><span class="line">​    age: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CRUD操作：逻辑层</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createConnection&#125; <span class="keyword">from</span> <span class="string">"typeorm"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">"./entity/User"</span>;</span><br><span class="line"></span><br><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">"Inserting a new user into the database..."</span>);</span><br><span class="line">​    <span class="keyword">const</span> user = <span class="keyword">new</span> User();</span><br><span class="line">​    user.firstName = <span class="string">"Timber"</span>;</span><br><span class="line">​    user.lastName = <span class="string">"Saw"</span>;</span><br><span class="line">​    user.age = <span class="number">25</span>;</span><br><span class="line">​    <span class="keyword">await</span> connection.manager.save(user);</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">"Saved a new user with id: "</span> + user.id);</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">"Loading users from the database..."</span>);</span><br><span class="line">​    <span class="keyword">const</span> users = <span class="keyword">await</span> connection.manager.find(User);</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">"Loaded users: "</span>, users);</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">"Here you can setup and run express/koa/any other framework."</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure></p><!-- 所以，TypeORM的方式很像hibernate的方式，虽然es6中就已经有装饰器类似java的注解的功能了，但是还是和装饰器有所区别，因为TypeORM采用的是TypeScript 的方式，TypeScript 是 JavaScript 的一个超集，TypeScript 采用类型注解方式，虽然支持es6的标准，但是有些语法还是需要了解，这也或多或少增加了一些选择难度。 --><h2 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h2><p>这个被star数最多了一个ORM框架，官方居然不给中文文档，找个CLI命令快速构建也没有，也没找到个合适轮子，只能自己搭了，也不是少了轮子就不能活了。不过Sequelize的官网文档看着很顺眼，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 构建数据库访问公共文件db.js</span></span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">​    dbName,</span><br><span class="line">​    host,</span><br><span class="line">​    port,</span><br><span class="line">​    user,</span><br><span class="line">​    password</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'../config'</span>).database</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(dbName, user, password, &#123;</span><br><span class="line">​    dialect: <span class="string">'mysql'</span>,</span><br><span class="line">​    host,</span><br><span class="line">​    port,</span><br><span class="line">​    logging: <span class="literal">true</span>,</span><br><span class="line">​    timezone: <span class="string">'+08:00'</span>,</span><br><span class="line">    dialect: <span class="string">'mysql'</span>|<span class="string">'sqlite'</span>|<span class="string">'postgres'</span>|<span class="string">'mssql'</span>,</span><br><span class="line">    pool: &#123;</span><br><span class="line">      max: <span class="number">5</span>,</span><br><span class="line">      min: <span class="number">0</span>,</span><br><span class="line">      idle: <span class="number">10000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// SQLite only</span></span><br><span class="line">    storage: <span class="string">'path/to/database.sqlite'</span>,</span><br><span class="line">    <span class="comment">// operatorsAliases, // 定义别名。（可能不需要？？）</span></span><br><span class="line"></span><br><span class="line">​    define: &#123;</span><br><span class="line">​        <span class="comment">// create_time &amp;&amp; update_time</span></span><br><span class="line">​        timestamps: <span class="literal">true</span>,</span><br><span class="line">​        <span class="comment">// delete_time</span></span><br><span class="line">​        paranoid: <span class="literal">true</span>,</span><br><span class="line">​        createdAt: <span class="string">'created_at'</span>,</span><br><span class="line">​        updatedAt: <span class="string">'updated_at'</span>,</span><br><span class="line">​        deletedAt: <span class="string">'deleted_at'</span>,</span><br><span class="line">​        <span class="comment">// 把驼峰命名转换为下划线</span></span><br><span class="line">​        underscored: <span class="literal">true</span>,</span><br><span class="line">​        scopes: &#123;</span><br><span class="line">​            bh: &#123;</span><br><span class="line">​                attributes: &#123;</span><br><span class="line">​                    exclude: [<span class="string">'password'</span>, <span class="string">'updated_at'</span>, <span class="string">'deleted_at'</span>, <span class="string">'created_at'</span>]</span><br><span class="line">​                &#125;</span><br><span class="line">​            &#125;,</span><br><span class="line">​            iv: &#123;</span><br><span class="line">​                attributes: &#123;</span><br><span class="line">​                    exclude: [<span class="string">'content'</span>, <span class="string">'password'</span>, <span class="string">'updated_at'</span>, <span class="string">'deleted_at'</span>]</span><br><span class="line">​                &#125;</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建模型</span></span><br><span class="line">sequelize.sync(&#123;</span><br><span class="line">​    force: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">​    sequelize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # model</span></span><br><span class="line"><span class="keyword">const</span> &#123;Sequelize, Model&#125; = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;db&#125; = <span class="built_in">require</span>(<span class="string">'../../db'</span>)</span><br><span class="line"><span class="comment">// ## //定义数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123;</span><br><span class="line">    <span class="comment">// attributes</span></span><br><span class="line">    firstName: &#123;</span><br><span class="line">        type: Sequelize.STRING,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">        <span class="comment">// allowNull defaults to true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    db,</span><br><span class="line">    modelName: <span class="string">'user'</span></span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ### 还有一种写法，兼容老版本，不推荐</span></span><br><span class="line"><span class="keyword">const</span> User = db.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">    <span class="comment">// attributes</span></span><br><span class="line">    firstName: &#123;</span><br><span class="line">        type: Sequelize.STRING,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">        <span class="comment">// allowNull defaults to true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    birthday: Sequelize.DATE</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ## 同步数据库</span></span><br><span class="line"><span class="comment">// Note: using `force: true` will drop the table if it already exists</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Now the `users` table in the database corresponds to the model definition</span></span><br><span class="line">  <span class="keyword">return</span> User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'John'</span>,</span><br><span class="line">    lastName: <span class="string">'Hancock'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// # CRUD操作：然后看一下逻辑层，就非常简单了，直接使用ES7 async/await即可</span></span><br><span class="line"><span class="comment">// Find all users</span></span><br><span class="line">User.findAll().then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"All users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Create a new user</span></span><br><span class="line">User.create(&#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span> &#125;).then(<span class="function"><span class="params">jane</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Jane's auto-generated ID:"</span>, jane.id);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Delete everyone named "Jane"</span></span><br><span class="line">User.destroy(&#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">    firstName: <span class="string">"Jane"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Change everyone without a last name to "Doe"</span></span><br><span class="line">User.update(&#123; <span class="attr">lastName</span>: <span class="string">"Doe"</span> &#125;, &#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">    lastName: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这种实际上是sequelize.define内部调用了model.init，但是老版本是没有第一种写法的。</p><p>此外需要知道的是，sequelize还默认为每个模型定义字段id（主键）、createdat和updatedat，也可以进行设置。<br>我们的db.js文件里面配置了，不自动创建模型，也就是自动创建数据表，关闭是有原因的，因为如果表存在会先drop然后再创建，这种操作本身就很可怕的<br>单个模型也可以配置，切记这种操作很危险，尤其是生成环境</p><p>由此来看，没有typeorm装饰类的方式看着顺眼，但是整体构造也容易上手，操作简单，容易理解，看官网文档，功能覆盖强大，typeorm用户反馈使用问题比Sequelize要多，后期用到再做比较。</p><h2 id="ORM2"><a href="#ORM2" class="headerlink" title="ORM2"></a>ORM2</h2><p>ORM2貌似没有正了八经的官网，所以看起来就特别麻烦，但是可以看一下github介绍node-orm2，只支持四种数据库MySQL、PostgreSQL、Amazon Redshift、SQLite，这个我没写demo，直接分析一下</p><p>所以，准确应该是node-orm2，写法和sequelize类似，但是文档确实不行，数据库支持也少，很难想象后续的可维护性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 数据库连接</span></span><br><span class="line"><span class="keyword">var</span> orm = <span class="built_in">require</span>(<span class="string">"orm"</span>);</span><br><span class="line">orm.connect(<span class="string">"mysql://username:password@host/database"</span>, </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err, db</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...里面一些参数不详细写了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// # model</span></span><br><span class="line"><span class="keyword">var</span> Person = db.define(<span class="string">'person'</span>, &#123;</span><br><span class="line">name: <span class="built_in">String</span>,</span><br><span class="line">surname: <span class="built_in">String</span>,</span><br><span class="line">age: <span class="built_in">String</span>,</span><br><span class="line">male: boolean</span><br><span class="line">&#125;, &#123;</span><br><span class="line">identityCache : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// # CRUD操作</span></span><br><span class="line">Person.create([</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"John"</span>,</span><br><span class="line">surname: <span class="string">"Doe"</span>,</span><br><span class="line">age: <span class="number">25</span>,</span><br><span class="line">male: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"Liza"</span>,</span><br><span class="line">surname: <span class="string">"Kollan"</span>,</span><br><span class="line">age: <span class="number">19</span>,</span><br><span class="line">male: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params">err, items</span>) </span>&#123;</span><br><span class="line"><span class="comment">// err - description of the error or null</span></span><br><span class="line"><span class="comment">// items - array of inserted items</span></span><br><span class="line">&#125;);</span><br><span class="line">Person.get(<span class="number">1</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, John</span>) </span>&#123;</span><br><span class="line">John.name = <span class="string">"Joe"</span>;</span><br><span class="line">John.surname = <span class="string">"Doe"</span>;</span><br><span class="line">John.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"saved!"</span>);</span><br><span class="line">&#125;);<span class="comment">//保存</span></span><br><span class="line">Person.find(&#123; <span class="attr">surname</span>: <span class="string">"Doe"</span> &#125;).remove(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Does gone..</span></span><br><span class="line">&#125;);<span class="comment">//删除</span></span><br><span class="line">&#125;);</span><br><span class="line">Person.find(&#123;</span><br><span class="line">  name: <span class="string">"admin"</span>&#125;)</span><br><span class="line">  .limit(<span class="number">3</span>)</span><br><span class="line">  .offset(<span class="number">2</span>)<span class="comment">//跳过</span></span><br><span class="line">  .only(<span class="string">"name"</span>, <span class="string">"age"</span>)<span class="comment">//返回字段</span></span><br><span class="line">  .run(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>## 其它<br>8 bookshelf（这个用的也挺多）<br>persistencejs<br>6 waterline<br>5 mongoose<br>node-mysql<br>knex</p><h1 id="汇总对比"><a href="#汇总对比" class="headerlink" title="汇总对比"></a>汇总对比</h1><p><a href="https://www.dunebook.com/best-node-js-orms/" target="_blank" rel="noopener">12 Best Node.js ORMs</a><br>1 RxDB<br>4 Loopback<br>7 CaminteJS<br>9 Objection.js<br>11 Node-ORM2<br>12 Mikro-ORM</p><h2 id="Node-js-ORM-框架对比"><a href="#Node-js-ORM-框架对比" class="headerlink" title="Node.js ORM 框架对比"></a>Node.js ORM 框架对比</h2><!-- \#2 [Node.js ORM 框架对比](https://blog.ipsfan.com/6455.html) --><!-- \#2 [Node.js ORM 框架对比](https://www.cnblogs.com/nayek/p/12917504.html) --><p>### Mongoose<br>目前比较常见的 MongoDB ORM 框架，官方说法是 ODM 框架，可见对关系型数据库支持一般</p><p>官网：<a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a><br>数据库：仅支持 MongoDB<br>编程风格：<br>支持 Promise/async/await<br>基于 JS 内置类型的 Schema 声明<br>基于链式构造的 Query Builder 查询</p><p>周边技术：Typegoose<br><a href="https://www.npmjs.com/package/typegoose" target="_blank" rel="noopener">https://www.npmjs.com/package/typegoose</a><br>可以增加 TypeScript 支持，支持使用 Reflect Metadata 自动映射 TS 类型标注</p><p>热度：周频持续更新，NPM 周下载 70W+</p><p>### Sequelize<br>较老牌的 Node.js ORM 框架，相对简易</p><p>官网：<a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">http://docs.sequelizejs.com/</a><br>数据库：支持关系型数据库（MySQL/MSSQL/PostgreSQL/SQLite）<br>编程风格：<br>支持 Promise/async/await<br>基于自带的一套类型枚举声明<br>基于 JSON 对象的查询方式<br>基于自带的一套操作符描述</p><p>热度：月频持续更新，NPM 周下载 20W+</p><p>### Bookshelf<br>Sequelize 之后出现的 ORM 框架，风格与 Sequelize 较相似，看上去比 Sequelize 易用性高</p><p>官网：<a href="http://bookshelfjs.org/" target="_blank" rel="noopener">http://bookshelfjs.org/</a><br>数据库：支持关系型数据库<br>编程风格：<br>基本上是 Eloquent ORM 的 JS 版本<br>支持 Promise/async/await<br>支持基于链式构造的 Query Builder 查询</p><p>热度：近半年未更新，NPM 周下载 1.7W</p><p>### TypeORM<br>基于 Decorator 的 ORM 框架，对 TypeScript 支持较好，同时支持在 JavaScript 中通过手动声明使用，以及 JSON 方式的 Entity 配置声明</p><p>官网：<a href="https://github.com/typeorm/typeorm/" target="_blank" rel="noopener">https://github.com/typeorm/typeorm/</a><br>数据库：支持关系型数据库，Beta 支持 MongoDB<br>编程风格：<br>基本上是 Hibernate 的 JS 版本<br>支持 Promise/async/await<br>支持基于链式构造的 Query Builder 查询<br>支持 CLI 工具</p><p>热度：周频持续更新，NPM 周下载 2.8W</p><!-- 参考链接：https://github.com/CyanSalt/notebook/issues/12 --><!-- 参考链接：https://www.jianshu.com/p/07141d53f119 --><!-- END: #2 --><h1 id="优化数据库查询-Sequelize"><a href="#优化数据库查询-Sequelize" class="headerlink" title="优化数据库查询 (Sequelize)"></a>优化数据库查询 (Sequelize)</h1><!-- \#6 [nodejs/Sequelize/MySQL——基础、联表及优化]() --><h2 id="2-基础用法"><a href="#2-基础用法" class="headerlink" title="2 基础用法"></a>2 基础用法</h2><p>你也可以通过 define 的第三个参数做一些自定义，这些配置会被合并到 Sequlize 构造函数的 define 字段中，用来定义模型和数据表的关联行为，比如「自动更新表中的 update_at、create_at」。</p><h3 id="基础的CURD"><a href="#基础的CURD" class="headerlink" title="基础的CURD"></a>基础的CURD</h3><p>Sequlize 对象提供丰富的 api，诸如：<br>findOne、findAll……<br>create、upsert……<br>aggregate、max……</p><!-- > 当没给 attributes，Sequelize 默认会把模型中的定义拿出来做 attributes，这样比 Select * 节约数据库操作成本和传输带宽。  --><p>一个例子：findAll<br>第二个例子：findOrCreate</p><blockquote><p>有些高级 API 会::触发数据库事务:: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Station.findOrCreate(&#123; </span><br><span class="line">    where: &#123; </span><br><span class="line">        id: <span class="number">1</span>, </span><br><span class="line">    &#125;, </span><br><span class="line">    defaults: &#123; </span><br><span class="line">        name: <span class="string">'haha'</span>, </span><br><span class="line">    &#125;, </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* START TRANSACTION; </span></span><br><span class="line"><span class="comment">SELECT `id`, `store_id`, `name`, `type`, `status`, `ip`, `plate_no` FROM `station` AS `station` WHERE `station`.`id` = 2; </span></span><br><span class="line"><span class="comment">INSERT INTO `station` (`id`,`name`) VALUES (2,`haha`); </span></span><br><span class="line"><span class="comment">COMMIT; */</span></span><br></pre></td></tr></table></figure><h2 id="3-联表查询"><a href="#3-联表查询" class="headerlink" title="3 联表查询"></a>3 联表查询</h2><h3 id="3-2-联表关系"><a href="#3-2-联表关系" class="headerlink" title="3.2 联表关系"></a>3.2 联表关系</h3><p>在 Sequlize 中，联表关系需要在模型 associate 方法中标记，通常为这种格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File.belongsTo(User, &#123;...option&#125;);</span><br><span class="line">File.findOne(&#123;</span><br><span class="line">    include: [&#123; <span class="attr">model</span>: User &#125;],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 3.3</span></span><br><span class="line">User.HasOne(File, &#123; </span><br><span class="line">    foreignKey: <span class="string">'creator_id'</span>,   <span class="comment">// 如果不定义这个，也会自动定义为「源模型名 + 源模型主键名」即 user_id</span></span><br><span class="line">    sourceKey: <span class="string">'id'</span>,    <span class="comment">// 源模型的关联键，默认主键，通常省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两种模型<br>源模型：需要标记和其他模型关系的模型，就是执行联表查询的模型 （上面的 File）<br>目标模型：被标记关系的模型，本身不因此次标记获得联表查询能力 （上面的 User）<br>四种关联键<br>foreignKey：外键，用来关联外部模型，::一个模型有了外键，对关联的模型来说就是唯一了::<br>targetKey<br>sourceKey<br>otherKey：当一个 foreignKey 不够用时的替代品<br>表之间的关系通常包括：一对一、一对多、多对多。</p><h3 id="3-3-一对一关系（belongsTo-hasOne）"><a href="#3-3-一对一关系（belongsTo-hasOne）" class="headerlink" title="3.3 一对一关系（belongsTo / hasOne）"></a>3.3 一对一关系（belongsTo / hasOne）</h3><h3 id="3-4-一对多（hasMany）"><a href="#3-4-一对多（hasMany）" class="headerlink" title="3.4 一对多（hasMany）"></a>3.4 一对多（hasMany）</h3><h3 id="3-5-多对多关系（belongsToMany）"><a href="#3-5-多对多关系（belongsToMany）" class="headerlink" title="3.5 多对多关系（belongsToMany）"></a>3.5 多对多关系（belongsToMany）</h3><h3 id="3-6-几种-JOIN"><a href="#3-6-几种-JOIN" class="headerlink" title="3.6 几种 JOIN"></a>3.6 几种 JOIN</h3><h2 id="4-数据库查询的优化"><a href="#4-数据库查询的优化" class="headerlink" title="4 数据库查询的优化"></a>4 数据库查询的优化</h2><h3 id="4-1-慢查询、全表扫描和索引"><a href="#4-1-慢查询、全表扫描和索引" class="headerlink" title="4.1 慢查询、全表扫描和索引"></a>4.1 慢查询、全表扫描和索引</h3><p>在数据库界，人们常常提到「慢查询」，指的是查询时长超过指定时长的查询。慢查询的危害在于不仅本次查询的请求时间变长，还会较长时间的占用系统资源，对其他查询造成影响或者干脆撑挂数据库。</p><p>而「慢查询」最常见的罪魁祸首就是「全表扫描」，指的是数据库引擎为了找到某条记录，对全表进行逐个搜索，直到搜索到这条记录。<!-- 想象下，如果你有上亿条数据，而要查的数据碰巧比较靠后，这个得查到什么时候？（复杂度在 O(n)） 那怎么样才不「全表扫描」呢？ --></p><p>举个例子，当你用主键查一条记录的时候，就不会全表扫描。<br><code>File.findByPk(123);</code><br>因为 MySQL 默认给主键列加了「索引」。</p><p>::「索引」厉害在哪？MySQL 为这一列建立了一个 btree::（不同数据库的实现是不一样的，但 btree 是主流）。这样查“id 为 318 的 Station”只需要从根节点沿着找下去，类似这个意思：</p><p>3xx –&gt; 31x –&gt; 318</p><h3 id="4-2-给其他列加索引"><a href="#4-2-给其他列加索引" class="headerlink" title="4.2 给其他列加索引"></a>4.2 给其他列加索引</h3><p>那么如果我查普通列呢？也可以通过索引提升查询效率。<br><!-- <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File.findOne(&#123; </span><br><span class="line">    where: &#123; </span><br><span class="line">        name: <span class="string">'station1'</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你也可以为这个列手动增加一个索引： –&gt;</p><p><code>create index index_name on file(name);</code><br>但这个索引的实现是和主键索引有区别的，它不直接查到数据记录，而是把 btree 建立在主键 id 上，现在查一个「name 为 station1 的记录」的过程变成类似这种：<br><!-- 开始 -- > name: sta... -- > name: statio -- > name: station1 -- > 拿到 station1 的 id: 816 -- > id: 8xx -- > id: 81x -- > id: 816 -- > 拿到 816 的数据--><br>如果嫌这个路径长，还有更近一步的，对于常查的列，比如 File 的 name 和 author，可以建立「覆盖索引」：</p><p><code>create index index_name_and_address on file(name, author);</code><br>这时候如果我只根据 name 查 author：</p><p>File.findOne({<br>    where: {<br>        name: ‘station1’<br>    },<br>    attributes: [‘author’]<br>})<br>因为索引里已经存了 address，就不需要再去访问源数据了：</p><p>开始<br>–&gt; name: sta… –&gt; name: statio –&gt; name: station1<br>–&gt; 拿到 station1 的 address: xxx</p><h4 id="索引越多越好吗？"><a href="#索引越多越好吗？" class="headerlink" title="索引越多越好吗？"></a>索引越多越好吗？</h4><p>然而索引并不是越多越好，索引虽然提升了查询的效率，缺牺牲了插入、删除的效率。想象下以前只要把新数据堆到表上就行，现在还要修改索引，更麻烦的是索引是个平衡树，很多场景需要对整个树进行调整。（主键为什么默认是自增的？我猜也是为了减少插入数据时树操作的成本）</p><p>所以我们一般考虑在常用来「where」或者「order」的列上加索引。</p><h3 id="4-3-查询语句优化"><a href="#4-3-查询语句优化" class="headerlink" title="4.3 查询语句优化"></a>4.3 查询语句优化</h3><p>前面说的给常用列增加索引可以提升查询效率，让查询尽量走「btree」而不是「全表扫描」。 但前提是别上来就 select *，而是要用 attributes 只摘取你要的列：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where: &#123; </span><br><span class="line">    attributes: [<span class="string">'id'</span>, <span class="string">'name'</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但并不是所有的查询都会走「btree」，不优秀的 sql 仍然会触发全表扫描，产生慢查询，应该尽量避免。</p><p>当你 where 一个列时，MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE。<br>放到 Sequelize 里就是：<br><code>Sequelize.Op.gt|gte|lt|lte|eq|between|in</code> …<br>比如，能用 in 尽量别用 not in<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 </span></span><br><span class="line">status: &#123; </span><br><span class="line">    [Op.notIn]: [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ], </span><br><span class="line">&#125;, </span><br><span class="line"><span class="comment">// 好 </span></span><br><span class="line">status: &#123; </span><br><span class="line">    [Op.in]: [ <span class="number">1</span>, <span class="number">2</span> ], </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><!-- 具体的网上一搜「避免全表扫描」一大把，就不展开了。 --><!-- END: #6 --><h1 id="实现ORM框架"><a href="#实现ORM框架" class="headerlink" title="实现ORM框架"></a>实现ORM框架</h1><!-- \# [在NodeJS下实现简单的ORM框架](https://blog.csdn.net/daydream13580130043/article/details/91490860) --><p>使用TypeScript以及mysql包。</p><p>mysql.ts文件，主要实现连接mysql，以及一下基本的增删改查函数<br>ORM.ts，封装ORM类</p><!-- koa-orbit 实现数据库操作## modalbaseModal 只是简单实现sql 基本操作（加SQLStringify）：create, update, delete, list,detail 等并没有定义 对象--表 的关系映射。 --><h1 id="sequelize"><a href="#sequelize" class="headerlink" title="sequelize"></a>sequelize</h1><!-- 在上述例子， -->使用sequelize使用三段式：<br>连接数据库<br>定义模型<br>同步数据库<br><br><!-- \#11 [Nodejs ORM框架Sequelize快速入门](https://blog.csdn.net/huwei2003/article/details/77646054)  2017-08-28--><h2 id="Sequelize有哪些特色？"><a href="#Sequelize有哪些特色？" class="headerlink" title="Sequelize有哪些特色？"></a>Sequelize有哪些特色？</h2><p>1) 强大的模型定义，支持虚拟类型。Javascript虽然被很多人诟病杂乱无章法，但是函数即对象这个特色，可以说是我的最爱，非常灵活强大。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  firstname: Sequelize.STRING,</span><br><span class="line">  lastname: Sequelize.STRING</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  getterMethods   : &#123;</span><br><span class="line">    fullName       : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setterMethods   : &#123;</span><br><span class="line">    fullName       : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> names = value.split(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2) 支持完善的数据验证，减轻前后端的验证压力。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ValidateMe = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      is: [<span class="string">"^[a-z]+$"</span>,<span class="string">'i'</span>],     <span class="comment">// 全匹配字母</span></span><br><span class="line">      is: <span class="regexp">/^[a-z]+$/i</span>,          <span class="comment">// 全匹配字母，用规则表达式写法</span></span><br><span class="line">      not: [<span class="string">"[a-z]"</span>,<span class="string">'i'</span>],       <span class="comment">// 不能包含字母</span></span><br><span class="line">      isEmail: <span class="literal">true</span>,            <span class="comment">// 检查邮件格式</span></span><br><span class="line">      isUrl: <span class="literal">true</span>,              <span class="comment">// 是否是合法网址</span></span><br><span class="line">      isIP: <span class="literal">true</span>,               <span class="comment">// 是否是合法IP地址</span></span><br><span class="line">      isIPv4: <span class="literal">true</span>,             <span class="comment">// 是否是合法IPv4地址</span></span><br><span class="line">      isIPv6: <span class="literal">true</span>,             <span class="comment">// 是否是合法IPv6地址</span></span><br><span class="line">      isAlpha: <span class="literal">true</span>,            <span class="comment">// 是否是字母</span></span><br><span class="line">      isAlphanumeric: <span class="literal">true</span>,     <span class="comment">// 是否是数字和字母</span></span><br><span class="line">      isNumeric: <span class="literal">true</span>,          <span class="comment">// 只允许数字</span></span><br><span class="line">      isInt: <span class="literal">true</span>,              <span class="comment">// 只允许整数</span></span><br><span class="line">      isFloat: <span class="literal">true</span>,            <span class="comment">// 是否是浮点数</span></span><br><span class="line">      isDecimal: <span class="literal">true</span>,          <span class="comment">// 是否是十进制书</span></span><br><span class="line">      isLowercase: <span class="literal">true</span>,        <span class="comment">// 是否是小写</span></span><br><span class="line">      isUppercase: <span class="literal">true</span>,        <span class="comment">// 是否大写</span></span><br><span class="line">      notNull: <span class="literal">true</span>,            <span class="comment">// 不允许为null</span></span><br><span class="line">      isNull: <span class="literal">true</span>,             <span class="comment">// 是否是null</span></span><br><span class="line">      notEmpty: <span class="literal">true</span>,           <span class="comment">// 不允许为空</span></span><br><span class="line">      equals: <span class="string">'specific value'</span>, <span class="comment">// 等于某些值</span></span><br><span class="line">      contains: <span class="string">'foo'</span>,          <span class="comment">// 包含某些字符</span></span><br><span class="line">      notIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],  <span class="comment">// 不在列表中</span></span><br><span class="line">      isIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],   <span class="comment">// 在列表中</span></span><br><span class="line">      notContains: <span class="string">'bar'</span>,       <span class="comment">// 不包含</span></span><br><span class="line">      len: [<span class="number">2</span>,<span class="number">10</span>],              <span class="comment">// 长度范围</span></span><br><span class="line">      isUUID: <span class="number">4</span>,                <span class="comment">// 是否是合法 uuids</span></span><br><span class="line">      isDate: <span class="literal">true</span>,             <span class="comment">// 是否是有效日期</span></span><br><span class="line">      isAfter: <span class="string">"2011-11-05"</span>,    <span class="comment">// 是否晚于某个日期</span></span><br><span class="line">      isBefore: <span class="string">"2011-11-05"</span>,   <span class="comment">// 是否早于某个日期</span></span><br><span class="line">      max: <span class="number">23</span>,                  <span class="comment">// 最大值</span></span><br><span class="line">      min: <span class="number">23</span>,                  <span class="comment">// 最小值</span></span><br><span class="line">      isArray: <span class="literal">true</span>,            <span class="comment">// 是否是数组</span></span><br><span class="line">      isCreditCard: <span class="literal">true</span>,       <span class="comment">// 是否是有效信用卡号</span></span><br><span class="line">      <span class="comment">// 自定义规则</span></span><br><span class="line">      isEven: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入偶数!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3) Sequelize的查询非常全面和灵活<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">Project.findAll(&#123;</span><br><span class="line">  <span class="comment">//复杂过滤，可嵌套</span></span><br><span class="line">  where: &#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">      $and: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;           <span class="comment">// AND (a = 5)</span></span><br><span class="line">      $or: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;]  <span class="comment">// (a = 5 OR a = 6)</span></span><br><span class="line">      $gt: <span class="number">6</span>,                <span class="comment">// id &gt; 6</span></span><br><span class="line">      $gte: <span class="number">6</span>,               <span class="comment">// id &gt;= 6</span></span><br><span class="line">      $lt: <span class="number">10</span>,               <span class="comment">// id &lt; 10</span></span><br><span class="line">      $lte: <span class="number">10</span>,              <span class="comment">// id &lt;= 10</span></span><br><span class="line">      $ne: <span class="number">20</span>,               <span class="comment">// id != 20</span></span><br><span class="line">      $between: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// BETWEEN 6 AND 10</span></span><br><span class="line">      $notBetween: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// NOT BETWEEN 11 AND 15</span></span><br><span class="line">      $<span class="keyword">in</span>: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// IN [1, 2]</span></span><br><span class="line">      $notIn: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// NOT IN [1, 2]</span></span><br><span class="line">      $like: <span class="string">'%hat'</span>,         <span class="comment">// LIKE '%hat'</span></span><br><span class="line">      $notLike: <span class="string">'%hat'</span>       <span class="comment">// NOT LIKE '%hat'</span></span><br><span class="line">      $iLike: <span class="string">'%hat'</span>         <span class="comment">// ILIKE '%hat' (case insensitive)  (PG only)</span></span><br><span class="line">      $notILike: <span class="string">'%hat'</span>      <span class="comment">// NOT ILIKE '%hat'  (PG only)</span></span><br><span class="line">      $overlap: [<span class="number">1</span>, <span class="number">2</span>]       <span class="comment">// &amp;&amp; [1, 2] (PG array overlap operator)</span></span><br><span class="line">      $contains: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// @&gt; [1, 2] (PG array contains operator)</span></span><br><span class="line">      $contained: [<span class="number">1</span>, <span class="number">2</span>]     <span class="comment">// &lt;@ [1, 2] (PG array contained by operator)</span></span><br><span class="line">      $any: [<span class="number">2</span>,<span class="number">3</span>]            <span class="comment">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    status: &#123;</span><br><span class="line">      $not: <span class="literal">false</span>,           <span class="comment">// status NOT FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Project.all()</span><br><span class="line">findByPk</span><br><span class="line">Project.findById</span><br><span class="line">Project.findByOne</span><br><span class="line">Project.findOrCreate</span><br><span class="line">Project.findAndCountAll</span><br><span class="line">Project.count()</span><br><span class="line">Project.max()</span><br><span class="line"><span class="comment">//CRUD</span></span><br><span class="line">Project.create()</span><br><span class="line">Project.save()</span><br><span class="line">Project.update()</span><br><span class="line">Project.destroy()</span><br><span class="line"><span class="comment">//批量</span></span><br><span class="line">User.bulkCreate([])</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">something.findOne(&#123;</span><br><span class="line">  order: [</span><br><span class="line">    <span class="string">'name'</span>,</span><br><span class="line">    <span class="comment">// 返回 `name`</span></span><br><span class="line">    <span class="string">'username DESC'</span>,</span><br><span class="line">    <span class="comment">// 返回 `username DESC`</span></span><br><span class="line">    [<span class="string">'username'</span>, <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// 返回 `username` DESC</span></span><br><span class="line">    sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)),</span><br><span class="line">    <span class="comment">// 返回 max(`age`)</span></span><br><span class="line">    [sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)), <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// 返回 max(`age`) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.col(<span class="string">'col1'</span>), <span class="number">12</span>, <span class="string">'lalala'</span>), <span class="string">'DESC'</span>],</span><br><span class="line">    <span class="comment">// 返回 otherfunction(`col1`, 12, 'lalala') DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">'otherfunction'</span>, sequelize.fn(<span class="string">'awesomefunction'</span>, sequelize.col(<span class="string">'col'</span>))), <span class="string">'DESC'</span>]</span><br><span class="line">    <span class="comment">// 返回 otherfunction(awesomefunction(`col`)) DESC, 有可能是无限循环</span></span><br><span class="line">    [&#123; <span class="attr">raw</span>: <span class="string">'otherfunction(awesomefunction(`col`))'</span> &#125;, <span class="string">'DESC'</span>]</span><br><span class="line">    <span class="comment">// 也可以这样写</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;)</span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</span><br><span class="line"><span class="comment">//关联查询 include 支持嵌套，这可能是ORM里面最难的部分。</span></span><br><span class="line"><span class="keyword">var</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</span><br><span class="line">  , Task = sequelize.define(<span class="string">'task'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</span><br><span class="line">  , Tool = sequelize.define(<span class="string">'tool'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;)</span><br><span class="line">Task.belongsTo(User) <span class="comment">// 增加外键属性 UserId 到 Task</span></span><br><span class="line">User.hasMany(Task) <span class="comment">// 给 Task 增加外键属性 userId</span></span><br><span class="line">User.hasMany(Tool, &#123; <span class="attr">as</span>: <span class="string">'Instruments'</span> &#125;) <span class="comment">// 给 Task 增加自定义外键属性 InstrumentsId</span></span><br><span class="line">Task.findAll(&#123; <span class="attr">include</span>: [ User ] &#125;)</span><br><span class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123;</span><br><span class="line">    model: Tool,</span><br><span class="line">    <span class="keyword">as</span>: <span class="string">'Instruments'</span>,</span><br><span class="line">    where: &#123; <span class="attr">name</span>: &#123; <span class="attr">$like</span>: <span class="string">'%ooth%'</span> &#125; &#125;</span><br><span class="line">&#125;] &#125;)</span><br><span class="line">User.findAll(&#123; <span class="attr">include</span>: [<span class="string">'Instruments'</span>] &#125;)</span><br><span class="line"><span class="keyword">var</span> User = <span class="keyword">this</span>.sequelize.define(<span class="string">'user'</span>, &#123;<span class="comment">/* attributes */</span>&#125;, &#123;<span class="attr">underscored</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  , Company  = <span class="keyword">this</span>.sequelize.define(<span class="string">'company'</span>, &#123;</span><br><span class="line">    uuid: &#123;</span><br><span class="line">      type: Sequelize.UUID,</span><br><span class="line">      primaryKey: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">User.belongsTo(Company); <span class="comment">// 增加 company_uuid 外键属性到 user</span></span><br><span class="line">User.belongsTo(UserRole, &#123;<span class="attr">as</span>: <span class="string">'role'</span>&#125;);</span><br><span class="line"><span class="comment">// 自定义外键属性 roleId 到 user 而不是 userRoleId</span></span><br><span class="line">User.belongsTo(Company, &#123;<span class="attr">foreignKey</span>: <span class="string">'fk_companyname'</span>, <span class="attr">targetKey</span>: <span class="string">'name'</span>&#125;); <span class="comment">// 增加自定义外键属性 fk_companyname 到 User</span></span><br><span class="line">Person.hasOne(Person, &#123;<span class="attr">as</span>: <span class="string">'Father'</span>, <span class="attr">foreignKey</span>: <span class="string">'DadId'</span>&#125;)</span><br><span class="line"><span class="comment">// Person 增加外键属性 DadId</span></span><br><span class="line">Coach.hasOne(Team)  <span class="comment">// `coachId` 作为 Team 的外键属性</span></span><br><span class="line">Project.hasMany(User, &#123;<span class="attr">as</span>: <span class="string">'Workers'</span>&#125;)</span><br><span class="line"><span class="comment">// 给 User 增加外键属性 projectId ／ project_id</span></span><br><span class="line">Project.belongsToMany(User, &#123;<span class="attr">through</span>: <span class="string">'UserProject'</span>&#125;);</span><br><span class="line">User.belongsToMany(Project, &#123;<span class="attr">through</span>: <span class="string">'UserProject'</span>&#125;);</span><br><span class="line"><span class="comment">// 创建新的模型: UserProject 包含外键属性：projectId 和 userId</span></span><br></pre></td></tr></table></figure></p><p>4) Sequelize还有完善的迁移同步数据方案,migrate so easy。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$ sequelize db:migrate //用命令直接生成模版脚本，接下来的还是写js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  up: <span class="function"><span class="keyword">function</span>(<span class="params">queryInterface, Sequelize</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 需要修改数据库的操作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  down: <span class="function"><span class="keyword">function</span>(<span class="params">queryInterface, Sequelize</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 取消修改的操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- 转自: http://hopperclouds.github.io/2016/09/12/Nodejs-ORM框架Sequelizejs快速入门/ --><!-- END: #11 --><!-- \#12 [nodejs中ORM框架sequelize使用](https://blog.csdn.net/chinabestchina/article/details/104645312) 2020-03-04 --><h2 id="二、知识点"><a href="#二、知识点" class="headerlink" title="二、知识点"></a>二、知识点</h2><p>2.1 官网地址<br>文档地址：<a href="https://sequelize.org/v5/index.html" target="_blank" rel="noopener">https://sequelize.org/v5/index.html</a><br>github地址：<a href="https://github.com/demopark/sequelize-docs-Zh-CN" target="_blank" rel="noopener">https://github.com/demopark/sequelize-docs-Zh-CN</a><br>更多参考地址：<a href="http://www.nodeclass.com/api/sequelize.html" target="_blank" rel="noopener">http://www.nodeclass.com/api/sequelize.html</a></p><p>2.2 安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装sequelize包</span></span><br><span class="line">npm install --save sequelize</span><br><span class="line"><span class="comment">#安装mysql包</span></span><br><span class="line">npm install --save mysql2</span><br></pre></td></tr></table></figure></p><h3 id="2-3-语句映射"><a href="#2-3-语句映射" class="headerlink" title="2.3 语句映射"></a>2.3 语句映射</h3><p>sequelize中sql操作函数及mysql语句略有不同，映射如下：</p><table><thead><tr><th>mysql关键字</th><th>sequelize函数关键字</th></tr></thead><tbody><tr><td>select</td><td>find</td></tr><tr><td>update</td><td>update</td></tr><tr><td>insert</td><td>create</td></tr><tr><td>delete</td><td>destory</td></tr></tbody></table><h3 id="2-4-部分关键参数"><a href="#2-4-部分关键参数" class="headerlink" title="2.4 部分关键参数"></a>2.4 部分关键参数</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>raw:true</td><td>sql语句执行后，只返回原始数据，没有附加信息</td></tr><tr><td>freezeTableName: true</td><td>定义model时，默认false(即修改表名为复数)，true不修改表名，与数据库表名同步</td></tr><tr><td>如：modelName: ‘Stu’</td><td>指定model名，相当于sql语句中表的别名，如select * from stu as Stu; 这里Stu即Model</td></tr><tr><td>如：tableName: ‘stu’,</td><td>指定表名,如select * from stu ;</td></tr></tbody></table><h2 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 2.1 创建连接sequelize_config.js</span></span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"><span class="keyword">const</span> Op = Sequelize.Op;</span><br><span class="line"><span class="comment">//配置操作符别称</span></span><br><span class="line"><span class="keyword">const</span> operatorsAliases = &#123;</span><br><span class="line">    $eq: Op.eq,</span><br><span class="line">    $ne: Op.ne,</span><br><span class="line">    $gte: Op.gte,</span><br><span class="line">    $gt: Op.gt,</span><br><span class="line">    $lte: Op.lte,</span><br><span class="line">    $lt: Op.lt,</span><br><span class="line">    $not: Op.not,</span><br><span class="line">    $<span class="keyword">in</span>: Op.in,</span><br><span class="line">    $notIn: Op.notIn,</span><br><span class="line">    $is: Op.is,</span><br><span class="line">    $like: Op.like,</span><br><span class="line">    $notLike: Op.notLike,</span><br><span class="line">    $iLike: Op.iLike,</span><br><span class="line">    $notILike: Op.notILike,</span><br><span class="line">    $regexp: Op.regexp,</span><br><span class="line">    $notRegexp: Op.notRegexp,</span><br><span class="line">    $iRegexp: Op.iRegexp,</span><br><span class="line">    $notIRegexp: Op.notIRegexp,</span><br><span class="line">    $between: Op.between,</span><br><span class="line">    $notBetween: Op.notBetween,</span><br><span class="line">    $overlap: Op.overlap,</span><br><span class="line">    $contains: Op.contains,</span><br><span class="line">    $contained: Op.contained,</span><br><span class="line">    $adjacent: Op.adjacent,</span><br><span class="line">    $strictLeft: Op.strictLeft,</span><br><span class="line">    $strictRight: Op.strictRight,</span><br><span class="line">    $noExtendRight: Op.noExtendRight,</span><br><span class="line">    $noExtendLeft: Op.noExtendLeft,</span><br><span class="line">    $and: Op.and,</span><br><span class="line">    $or: Op.or,</span><br><span class="line">    $any: Op.any,</span><br><span class="line">    $all: Op.all,</span><br><span class="line">    $values: Op.values,</span><br><span class="line">    $col: Op.col</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建sequelize</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'schema'</span>, <span class="string">'user'</span>, <span class="string">'password'</span>, &#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    dialect: <span class="string">'mysql'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    pool: &#123;</span><br><span class="line">        max: <span class="number">3</span>,</span><br><span class="line">        min: <span class="number">1</span>,</span><br><span class="line">        idle: <span class="number">8000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    operatorsAliases</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = sequelize;</span><br><span class="line"><span class="comment">// # 3.2 创建对象Stu.js</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">'../db/sequelize_config'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;Sequelize, Model, DataTypes&#125; = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stu.init(&#123;</span><br><span class="line">    <span class="comment">//定义表字段，多属性定义用&#123;&#125;,只定义类型可省略</span></span><br><span class="line">    id: &#123;<span class="attr">type</span>: DataTypes.INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span>, <span class="attr">allowNull</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    no: DataTypes.STRING,</span><br><span class="line">    name: DataTypes.STRING,</span><br><span class="line">    operator: &#123;<span class="attr">type</span>: DataTypes.STRING, <span class="attr">field</span>: <span class="string">'create_user'</span>&#125;,</span><br><span class="line">    create_user: &#123;<span class="attr">type</span>: DataTypes.STRING, <span class="attr">defaultValue</span>: <span class="string">'default'</span>&#125;,</span><br><span class="line">    create_time: DataTypes.DATE,</span><br><span class="line">    update_time: DataTypes.DATE,</span><br><span class="line">    update_user: DataTypes.STRING</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    sequelize,</span><br><span class="line">    modelName: <span class="string">'stu'</span>, <span class="comment">//model名</span></span><br><span class="line">  tableName: <span class="string">'stu'</span>, <span class="comment">//表名</span></span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">    freezeTableName: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = Stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 操作示例</span></span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"><span class="keyword">const</span> Op = Sequelize.Op;</span><br><span class="line"><span class="keyword">let</span> Stu = <span class="built_in">require</span>(<span class="string">'./model/Stu'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据主键查询</span></span><br><span class="line"><span class="comment">// 等价sql: SELECT `id`, `no`, `name`, `create_user` AS `operator`, `create_user`, `create_time`, `update_time`, `update_user` FROM `stu` AS `stu` WHERE `stu`.`id` = '1';</span></span><br><span class="line">Stu.findByPk(<span class="string">'1'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询取一个值, raw:true表示只返回原始数据</span></span><br><span class="line"><span class="comment">//等价sql: SELECT `id`, `no`, `name` FROM `stu` AS `stu` LIMIT 1;</span></span><br><span class="line">Stu.findOne(&#123;<span class="attr">attributes</span>:[<span class="string">'id'</span>, <span class="string">'no'</span>, <span class="string">'name'</span>], <span class="attr">raw</span>:<span class="literal">true</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据条件查询,只查询指定字段</span></span><br><span class="line"><span class="comment">//等价sql: SELECT `id`, `no`, `name` FROM `stu` AS `stu` WHERE (`stu`.`id` &gt; 9 OR `stu`.`no` = '004') AND `stu`.`name` LIKE 'apple%';</span></span><br><span class="line">Stu.findAll(&#123;<span class="attr">attributes</span>:[<span class="string">'id'</span>, <span class="string">'no'</span>, <span class="string">'name'</span>], <span class="attr">where</span>:&#123;<span class="attr">name</span>:&#123;[Op.like]:<span class="string">'apple%'</span>&#125;,[Op.or]:&#123;<span class="attr">id</span>:&#123;[Op.gt]:<span class="number">9</span>&#125;, <span class="attr">no</span>:<span class="string">'004'</span>&#125;&#125;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据条件查询,包含排序和个数限制,</span></span><br><span class="line"><span class="comment">//等价sql: SELECT `id`, `name` FROM `stu` AS `stu` WHERE `stu`.`name` = 'apple3' AND (`stu`.`id` &gt; 6 AND `stu`.`id` &lt;= 9) ORDER BY `stu`.`no`, `stu`.`create_time` DESC LIMIT 1, 2;</span></span><br><span class="line">Stu.findAll(&#123;<span class="attr">attributes</span>:[<span class="string">'id'</span>, <span class="string">'name'</span>], <span class="attr">where</span>:&#123;<span class="attr">name</span>:<span class="string">'apple3'</span>, <span class="attr">id</span>:&#123;[Op.gt]:<span class="number">6</span>, [Op.lte]:<span class="number">9</span>&#125;&#125;, <span class="attr">limit</span>:<span class="number">2</span>, <span class="attr">offset</span>:<span class="number">1</span>, <span class="attr">order</span>:[<span class="string">'no'</span>, [<span class="string">'create_time'</span>,<span class="string">'desc'</span>]]&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定字段分组，统计，使用函数count</span></span><br><span class="line"><span class="comment">//等价sql: SELECT `name`, count(*) AS `数量` FROM `stu` AS `stu` GROUP BY `name`;</span></span><br><span class="line">Stu.findAll(&#123;<span class="attr">attributes</span>:[<span class="string">'name'</span>,[Sequelize.fn(<span class="string">'count'</span>,Sequelize.col(<span class="string">'*'</span>)), <span class="string">'数量'</span>]], <span class="attr">group</span>:<span class="string">'name'</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//存在则查找，没有同新建，default为新建数据值</span></span><br><span class="line"><span class="comment">/* 等价sql:</span></span><br><span class="line"><span class="comment">TART TRANSACTION;</span></span><br><span class="line"><span class="comment">SELECT `id`, `name` FROM `stu` AS `stu` WHERE `stu`.`id` = 90;</span></span><br><span class="line"><span class="comment">INSERT INTO `stu` (`id`,`name`,`create_user`) VALUES (?,?,?);</span></span><br><span class="line"><span class="comment">COMMIT; */</span></span><br><span class="line">Stu.findOrCreate(&#123;<span class="attr">attributes</span>:[<span class="string">'id'</span>, <span class="string">'name'</span>], <span class="attr">where</span>:&#123;<span class="attr">id</span>:<span class="number">90</span>&#125;, <span class="attr">defaults</span>:&#123;<span class="attr">name</span>:<span class="string">'apple90_x'</span>&#125;&#125;).then(<span class="function">(<span class="params">[stu, created]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stu);</span><br><span class="line">    <span class="built_in">console</span>.log(created);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计查询</span></span><br><span class="line"><span class="comment">//等价sql: SELECT count(*) AS `count` FROM `stu` AS `stu` WHERE `stu`.`id` &lt; 7;</span></span><br><span class="line">Stu.count(&#123;<span class="attr">where</span>: &#123;<span class="attr">id</span>: &#123;[Op.lt]: <span class="number">7</span>&#125;&#125;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计查询,这里使用了别名$lt,即是[Op.lt]</span></span><br><span class="line"><span class="comment">//等价sql: SELECT count(*) AS `count` FROM `stu` AS `stu` WHERE `stu`.`id` &lt; 7;</span></span><br><span class="line">Stu.count(&#123;<span class="attr">where</span>: &#123;<span class="attr">id</span>: &#123;<span class="attr">$lt</span>: <span class="number">7</span>&#125;&#125;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line"><span class="comment">//等价sql: INSERT INTO `stu` (`id`,`no`,`name`,`create_user`) VALUES (DEFAULT,?,?,?);</span></span><br><span class="line">Stu.create(&#123;<span class="attr">no</span>: <span class="string">'003'</span>, <span class="attr">name</span>: <span class="string">'apple3'</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量创建</span></span><br><span class="line"><span class="comment">//等价sql: INSERT INTO `stu` (`id`,`no`,`name`,`create_user`) VALUES (NULL,'003','apple3','default'),(NULL,'004','apple3','default');</span></span><br><span class="line">Stu.bulkCreate([&#123;<span class="attr">no</span>: <span class="string">'003'</span>, <span class="attr">name</span>: <span class="string">'apple3'</span>&#125;,&#123;<span class="attr">no</span>: <span class="string">'004'</span>, <span class="attr">name</span>: <span class="string">'apple3'</span>&#125;]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="comment">//等价sql: UPDATE `stu` SET `name`=?,`update_user`=? WHERE `id` = ?</span></span><br><span class="line">Stu.update(&#123;<span class="attr">name</span>: <span class="string">'banana3'</span>, <span class="attr">update_user</span>:<span class="string">'up3'</span>&#125;, &#123;<span class="attr">where</span>:&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入或更新</span></span><br><span class="line"><span class="comment">//等价sql: INSERT INTO `stu` (`id`,`no`,`name`,`create_user`,`update_time`) VALUES (?,?,?,?,?) ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `no`=VALUES(`no`), `name`=VALUES(`name`), `update_time`=VALUES(`update_time`);</span></span><br><span class="line">Stu.upsert(&#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">no</span>: <span class="string">'004'</span>, <span class="attr">name</span>: <span class="string">'004'</span>, <span class="attr">update_time</span>: <span class="built_in">Date</span>.now()&#125;, &#123;<span class="attr">id</span>: <span class="number">4</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//等价sql: DELETE FROM `stu` WHERE `id` = 91</span></span><br><span class="line">Stu.destroy(&#123;<span class="attr">where</span>: &#123;<span class="attr">id</span>: <span class="number">91</span>&#125;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//异常处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 还可使用原始mysql语句查询：</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">'./db/sequelize_config'</span>);</span><br><span class="line"><span class="comment">//sql执行</span></span><br><span class="line">sequelize.query(<span class="string">"select * from stu"</span>, &#123;<span class="attr">type</span>: sequelize.QueryTypes.SELECT&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//带参数sql执行</span></span><br><span class="line">sequelize.query(<span class="string">"select * from stu where id&lt;$id"</span>, &#123;<span class="attr">bind</span>:&#123;<span class="attr">id</span>:<span class="number">7</span>&#125;, <span class="attr">type</span>: sequelize.QueryTypes.SELECT&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 4.1 sequelize.define定义model</span></span><br><span class="line"><span class="comment">// model还可以直接使用sequelize.define定义，使用示例如下：</span></span><br><span class="line"><span class="keyword">const</span> Stu = sequelize.define(<span class="string">'stu'</span>, &#123;</span><br><span class="line">    id:&#123;<span class="attr">type</span>:DataTypes.INTEGER, <span class="attr">primaryKey</span>:<span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    no:&#123;<span class="attr">type</span>:DataTypes.STRING&#125;,</span><br><span class="line">    name:&#123;<span class="attr">type</span>:DataTypes.STRING&#125;,</span><br><span class="line">    create_time:&#123;<span class="attr">type</span>:DataTypes.DATE&#125;,</span><br><span class="line">    update_time:&#123;<span class="attr">type</span>:DataTypes.DATE&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    freezeTableName: <span class="literal">true</span>, <span class="comment">// 默认false修改表名为复数，true不修改表名，与数据库表名同步</span></span><br><span class="line">    tableName: <span class="string">'stu'</span>,</span><br><span class="line">    timestamps: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="comment">// ## 4.2 异步转同步</span></span><br><span class="line"><span class="comment">// sequelize采用promise方式，语句执行结果是回调处理的。可以通过async、await包裹来实现内部同步处理，示例如下：</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="comment">//通过await等待获取结果</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> Stu.findByPk(<span class="number">7</span>, &#123;<span class="attr">raw</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><!-- END: #12 --><h1 id="TypeORM-1"><a href="#TypeORM-1" class="headerlink" title="TypeORM"></a>TypeORM</h1><!-- \# 21 [【译】Nodejs最好的ORM - TypeORM](https://www.cnblogs.com/brookshi/p/6446155.html) --><p style="text-align:right"> 01:30</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.6.26 星期六  11：47 &lt;/p&gt;


&lt;h1 id=&quot;ORM-介绍&quot;&gt;&lt;a href=&quot;#ORM-介绍&quot; class=&quot;headerlink&quot; title=&quot;ORM 介绍&quot;&gt;&lt;/a&gt;ORM 介绍&lt;/h1&gt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Http基础</title>
    <link href="http://yoursite.com/sum/others/http%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/sum/others/http基础/</id>
    <published>2021-06-24T00:00:00.000Z</published>
    <updated>2021-09-04T09:04:17.210Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <p style="text-align:right">2021.6.24 星期六 19：24</p><p>HTTP是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP默认使用80端口，<!-- 这个端口指的是服务端的端口，而客户端使用的端口是动态分配的。当我们没有指定端口访问时，浏览器会默认帮我们添加80端口。我们也可以自己指定访问端口如：http://www.ip138.com:80。 需要注意的是，现在大多数访问都使用了HTTPS协议，而HTTPS的默认端口为443，如果使用80端口访问HTTPS协议的服务器可能会被拒绝。 --></p><p># <a href="https://blog.csdn.net/weixin_42981419/article/details/86162244" target="_blank" rel="noopener">[HTTP请求方式中8种请求方法（简单介绍）]</a><br><a href="https://www.cnblogs.com/weibanggang/p/9454581.html" target="_blank" rel="noopener">HTTP请求方式中8种请求方法（简单介绍）</a></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>GET方法、POST方法、HEAD方法、PUT方法、DELETE方法、CONNECT方法、OPTIONS方法、TRACE方法。<br><!-- PS: 八大法 --><br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法</p><p>### post 和 put 区分<br><!-- [HTTP请求的常用方法有哪些](https://m.php.cn/article/413913.html) --><br>1、OPTIONS<br>返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性<br><!-- OPTIONS方法用来描述了目标资源的通信选项，会返回服务器支持预定义URL的HTTP策略。 --><br>2、HEAD<br>向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。<br><!-- HEAD方法与GET方法相同，但没有响应体，仅传输状态行和标题部分。这对于恢复相应头部编写的元数据非常有用，而无需传输整个内容。 --><br>3、GET<br>向特定的资源发出请求。<br>注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。<br><!-- GET方法用于使用给定的URI从给定服务器中检索信息，即从指定资源中请求数据。使用GET方法的请求应该只是检索数据，并且不应对数据产生其他影响。 --><br>4、POST<br>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br> POST方法用于将数据发送到服务器以创建或更新资源，它要求服务器确认请求中包含的内容作为由URI区分的Web资源的另一个下属。<br><!-- POST请求永远不会被缓存，且对数据长度没有限制；我们无法从浏览器历史记录中查找到POST请求。 --><br>5、PUT<br>向指定资源位置上传其最新内容<br><!-- PUT方法用于将数据发送到服务器以创建或更新资源，它可以用上传的内容替换目标资源中的所有当前内容。它会将包含的元素放在所提供的URI下，如果URI指示的是当前资源，则会被改变。如果URI未指示当前资源，则服务器可以使用该URI创建资源。 --><br>6、DELETE<br>请求服务器删除Request-URL所标识的资源<br><!-- DELETE方法用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。 --><br>7、TRACE<br>回显服务器收到的请求，主要用于测试或诊断<br><!-- TRACE方法用于沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量。 --><br>8、CONNECT<br>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br><!-- CONNECT方法用来建立到给定URI标识的服务器的隧道；它通过简单的TCP / IP隧道更改请求连接，通常实使用解码的HTTP代理来进行SSL编码的通信（HTTPS）。 --></p><p>注意：<br>1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；<br>当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。<br>2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。</p><h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><!-- 1、客户端连接到Web服务器2、发送HTTP请求3、服务器接受请求并返回HTTP响应4、释放连接TCP连接5、客户端浏览器解析HTML内容 --><h3 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h3><p>Request: 请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。<br>Response: 状态行、消息报头、空行和响应正文.</p><p>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本<br>状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ## respons</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;!--body goes here--&gt; &lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><!-- 200 OK  当您的操作将在响应正文中返回数据时，出现此结果。204 No Content 当您的操作成功，但不在响应正文中返回数据时，出现此结果。304 Not Modified（重定向）  当测试实体自上次检索以来是否被修改时，出现此结果。403 Forbidden   客户端错误401 Unauthorized 客户端错误413 Payload Too Large（客户端错误） 当请求长度过长时，出现此结果。412 Precondition Failed  客户端错误400 BadRequest（客户端错误） 当参数无效时，出现此结果。404 Not Found（客户端错误） 当资源不存在时，出现此结果。405 Method Not Allowed（客户端错误）由于方法和资源组合不正确而出现此错误。 例如，您不能对一个实体集合使用 DELETE 或 PATCH。501 Not Implemented（服务器错误） 当未实施某个请求的操作时，出现此结果。503 Service Unavailable（服务器错误） 当 Web API 服务不可用时，出现此结果。 --><h3 id="200"><a href="#200" class="headerlink" title="200"></a>200</h3><h4 id="HTTP状态200（OK）"><a href="#HTTP状态200（OK）" class="headerlink" title="HTTP状态200（OK）"></a>HTTP状态200（OK）</h4><p>状态代码表示该请求已经被成功地处理在服务器上。响应有效负载取决于为请求选择的HTTP方法。</p><p>201状态码英文名称是Created，该状态码表示已创建。成功请求并创建了新的资源，该请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。<br>假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</p><h4 id="202"><a href="#202" class="headerlink" title="202"></a>202</h4><p><a href="http://restful.p2hp.com/resources/http-status-codes/http-status-202-accepted" target="_blank" rel="noopener">HTTP状态202（Accepted）</a><br>HTTP状态202表示已接受处理请求，但处理尚未完成。当实际操作本质上是异步时，此状态代码很有用。<br>其目的是允许服务器接受对某些其他进程的请求（可能是每天只运行一次的面向批处理的进程），而不要求用户代理与服务器的连接持续到进程完成为止。</p><h4 id="204"><a href="#204" class="headerlink" title="204"></a>204</h4><p>204 No Content 当您的操作成功，但不在响应正文中返回数据时，出现此结果。<br><a href="http://restful.p2hp.com/resources/http-status-codes/http-status-204-no-content" target="_blank" rel="noopener">HTTP状态204 (No Content)</a><br>HTTP状态204 (No Content)表示服务器已成功完成请求，并且在响应有效负载正文中没有要发送的内容。服务器可能希望以entity-headers的形式返回更新的元信息，如果存在，应该将其应用于当前文档的活动视图（如果有的话）。</p><p>204响应绝不能包含消息体，因此总是在头字段之后的第一个空行终止。</p><p>默认情况下，204 (No Content)响应是可缓存的。如果需要覆盖缓存，则响应必须包括缓存各自的缓存头。</p><p>例如，您可能希望204 (No Content)在UPDATE操作中返回状态，其中请求有效负载足够大而不能来回传输。用户代理将有效负载发送到服务器以更新资源，如果操作成功，服务器将响应204以指示成功，以便客户端应用程序可以更新其UI以通知用户操作的成功。</p><p>它还经常与期望自动数据传输普遍存在的接口一起使用，例如在分布式版本控制系统中。</p><p>使用惯例是，在 PUT 请求中进行资源更新，但是不需要改变当前展示给用户的页面，那么返回 204 No Content。<br>如果新创建了资源，那么返回 201 Created 。如果页面需要更新以反映更新后的资源，那么需要返回 200 。</p><h4 id="201"><a href="#201" class="headerlink" title="201"></a>201</h4><p>201-option请求<br>出于安全考虑，并不是所有域名访问后端服务都可以。其实在正式跨域之前，浏览器会根据需要发起一次预检（也就是option请求），用来让服务端返回允许的方法（如get、post），被跨域访问的Origin（来源或者域），还有是否需要Credentials(认证信息)等。那么浏览器在什么情况下能预检呢？</p><h3 id="重定向-301和302"><a href="#重定向-301和302" class="headerlink" title="重定向 301和302"></a>重定向 301和302</h3><p>301 Moved Permanently。代表永久性转移(Permanently Moved)<br>302 Found。 代表暂时性转移(Temporarily Moved )<br><!-- 301 表示被请求 url 永久转移到新的 url；302 表示被请求 url 临时转移到新的 url。 --></p><p>详细来说，301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。</p><!-- 就是地址A跳转到地址B啦。百度百科的解释：重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其它位置（如： --><p>网页重定向、域名的重定向、路由选择的变化<!-- 也是对数据报文经由路径的一种重定向）。 --></p><!-- \#1 [http状态码301和302详解及区别](https://blog.csdn.net/ai2000ai/article/details/80242193) --><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），<strong>搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址</strong>；<br>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，<strong>搜索引擎会抓取新的内容而保存旧的网址</strong>。</p><!-- 301 搜索引擎会索引新 url 和新 url 页面的内容；302 搜索引擎可能会索引旧 url 和 新 url 的页面内容。302 的返回码可能被别人利用，劫持你的网址。因为搜索引擎索引他的网址，他返回 302 跳转到你的页面。 --><!-- \# 2 [HTTP状态码301和302，你都了解有哪些用途吗](https://www.bilibili.com/read/cv7432129/) --><h4 id="三-301重定向有什么优点？"><a href="#三-301重定向有什么优点？" class="headerlink" title="三. 301重定向有什么优点？"></a>三. 301重定向有什么优点？</h4><p>有利于网站首选域的确定，对于同一资源页面多条路径的301重定向有助于URL权重的集中。例如 <a href="http://www.conimi.com和" target="_blank" rel="noopener">www.conimi.com和</a> conimi.com 是两个不同的域名，但是指向的内容完全相同，搜索引擎会对两个域名收录情况不同，这样导致网站权重和排名被分散；对conimi.com 做301重定向跳转至<a href="http://www.conimi.com" target="_blank" rel="noopener">www.conimi.com</a> 后，权重和排名集中到<a href="http://www.conimi.com，从而提升自然排名。" target="_blank" rel="noopener">www.conimi.com，从而提升自然排名。</a><br>&lt;!– 四. 302重定向又是什么鬼？<br>302重定向（302 Move Temporarily），指页面暂时性转移，表示资源或页面暂时转移到另一个位置，常被用作网址劫持，容易导致网站降权，严重时网站会被封掉，不推荐使用。</p><p>五. 301与302的区别<br>301重定向是页面永久性转移，搜索引擎在抓取新内容的同时也将旧的网址替换成重定向之后的网址；</p><p>302重定向是页面暂时性转移，搜索引擎会抓取新的内容而保存旧的网址并认为新的网址只是暂时的。<br>六. 301重定向的用途</p><ol><li>将不带www的域名转向带www的域名</li><li>将多个域名跳转至同一个站点<br>–&gt;<!-- #### 2、可是，为什么要进行重定向啊？什么时候需要重定向呢？ --><h4 id="3、那么，什么时候进行301或者302跳转呢？"><a href="#3、那么，什么时候进行301或者302跳转呢？" class="headerlink" title="3、那么，什么时候进行301或者302跳转呢？"></a>3、那么，什么时候进行301或者302跳转呢？</h4>使用301跳转的场景：<br>1）域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2）在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3）空间服务器不稳定，换空间的时候。</li><li>将多个域名跳转至同一个站点：</li></ol><p>使用302跳转的场景：<br>–尽量使用301跳转！</p><h4 id="4、为什么尽量要使用301跳转？——网址劫持！"><a href="#4、为什么尽量要使用301跳转？——网址劫持！" class="headerlink" title="4、为什么尽量要使用301跳转？——网址劫持！"></a>4、为什么尽量要使用301跳转？——网址劫持！</h4><p>&lt;!– 这里摘录百度百科上的解释：<br>从网址A 做一个302 重定向到网址B 时，主机 服务器的隐含意思是网址A 随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302 重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。如果搜索引擎在遇到302 转向时，百分之百的都抓取目标网址B 的话，就不用担心网址URL 劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。比如说，有的时候A 网址很短，但是它做了一个302 重定向到B 网址，而B 网址是一个很长的乱七八糟的URL 网址，甚至还有可能包含一些问号之类的参数。很自然的，A 网址更加用户友好，而B 网址既难看，又不用户友好。这时Google 很有可能会仍然显示网址A。由于搜索引擎排名算法只是程序而不是人，在遇到302 重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL 劫持的可能性。也就是说，一个不道德的人在他自己的网址A 做一个302 重定向到你的网址B，出于某种原因， Google 搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B 上的内容，这种情况就叫做网址URL 劫持。你辛辛苦苦所写的内容就这样被别人偷走了。302 重定向所造成的网址URL 劫持现象，已经存在一段时间了。不过到目前为止，似乎也没有什么更好的解决方法。在正在进行的谷歌大爸爸数据中心转换中，302 重定向问题也是要被解决的目标之一。从一些搜索结果来看，网址劫持现象有所改善，但是并没有完全解决。</p><p>我的理解是， –&gt;从网站A（网站比较烂）上做了一个302跳转到网站B（搜索排名很靠前），这时候有时搜索引擎会使用网站B的内容，但却收录了网站A的地址，这样在不知不觉间，网站B在为网站A作贡献，网站A的排名就靠前了。</p><p>301跳转对查找引擎是一种对照驯良的跳转编制，也是查找引擎能够遭遇的跳转编制，它告诉查找引擎，这个地址弃用了，永远转向一个新地址，可以转移新域名的权重。而302重定向很容易被搜索引擎误认为是利用多个域名指向同一网站，那么你的网站就会被封掉，罪名是“利用重复的内容来干扰Google搜索结果的网站排名”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;p style=&quot;text-align:right&quot;&gt;2021.6.24 星期六 19：24&lt;/p&gt;

&lt;p&gt;HTTP是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP默认使用80端口，&lt;!-- 这个端口指的是服务端的端
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>服务端各层解耦</title>
    <link href="http://yoursite.com/sum/ser/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%84%E5%B1%82%E8%A7%A3%E8%80%A6/"/>
    <id>http://yoursite.com/sum/ser/服务端各层解耦/</id>
    <published>2021-06-24T00:00:00.000Z</published>
    <updated>2021-06-24T08:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.6.24 星期四  16：21 </p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="modal层，service层"><a href="#modal层，service层" class="headerlink" title="modal层，service层"></a>modal层，service层</h2><!-- [Java中DAO层、Service层和Controller层的区别](https://blog.csdn.net/qq_22771739/article/details/82344336) --><p>DAO层：<br>DAO层叫数据访问层，全称为data access object，属于一种比较底层，比较基础的操作，具体到对于某个表的增删改查，也就是说某个DAO一定是和数据库的某一张表一一对应的，其中封装了增删改查基本操作，建议DAO只做原子操作，增删改查。</p><p>Service层：<br>Service层叫服务层，被称为服务，粗略的理解就是对一个或多个DAO进行的再次封装，封装成一个服务，所以这里也就不会是一个原子操作了，需要事物控制。</p><p>Controler层：<br>Controler负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面。</p><p>总结：<br>个人理解DAO面向表，Service面向业务。后端开发时先数据库设计出所有表，然后对每一张表设计出DAO层，然后根据具体的业务逻辑进一步封装DAO层成一个Service层，对外提供成一个服务。</p><!-- [Java中dao层和service层的区别](https://blog.csdn.net/fanjieshanghai/article/details/88219652) [java中dao层和service层的区别是什么？](https://zhidao.baidu.com/question/364802857.html?qbl=relate_question_0)--><p>标准主流现在的编程方式都是采用MVC综合设计模式，MVC本身不属于设计模式的一种，它描述的是一种结构，最终目的达到<strong>解耦</strong>，<br>解耦说的意思是你更改某一层代码，不会影响我其他层代码，如果你会像spring这样的框架，你会了解面向接口编程，表示层调用控制层，控制层调用业务层，业务层调用数据访问层。<br>初期也许都是new对象去调用下一层，比如你在业务层new一个DAO类的对象，调用DAO类方法访问数据库，这样写是不对的，因为在业务层中是不应该含有具体对象，最多只能有引用，如果有具体对象存在，就耦合了。当那个对象不存在，我还要修改业务的代码，这不符合逻辑。好比主板上内存坏了，我换内存，没必要连主板一起换。我不用知道内存是哪家生产，不用知道多大容量，只要是内存都可以插上这个接口使用。这就是MVC的意义。</p><p>接下来说你感觉service的意义，其实因为你现在做东西分层次不是那么严格，在一个你们做东西业务本身也少，<br>举个最简单的例子，你做一个分页的功能，数据1000条，你20条在一个页，你可以把这个功能写成工具类封装起来，然后在业务层里调用这个封装的方法，这才是业务里真正干得事，只要没访问数据库的，都要在业务里写。<br>再有不明白的追问，这是经验问题，呵呵，其实以后你就会懂。只是刚开始写的代码都是有个请求，我就去数据库取，业务几乎没有。</p><!-- [java设计模式中既然有dao层为什么还要service层区别是什么？](https://zhidao.baidu.com/question/299223954.html?qbl=relate_question_7) --><p>dao层是和数据库打交道的 逻辑层 里面封装了数据库操作的一些基本方法。。<br>service层是业务层 很可能你在注册一个用户的时候还需要往日志表里加一个日志，那么就在service对这个业务实现 并对这个业务加上事务。。好处不言而喻了。。如果你在你的C层 连续用UserDao LogDao 那万一某一步出错了。有可能造成User加进去 Log没加进去。</p><!-- [Action层, Service层 ，modle层 和 Dao层详解](https://blog.csdn.net/David_snjly/article/details/45568573) --><p>model层：就是对应的数据库表的实体类，即将现实对象抽象成类。<br>&lt;!–<br>Dao层：是使用了Hibernate连接数据库、操作数据库（增删改查）和model层。</p><p>Service层：引用对应的Dao数据库操作，在这里可以编写自己需要的代码（比如简单的判断）。</p><p>Action层：引用对应的Service层，在这里结合Struts的配置文件，跳转到指定的页面，当然也能接受页面传递的请求数据，也可以做些计算处理。</p><p>以上的Hibernate，Struts，都需要注入到Spring的配置文件中，Spring把这些联系起来，成为一个整体。</p><p>一般java都是三层架构：数据访问层（dao）、 业务逻辑层（biz 或者services）、 界面层（ui） –&gt;</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.6.24 星期四  16：21 &lt;/p&gt;



&lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;h2 id=&quot;modal层，
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Gzip压缩</title>
    <link href="http://yoursite.com/sum/jsplus/gzip%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/sum/jsplus/gzip压缩/</id>
    <published>2021-06-14T00:00:00.000Z</published>
    <updated>2021-06-14T13:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.6.14 星期一  16:53 </p><p>Gzip压缩传输能更加有效节约带宽流量。他先把文本压缩为.gz然后传输给浏览器，最后由浏览器负责解压缩呈现给用户。<br><!-- 老版本的浏览器可能不能显示，但是现在大多数浏览器都能显示。 --><br>&lt;!–<br><a href="https://www.cnblogs.com/kevingrace/p/10018914.html" target="_blank" rel="noopener">Nginx性能优化功能- Gzip压缩(大幅度提高页面加载速度)</a><br>Nginx开启Gzip压缩功能， 可以使网站的css、js 、xml、html 文件在传输时进行压缩，提高访问速度, 进而优化Nginx性能!  Web网站上的图片，视频等其它多媒体文件以及大文件，因为压缩效果不好，所以对于图片没有必要支压缩，如果想要优化，可以图片的生命周期设置长一点，让客户端来缓存。 开启Gzip功能后，Nginx服务器会根据配置的策略对发送的内容, 如css、js、xml、html等静态资源进行压缩, 使得这些内容大小减少，在用户接收到返回内容之前对其进行处理，以压缩后的数据展现给客户。这样不仅可以节约大量的出口带宽，提高传输效率，还能提升用户快的感知体验, 一举两得; 尽管会消耗一定的cpu资源，但是为了给用户更好的体验还是值得的。</p><p>经过Gzip压缩后页面大小可以变为原来的30%甚至更小，这样，用户浏览页面的时候速度会快得多。Gzip 的压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压并解析。浏览器那里不需要我们担心，因为目前的巨大多数浏览器 都支持解析Gzip过的页面。</p><p>Gzip压缩作用：将响应报⽂发送⾄客户端之前可以启⽤压缩功能，这能够有效地节约带宽，并提⾼响应⾄客户端的速度。Gzip压缩可以配置http,server和location模块下。Nginx开启Gzip压缩参数说明：<br>–&gt;</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><!-- \#1 [服务器端如何开启GZIP压缩功能](https://blog.csdn.net/weixin_33974433/article/details/87963137) --><!-- \#1 [服务器端如何开启GZIP压缩功能](https://blog.csdn.net/gplzx110/article/details/107064957) --><!-- $_PS: 两篇一样。简单介绍 3个 web服务器 开启gzip --><!-- 我们知道做好负载均衡对网站的正常运行，用户体验相当重要。在负载均衡中有一个必须要做的事情就是给服务器开启GZIP压缩功能，对用户请求的页面进行压缩处理，以达到节省网络带宽，提高网站速度的作用。 --><p>GZIP是若干文件压缩程序的简称，通常指GNU计划的实现，此处的GZIP代表的就是GUN ZIP，这也是HTTP1.1协议定义的两种压缩方法中最常用的一种压缩方法，客户端浏览器大都支持这种压缩格式。</p><p>Nginx如何开启GZIP功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_buffers 4 16K;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_types text/plain application/x-javascript text/css  text/xml application/xml;</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;; #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure></p><p>nginx实现资源压缩的原理是通过ngx_http_gzip_module模块拦截请求，并对需要做gzip的类型做gzip压缩，该模块是默认基础的，不需要重新编译，直接开启即可。</p><!-- Apache如何开启GZIP功能看查看是否已经开启mod_deflate模块，如果没有则需要先加载，在配置文件httpd.conf中将下面 两行前面的 # 去掉LoadModule deflate_module modules/mod_deflate.soLoadModule headers_module modules/mod_headers.so<IfModule mod_deflate.c># 告诉 apache 对传输到浏览器的内容进行压缩SetOutputFilter DEFLATE# 压缩等级 9DeflateCompressionLevel 9# 压缩类型 html、xml、php、css、jsAddOutputFilterByType DEFLATE text/html text/plain text/xml application/x-javascript application/x-httpd-phpAddOutputFilter DEFLATE js css</IfModule>IIS如何开启GZIP功能打开C:\Windows\System32\inetsrv\MetaBase.xml --><!-- \#2 [HTTP方式下的Gzip压缩传输](https://blog.csdn.net/clerk0324/article/details/51672933) --><h2 id="web服务器-和客户端-协商过程"><a href="#web服务器-和客户端-协商过程" class="headerlink" title="web服务器 和客户端 协商过程"></a>web服务器 和客户端 协商过程</h2><p>双方的协商过程如下：<br>1、首先浏览器请求某个URL 地址，并在请求的头 (head) 中设置属性accept-encoding值为gzip、deflate，表明浏览器支持gzip和deflate这两种压缩方式。</p><blockquote><p>注：gzip是一种数据压缩格式，默认且目前仅使用deflate算法压缩data部分；deflate是一种压缩算法,是huffman编码的一种加强。</p></blockquote><p>2、WEB服务器接收到请求后判断浏览器是否支持压缩，如果支持就传送压缩后的响应内容，否则传送不经过压缩的内容；</p><p>3、浏览器获取响应内容后，判断内容是否被压缩，如果是则解压缩，然后显示响应页面的内容。（IE5.5以上才支持gzip）</p><p>GZIP压缩的比率往往在3到10倍，也就是本来90k大小的页面，采用压缩后实际传输的内容大小只有28至30K大小，这可以大大节省服务器的网络带宽，同时如果应用程序的响应足够快时，网站的速度瓶颈就转到了网络的传输速度上，因此内容压缩后就可以大大的提升页面的浏览速度</p><h3 id="web服务器处理http压缩的过程"><a href="#web服务器处理http压缩的过程" class="headerlink" title="web服务器处理http压缩的过程"></a>web服务器处理http压缩的过程</h3><!-- 1. Web服务器接收到浏览器的HTTP请求后，检查浏览器是否支持HTTP压缩（Accept-Encoding 信息）；2. 如果浏览器支持HTTP压缩，Web服务器检查请求文件的后缀名；3. 如果请求文件是HTML、CSS等静态文件，Web服务器到压缩缓冲目录中检查是否已经存在请求文件的最新压缩文件；4. 如果请求文件的压缩文件不存在，Web服务器向浏览器返回未压缩的请求文件，并在压缩缓冲目录中存放请求文件的压缩文件；5. 如果请求文件的最新压缩文件已经存在，则直接返回请求文件的压缩文件；6. 如果请求文件是动态文件，Web服务器动态压缩内容并返回浏览器，压缩内容不存放到压缩缓存目录中。 --><!-- \#3 [nginx中如何设置gzip（总结）](https://www.cnblogs.com/Renyi-Fan/p/11047490.html) --><!-- [Nginx 启用gzip压缩](https://www.cnblogs.com/yingsong/p/6047311.html) --><!-- $_PS: 实际使用记录。包括每个配置参数说明。 --><h2 id="实际配置"><a href="#实际配置" class="headerlink" title="实际配置"></a>实际配置</h2><p>gzip配置的常用参数</p><p>gzip on|off; #是否开启gzip<br>gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)<br>gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)<br>gzip_disable #正则匹配UA 什么样的Uri不进行gzip<br>gzip_min_length 200 # 开始压缩的最小长度(再小就不要压缩了,意义不在)<br>gzip_http_version 1.0|1.1 # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)<br>gzip_proxied # 设置请求者代理服务器,该如何缓存内容<br>gzip_types text/plain application/xml # 对哪些类型的文件用压缩 如txt,xml,html ,css<br>gzip_vary on|off # 是否传输gzip压缩标志</p><p>一方面，不是压缩级别越高越好，其实gzip_comp_level 1的压缩能力已经够用了，后面级别越高，压缩的比例其实增长不大，反而很吃处理性能。<br>另一方面，压缩一定要和静态资源缓存相结合，缓存压缩后的版本，否则每次都压缩高负载下服务器肯定吃不住。</p><h3 id="什么样的资源不适合开启gzip压缩？"><a href="#什么样的资源不适合开启gzip压缩？" class="headerlink" title="什么样的资源不适合开启gzip压缩？"></a>什么样的资源不适合开启gzip压缩？</h3><!-- 二进制资源：例如图片/mp3这样的二进制文件,不必压缩；因为压缩率比较小, 比如100->80字节,而且压缩也是耗费CPU资源的. --><p>1) 图片类型资源 (还有视频文件)<br>原因：图片如jpg、png文件本身就会有压缩，所以就算开启gzip后，压缩前和压缩后大小没有多大区别，所以开启了反而会白白的浪费资源。（可以试试将一张jpg图片压缩为zip，观察大小并没有多大的变化。虽然zip和gzip算法不一样，但是可以看出压缩图片的价值并不大）<br>2) 大文件资源<br>原因：会消耗大量的cpu资源，且不一定有明显的效果。<br>  <!-- [Nginx性能优化功能- Gzip压缩(大幅度提高页面加载速度)](https://www.cnblogs.com/kevingrace/p/10018914.html) --></p><!-- 3、nginx中gzip模块需要额外安装么（看清楚模块名）？不需要：ngx_http_gzip_module是Nginx默认集成的，不需要重新编译，直接开启即可 --><!-- 4、如何解决：公司的静态资源服务器全部使用的Nginx，且都开启了gzip压缩。内部测试是完全正常的，然而一到外网，居然没有做gzip！ ？原因：做负载均衡的机器上面没开gzip：在应用服务器前，公司还有一层Nginx的集群作为七层负责均衡，在这一层上，是没有开启gzip的。还需要设置gzip_http_version为1.0：nginx和后端的upstream server之间默认是用HTTP/1.0协议通信的在应用服务器前，公司还有一层Nginx的集群作为七层负责均衡，在这一层上，是没有开启gzip的。如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间默认是用HTTP/1.0协议通信的。如果我们的Cache Server也是nginx，而前端的nginx没有开启gzip。同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩。 --><h3 id="gzip-proxied"><a href="#gzip-proxied" class="headerlink" title="gzip_proxied"></a>gzip_proxied</h3><p>Nginx做为反向代理的时候启用：</p><p>off – 关闭所有的代理结果数据压缩<br>expired – 如果header中包含”Expires”头信息，启用压缩<br>no-cache – 如果header中包含”Cache-Control:no-cache”头信息，启用压缩<br>no-store – 如果header中包含”Cache-Control:no-store”头信息，启用压缩<br>private – 如果header中包含”Cache-Control:private”头信息，启用压缩<br>no_last_modified – 启用压缩，如果header中包含”Last_Modified”头信息，启用压缩<br>no_etag – 启用压缩，如果header中包含“ETag”头信息，启用压缩<br>auth – 启用压缩，如果header中包含“Authorization”头信息，启用压缩<br>any – 无条件压缩所有结果数据</p><h3 id="gzip-static"><a href="#gzip-static" class="headerlink" title="gzip_static"></a>gzip_static</h3><!-- \#4 [前端性能优化：gzip压缩文件传输数据](https://www.cnblogs.com/zs-note/p/9556390.html) --><!-- \#4 [前端性能优化之 gzip压缩文件传输数据](https://www.cnblogs.com/caijinghong/p/14085962.html) --><!-- $_PS: 前端处理部分。有gz 说明 --><!-- 一、文件压缩的好处 --><!-- 二、http协议如何支持压缩文件的传输 --><!-- 三、什么时候压缩 --><!-- 四、服务器响应请求时压缩（nginx） --><!-- 五、构建时压缩（webpack） --><!-- 5、服务端nginx启动gzip_static --><p>gzip_static是nginx对于静态文件的处理模块，该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。<br>该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。</p><p>为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。<br>这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件<!-- （参考文章中提到本文未尝试） -->。</p><!-- nginx需要安装http_gzip_static_module以支持gzip_static，具体方法见《源码安装nginx》 --><!-- 六、生产环境：proxy_pass+gzip --><h3 id="proxy-pass-gzip"><a href="#proxy-pass-gzip" class="headerlink" title="proxy_pass+gzip"></a>proxy_pass+gzip</h3><!-- 上线后发现生产环境中静态文件的压缩配置没有起作用，经过定位发现生产环境加了反向代理导致nginx没有返回.gz文件。看到参考文章中二、三两篇时确定是gzip_http_version和proxy_set_header Accept-Encoding配置问题。 --><!-- 如果我们使用了proxy_pass进行反向代理，那么nginx和upstream server之间默认是用HTTP/1.0协议通信的。 如果我们的Cache Server也是nginx，而前端的nginx没有开启gzip。 同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩。 --><!-- 所以，最终的解决方案是， -->在静态文件服务nginx中配置gzip_http_version为1.0<br>同时，反向代理服务器应该添加请求头proxy_set_header Accept-Encoding ‘gzip’，通知静态文件服务器客户端能够理解的gzip压缩文件，使其返回.gz文件。<br><br><br><!-- #### 浏览器请求头设置那么问题来了，前端发起请求需要设置 Accept-Encoding:gzip 吗？这样不就是强制了吗？如果客户端不支持怎么办？关于HTTP 请求头Accept-Encoding 的理解Accept-Encoding表示Http响应是否进行压缩,一般的浏览器在访问网页时,是默认在请求头中加入Accept-Encoding: gzip, deflate ,表示这个请求的内容希望被压缩,压缩的目的是为了减少网络流量,但是这个只是协议,只能是要求而不是强制的,如果服务器不支持压缩或者没有开启压缩,则不能起到作用,如果服务器也是支持压缩或者开启压缩,则会在响应头中加入Content-Encoding: gzip 头部, --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.6.14 星期一  16:53 &lt;/p&gt;

&lt;p&gt;Gzip压缩传输能更加有效节约带宽流量。他先把文本压缩为.gz然后传输给浏览器，最后由浏览器负责解压缩呈现给用户。&lt;br&gt;&lt;!-- 老版本的浏览器可能不能显示，但
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>后台管理页面模版</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E6%A8%A1%E7%89%88/"/>
    <id>http://yoursite.com/sum/jsplus/后台管理页面模版/</id>
    <published>2021-06-14T00:00:00.000Z</published>
    <updated>2021-09-04T15:53:16.541Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.6.14 星期一  21：04 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于真正的前端来说，框架模版 无所畏惧。<br>一般的后台管理系统要求不高，可以使用就ok了，基本条件都是满足。<br>ui/风格样式，demo示例，图表展示，基础组件，权限，路由，包括工具函数，代码规范，打包配置，插件（加载，markdown，请求）等。</p><p>随便选一个，都可以快速开发。<br>难的是，不对模版做魔改。一些后台系统，<!-- 开发不规范， -->在写业务代码的时候，往往把一个很好的模版，越改越乱。<br>也无对模版的取舍。</p><p>后续业务，流程的优化，又是另一个考虑的问题。<br><!-- 我们先从简单的vue-admin-template开始一个新的项目的。业务页面少，仅仅是template；而且熟悉（开发过vue-elelent-admin）, 基于element ui。 简单粗暴。不研究了 --></p><p>不研究了。<!-- star 都多。 --><br>但是开发规范，目录结构等还是需要我们学习借鉴的。</p><h1 id="后台管理页面"><a href="#后台管理页面" class="headerlink" title="后台管理页面"></a>后台管理页面</h1><h2 id="基于vue"><a href="#基于vue" class="headerlink" title="基于vue"></a>基于vue</h2><!-- [Vue管理后台框架选择推荐](https://www.jianshu.com/p/0f41bfe211a8) --><!-- [6个宝藏级Vue管理后台框架 必须收藏](https://zhuanlan.zhihu.com/p/91825869) --><p>vue-element-admin: <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-element-admin</a><br>基础版：<a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-admin-template</a><br><!-- github star: 70.1k, 14.7k  --></p><p>Vue Admin: <a href="https://github.com/taylorchen709/vue-admin" target="_blank" rel="noopener">https://github.com/taylorchen709/vue-admin</a><br>Vue Admin 是一个基于 Vue 2.0 &amp; Bulma 0.3 的后台管理面板（管理系统），相当于是 Vue 版本的 Bootstrap 管理系统，提供了一组通用的后台界面 UI 和组件，其中还有丰富的图表组件，开箱即用<br><!-- 最近的提交是2017.2，网站都访问不了。github star 6.6k --></p><p>vue-manage-system: <a href="https://github.com/lin-xin/vue-manage-system" target="_blank" rel="noopener">https://github.com/lin-xin/vue-manage-system</a><br>基于Vue.js 2.x系列 + Element UI 的后台管理系统解决方案 ,弥补了element中缺少图片裁剪上传、富文本编辑器、图表等这些在后台管理系统中很常见的功能。<br><!-- github star 13.4k。最近一个多月前（20210628）提交 --></p><p>iview-admin: <a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">https://github.com/iview/iview-admin</a><br><!-- github star 15.8k。最近20190815提交 --></p><p>vuestic-admin: <a href="https://github.com/epicmaxco/vuestic-admin" target="_blank" rel="noopener">https://github.com/epicmaxco/vuestic-admin</a><br>一个响应式的仪表盘模板，采用Bootstrap 4和Vue.js构建。这个精美的管理台模板提供了自定义元素组件，如地图，聊天，个人资料卡，图标，进度条等，以及用于登录和注册的预建页面。</p><p>d2-admin: <a href="https://github.com/d2-projects/d2-admin" target="_blank" rel="noopener">https://github.com/d2-projects/d2-admin</a><br>基于 vue.js 和 ElementUI 的管理系统前端解决方案 。<br>D2Admin 是一个完全 开源免费 的企业中后台产品前端集成方案，使用最新的前端技术栈，已经做好大部分项目前期准备工作，并且带有大量示例代码，助力管理系统敏捷开发。<br><!-- 小于 60kb 的本地首屏 js 加载，已经做好大部分项目前期准备工作，并且带有大量示例代码，助力管理系统快速开发。 --></p><!-- ### 其他 --><!-- 漏了一款不错的中后台管理框架： -->Fantastic-admin<br><a href="https://hooray.gitee.io/fantastic-admin/" target="_blank" rel="noopener">https://hooray.gitee.io/fantastic-admin/</a><br><br>bootstrap-vue.js <!-- 这个有没有项目实例 求推荐 --><p>vue-admin-beautiful<!-- 成为全网首家发布vue3.0版本的admin框架 --><br>开源地址：<a href="https://github.com/chuzhixin/vue-admin-beautiful/" target="_blank" rel="noopener">https://github.com/chuzhixin/vue-admin-beautiful/</a></p><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><p>ant design pro: <a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-pro</a><br>29.9k</p><p>react-admin: <a href="https://github.com/marmelab/react-admin" target="_blank" rel="noopener">https://github.com/marmelab/react-admin</a><br>17.6k</p><p>dva-boot-admin</p><h2 id="ng"><a href="#ng" class="headerlink" title="ng"></a>ng</h2><p>ng-alain</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>layui -<br>jQuery - bootstrap</p><p>ant-design for vue </p><p>gitee.com/may_zhouwei/peach-design-template<br><!-- 这个后台项目不错，v -->ue3的</p><p>material design狂热追随者表示一直用Vuetify<!-- ，一直用一直爽。 --></p><!-- 可以参考CabloyJS全栈框架，前端vue+framework7，后端egg --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.6.14 星期一  21：04 &lt;/p&gt;


&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;对于真正的前端来说，框架模
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Lerna 学习笔记</title>
    <link href="http://yoursite.com/sum/others/lerna%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/sum/others/lerna 学习笔记/</id>
    <published>2021-05-30T00:00:00.000Z</published>
    <updated>2021-09-04T09:01:46.163Z</updated>
    
    <content type="html"><![CDATA[<p>Lerna: <a href="https://www.lernajs.cn" target="_blank" rel="noopener">https://www.lernajs.cn</a><br>yarn workspace: <a href="https://yarn.bootcss.com/docs/workspaces/" target="_blank" rel="noopener">https://yarn.bootcss.com/docs/workspaces/</a></p><p style="text-align:right"> 2021.5.30 星期日 </p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><!-- lerna: <https://www.lernajs.cn> --><p><a href="https://github.com/lerna/lerna" target="_blank" rel="noopener">https://github.com/lerna/lerna</a></p><!-- lerna管理开发者最关心的几个问题lerna采用的是monorepo模式，它和multrepo有什么区别?lerna是如何实现内部文件软链的？是npm link么？lerna在哪些场景下使用会比较优势？lerna如何安装依赖，如何更新，如何发布？lerna如何提升安装性能？lerna如何指定发布版本，如何指定发布子目录？————————————————版权声明：本文为CSDN博主「after you」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/gwdgwd123/article/details/86715012 --><h1 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h1><p>MonoLith：一个项目，一个 Git 仓库。<br>multrepo：将项目分化为多个模块，并针对每一个模块单独的开辟一个 reporsitory来进行管理。<br>monorepo：是将所有的模块统一的放在一个主干分支之中管理。<br><!-- Monorepo： 多个项目的代码放在在同一存储库中这种开发策略称 --><br>lerna： Babel开发用来管理多包的工具，基于 Monorepo 理念在工具端的实现。<br>yarn: Facebook 贡献的 Javascript 包管理器。</p><!-- ## 关于将大型代码仓库分割成多个独立版本化的 软件包（package）对于代码共享来说非常有用。但是，如果某些更改 跨越了多个代码仓库的话将变得很 麻烦 并且难以跟踪，并且， 跨越多个代码仓库的测试将迅速变得非常复杂。为了解决这些（以及许多其它）问题，某些项目会将 代码仓库分割成多个软件包（package），并将每个软件包存放到独立的代码仓库中。但是，例如 Babel、 React、Angular、Ember、Meteor、Jest 等项目以及许多其他项目则是在 一个代码仓库中包含了多个软件包（package）并进行开发。Lerna 是一种工具，针对 使用 git 和 npm 管理多软件包代码仓库的工作流程进行优化 --><!-- ## 繁星微前端：多个子项目，会依赖到主项目。而且子项目有一些相同的依赖，包括npm包。我们在开发一个大型项目的时候，通常会遇到如下情况：一个业务工程Project1，会同时依赖于lib1、lib2、lib3，其中lib2又依赖于lib1，lib3又依赖于lib1和lib2这种复杂依赖情况。（lib1,lib2,lib3是自己开发维护的npm包，分别发布到私有服务器，我们称为自研依赖库，以区别第三方依赖库）。--><h1 id="lerna"><a href="#lerna" class="headerlink" title="lerna"></a>lerna</h1><p>A tool for managing JavaScript projects with multiple packages.</p><blockquote><p>Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.</p></blockquote><p>Lerna 是一个用来优化托管在git\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。</p><!-- [Lerna 中文教程详解](https://juejin.cn/post/6844903856153821198) --><h2 id="两种工作模式"><a href="#两种工作模式" class="headerlink" title="两种工作模式"></a>两种工作模式</h2><h3 id="Fixed-Locked-mode-default"><a href="#Fixed-Locked-mode-default" class="headerlink" title="Fixed/Locked mode (default)"></a>Fixed/Locked mode (default)</h3><p>固定模式，通过lerna.json的版本进行版本管理。<!-- 当你执行lerna publish命令时， 如果距离上次发布只修改了一个模块，将会更新对应模块的版本到新的版本号，然后你可以只发布修改的库。 --><br><!-- 这种模式也是Babel使用的方式。如果你希望所有的版本一起变更， 可以更新minor版本号，这样会导致所有的模块都更新版本。 --><br>vue,babel都是用这种，在publish的时候,会在lerna.json文件里面”version”: “0.1.5”,依据这个号，进行增加，只选择一次，其他有改动的包自动更新版本号。</p><h3 id="Independent-mode"><a href="#Independent-mode" class="headerlink" title="Independent mode"></a>Independent mode</h3><p>lerna init –independent初始化项目。<br>lerna.json文件里面”version”: “independent”,<br>独立模式允许管理者对每个库单独改变版本号，每次发布的时候，<!-- 你 --><strong>需要为每个改动的库指定版本号</strong>。<br><!-- 这种情况下， lerna.json的版本号不会变化了， 默认为independent。 --></p><p>publish时得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。<br><!-- > 如果使用了 independent 方式进行版本控制，在 packages 内部的包进行互相依赖时，每次发布之后记得修改下发布后的版本号，否则在本地调试时会出现刚发布的代码不生效问题(这个问题本人亲自遇到过，单独说下) --></p><!-- ### 比较固定模式中，packages下的所有包共用一个版本号(version)，会自动将所有的包绑定到一个版本号上(该版本号也就是lerna.json中的version字段)，所以任意一个包发生了更新，这个共用的版本号就会发生改变。独立模式允许每一个包有一个独立的版本号，在使用lerna publish命令时，可以为每个包单独制定具体的操作，同时可以只更新某一个包的版本号。此种模式时，lerna.json中的version字段指定为independent即可。 --><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><!-- 如何创建一次 -->lerna工作流:<br>lerna boostrap(依赖包安装) –&gt; 开发模块 –&gt; git commit –&gt; lerna changed(查看包变化) –&gt; lerna publish。<br><!-- 或者version, 项目不需要发包，只提交git仓库并打tag。 --><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">lerna init --independent</span><br><span class="line">lerna boostrap --hoist</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> packages &amp;&amp; mkdir commPkg pkg1 pkg2</span><br><span class="line"><span class="comment"># 创建新项目，或者现有项目</span></span><br><span class="line"></span><br><span class="line">lerna add commPkg --scope=pkg1</span><br><span class="line">lerna add commPkg --scope=pkg2</span><br><span class="line"></span><br><span class="line">lerna run --parallel serve</span><br><span class="line"><span class="comment">## npm run dev:all</span></span><br><span class="line"><span class="comment">## npm run dev:system</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交 发布</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'feat: sth.'</span></span><br><span class="line"></span><br><span class="line">lerna changed</span><br><span class="line">lerna publish</span><br></pre></td></tr></table></figure><p>lerna.json 配置项<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.1.3"</span>, <span class="comment">// independent</span></span><br><span class="line">  <span class="attr">"npmClient"</span>: <span class="string">"npm"</span>, <span class="comment">// cnpm;yarn: run all commands with yarn</span></span><br><span class="line">  <span class="attr">"command"</span>: &#123;</span><br><span class="line">    <span class="attr">"publish"</span>: &#123;</span><br><span class="line">      <span class="attr">"ignoreChanges"</span>: [<span class="string">"ignored-file"</span>, <span class="string">"*.md"</span>],</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"chore(release): publish"</span>,</span><br><span class="line">      <span class="attr">"registry"</span>: <span class="string">"https://npm.xesv5.com"</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"bootstrap"</span>: &#123;</span><br><span class="line">      <span class="attr">"scope"</span>: [], <span class="comment">// </span></span><br><span class="line">      <span class="attr">"ignore"</span>: <span class="string">"component-*"</span>,</span><br><span class="line">      <span class="attr">"npmClientArgs"</span>: [<span class="string">"--no-package-lock"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"version"</span>: &#123;</span><br><span class="line">      <span class="attr">"allowBranch"</span>: <span class="string">"master"</span>,</span><br><span class="line">      <span class="attr">"conventionalCommits"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"createRelease"</span>: <span class="string">"github"</span>,</span><br><span class="line">      <span class="attr">"exact"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"chore(release): %s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"packages"</span>: [<span class="string">"packages/*"</span>] <span class="comment">// ["projects/*", "src/**"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>version, 当前库的版本<br>npmClient, 允许指定命令使用的client， 默认是 npm， 可以设置成 yarn 或者cnpm<br>command.publish.ignoreChanges， 可以指定那些目录或者文件的变更不会被publish<br>command.bootstrap.ignore， 指定不受 bootstrap 命令影响的包<br>command.bootstrap.npmClientArgs， 指定默认传给 lerna bootstrap 命令的参数<br>command.bootstrap.scope， 指定那些包会受 lerna bootstrap 命令影响<br>packages， 指定包所在的目录</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote><p>The only restriction is that you can’t directly nest package locations, but this is a restriction shared by “normal” npm packages as well.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// Locating leaf packages under packages/* is considered a &quot;best-practice&quot;</span><br><span class="line">├── lerna.json</span><br><span class="line">├── package.json</span><br><span class="line">|── packages/</span><br><span class="line">    ├── foo-pkg</span><br><span class="line">    │   └── package.json</span><br><span class="line">    ├── bar-pkg</span><br><span class="line">    │   └── package.json</span><br><span class="line">    ├── baz-pkg</span><br><span class="line">    │   └── package.json</span><br><span class="line">    └── qux-pkg</span><br><span class="line">        └── package.json</span><br><span class="line"></span><br><span class="line">// but is not a requirement for using Lerna.</span><br><span class="line">├── lerna.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src/</span><br><span class="line">    ├── admin</span><br><span class="line">    │   ├── my-app</span><br><span class="line">    │   │   └── package.json</span><br><span class="line">    │   ├── stuff</span><br><span class="line">    │   │   └── package.json</span><br><span class="line">    │   └── things</span><br><span class="line">    │       └── package.json</span><br><span class="line">    ├── profile</span><br><span class="line">    │   └── more-things</span><br><span class="line">    │       └── package.json</span><br><span class="line">    ├── property</span><br><span class="line">    │   ├── more-stuff</span><br><span class="line">    │   │   └── package.json</span><br><span class="line">    │   └── other-things</span><br><span class="line">    │       └── package.json</span><br><span class="line">    └── upload</span><br><span class="line">        └── other-stuff</span><br><span class="line">            └── package.json</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="yarn的workspaces模式"><a href="#yarn的workspaces模式" class="headerlink" title="yarn的workspaces模式"></a>yarn的workspaces模式</h3><p><code>lerna bootstrop --hoist</code> 会将 packages 目录下的公共模块包抽离到最顶层。<br>不同版本号只会保留使用最多的版本；不同于顶层的依赖保留在自己的node_modules目录下。<!-- 不需要yarn workspaces --><br>&lt;!– 但是这种方式会有一个问题，不同版本号只会保留使用最多的版本，这种配置不太好，当项目中有些功能需要依赖老版本时，就会出现问题。</p><p>有没有更优雅的方式？再介绍一个命令 yarn workspaces ，可以解决前面说的当不同的项目依赖不同的版本号问题， yarn workspaces会检查每个子项目里面依赖及其版本，如果版本不一致都会保留到自己的 node_modules 中，只有依赖版本号一致的时候才会提升到顶层。注意：这种需要在 lerna.json 中增加配置。</p><p>增加了这个配置后 不再需要 lerna bootstrap 来安装依赖了，可以直接使用 yarn install 进行依赖的安装。</p><blockquote><p>注意：yarn install 无论在顶层运行还是在任意一个子项目运行效果都是可以。<br>–&gt;<br>TODO: yarn workspaces 的必要性。<br>目前最常见的 monorepo 解决方案是 Lerna 和 yarn 的 workspaces 特性，基于lerna和yarn workspace的monorepo工作流。<br>由于yarn和lerna在功能上有较多的重叠,<!-- 我们 -->采用yarn官方推荐的做法,用yarn来处理依赖问题，用lerna来处理发布问题。</p></blockquote><!-- 在 MonoRepo项目中我们使用Yarn Workspaces 管理我们的依赖关系。 它没有多个node_modules目录，而是智能地优化了依赖关系的安装，并允许在monorepo中进行依赖关系的交叉链接。 --><p>修改顶层 package.json 和 lerna.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # package.json 文件加入</span></span><br><span class="line"> <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"workspaces"</span>: [</span><br><span class="line">    <span class="string">"packages/*"</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line"><span class="comment">// # lerna.json 文件加入</span></span><br><span class="line"><span class="string">"useWorkspaces"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"npmClient"</span>: <span class="string">"yarn"</span>,</span><br></pre></td></tr></table></figure></p><!-- 在看vue-cli3的代码的时候发现，它是用yarn的workspaces特性处理包之间的软连接的，但是同时也用了lerna，而lerna bootstrap也是会处理软连接的。所以想问下这两者有什么区别，vue-cli为什么用yarn的workspaces而不是lerna bootstrap？ 默认是npm, 而且每个子package都有自己的node_modules，通过这样设置后，只有顶层有一个node_modules--><!-- ## Common devDependenciesMost devDependencies can be pulled up to the root of a Lerna repo with lerna link convertHoisting has a few benefits:* All packages use the same version of a given dependency* Can keep dependencies at the root up-to-date with an automated tool such as [Snyk](https://snyk.io/)* Dependency installation time is reduced* Less storage is needed## Git Hosted DependenciesPlease note that lerna does not perform the actual splitting of git history into the separate read-only repositories. This is the responsibility of the user. (See this comment for implementation details) --><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><!-- monorepo 和 multrepo 对比multrepo：将项目分化为多个模块，并针对每一个模块单独的开辟一个 reporsitory来进行管理。 --><!-- monorepo：是将所有的模块统一的放在一个主干分支之中管理。 --><h3 id="lerna-软链实现"><a href="#lerna-软链实现" class="headerlink" title="lerna 软链实现"></a>lerna 软链实现</h3><!-- (如何动态创建软链) --><h4 id="软链是什么？"><a href="#软链是什么？" class="headerlink" title="软链是什么？"></a>软链是什么？</h4><p>未使用 lerna 之前，想要调试一个本地的 npm 模块包，需要使用 npm link 来进行调试。<br><!-- 但是在 lerna 中可以直接进行模块的引入和调试，这种动态创建软链是如何实现的？ --><br><!-- lerna是如何做到内部模块的软链和管理，对于作者来说是一个很大的困惑？ --><br><!-- 在npm下， -->npm link可以在系统目录下建立包软链。软链可以不需要发布，就可以使用本地包，很好的提高开发效率。<br>lerna 也是软链的方式直接进行模块的引入和调试。<br><!-- 阅读源码发现lerna实现软链使用了symlink-dependencies包。最终使用fs.symlink函数实现了文件软链。  [Lerna包管理](https://blog.csdn.net/gwdgwd123/article/details/86715012)  --></p><h4 id="symlinkSync"><a href="#symlinkSync" class="headerlink" title="symlinkSync"></a>symlinkSync</h4><!-- Node.js 中实现软链 --><p>lerna 同 nodejs中一样，通过 <code>fs.symlinkSync(target,path,type)</code>实现软链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.symlinkSync(target,path,type)</span><br><span class="line">target &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;   // 目标文件</span><br><span class="line">path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;  // 创建软链对应的地址</span><br><span class="line">type &lt;string&gt;</span><br></pre></td></tr></table></figure></p><!-- 它会创建名为 path 的链接，该链接指向 target。type 参数仅在 Windows 上可用，在其他平台上则会被忽略。它可以被设置为 'dir'、 'file' 或 'junction'。如果未设置 type 参数，则 Node.js 将会自动检测 target 的类型并使用 'file' 或 'dir'。如果 target 不存在，则将会使用 'file'。Windows 上的连接点要求目标路径是绝对路径。当使用 'junction' 时， target 参数将会自动地标准化为绝对路径。 --><p>源码：utils/create-symlink<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSymbolicLink</span>(<span class="params">src, dest, type</span>) </span>&#123;</span><br><span class="line">  log.silly(<span class="string">"createSymbolicLink"</span>, [src, dest, type]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fs</span><br><span class="line">    .lstat(dest)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> fs.unlink(dest))</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* nothing exists at destination */</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> fs.symlink(src, dest, type));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="lerna-应用"><a href="#lerna-应用" class="headerlink" title="lerna 应用"></a>lerna 应用</h2><p>lerna 比较适合的场景：基础框架，组件库，工具类。<br>lerna库自己也是通过这种方式管理的。<br>&lt;!– 1) 从零搭建一个 平台基础组件库项目<br>ui-component 中会存在 h5 组件库，web 组件库，mobile 组件库，以及对应的 doc 项目，三个项目通用的 common 代码。为了方便多个项目的联调，以及分别打包，这里采用了lerna 的管理方式。</p><p>2）框架类项目<br>公司组件库项目。<br>组件库项目类似上面实战的目录结构，但是会在 packages 包下添加很多其他的模块，比如 ui-h5 , example-h5 等</p><p>3）工具类项目<br>举例一些开源项目。<br>babel 使用的就是 lerna 进行管理<br>facebook/jest 使用的是 lerna 进行管理<br>alibaba/rax 使用的是 lerna 进行管理<br>–&gt;<br><a href="https://www.lernajs.cn" target="_blank" rel="noopener">Lerna 用户列表：</a><br><!-- typescript-eslint/typescript-eslint --><br>babel/babel<br>webpack/webpack-cli<br>vuejs/vue-cli<br>facebook/create-react-app<br><!-- ReactTraining/react-routerdvajs/dvareactotron/reactotronfacebook/jestprimer/primerElemeFE/mint-uiumijs/umipugjs/puglore/lore --></p><h3 id="结合项目"><a href="#结合项目" class="headerlink" title="结合项目"></a>结合项目</h3><!-- v/cli: 脚手架工具。多个项目模版和主脚手架应用之间存在依赖关系。 --><!-- 繁星系统：基于qiankun的微应用。多个子系统依赖，工具，ui一致；需要和主应用一起开发。多人参与。活动的项目：vue的多页应用。多个项目，共有一些组件，utlis，基础组件更新可以找到依赖的使用方。编辑平台：x-core, x-cli, x-service。互相依赖，比如x-cli的某些更新必须要在特定的x-core中可以使用。 --><p>凡是涉及到两个项目及以上，有依赖关系，都可以用lerna/monorepo来管理。<br>但不是必须的。比如一个后端服务，和一个前端项目，可以用Multi-Repo管理。技术实现不一样，也无强依赖关系。<br>PS：可以考虑git submodule，subtree。</p><p>可以开放讨论，我们现在的哪些项目可以用到lerna。<br><!-- 活动的组件仓库 一种好的方式是抽离组件，npm包使用。 --><br>繁星系统：multrepo vs monorepo 。</p><h2 id="痛点解决"><a href="#痛点解决" class="headerlink" title="痛点解决"></a>痛点解决</h2><p>1) 资源浪费<br>通常情况下，一个项目只有一个主干，多 git repo 的方式，这样 node_module 会出现大量的冗余，比如它们都会安装 React、axios、lodash等包，浪费了大量存储空间。<br><!-- 通常情况下，一个公司的业务项目只有一个主干，多 git repo 的方式，这样 node_module 会出现大量的冗余，比如它们可能都会安装 React、React-dom 等包，浪费了大量存储空间。 --><br>2) 调试繁琐<br>很多公共的包通过 npm 安装，想要调试依赖的包时，需要通过 npm link 的方式进行调试。</p><p>3) 资源包升级/模块引用 问题<br>一个项目依赖了多个 npm 包，当某一个子 npm 包代码修改升级时，都要对主干项目包进行升级修改。<br><!-- (这个问题感觉是最烦的，可能一个版本号就要去更新一下代码并发布) --><br><!-- 或者是有依赖关系的项目。 --></p><h3 id="monorepo弊端"><a href="#monorepo弊端" class="headerlink" title="monorepo弊端"></a>monorepo弊端</h3><p>可能需要下载所有模块项目才可以运行。<br>可以看到所有的模块（既是优势也是劣势），包括开发者不需要关注的项目，一个项目会很大。<br>可以通过<!-- git -->权限去控制。<br><!--占据存储空间。 ||  ~~前端项目来说~~，  不是问题。common Dependencies 放在根目录去管理，总的空间反而更少了。<!-- 开发代码相对于宇宙数量级别的npm包 --><br><!-- ## lerna 弊端和传统的 git submodules 多仓库方式对比，我觉得 lerna 优势很明显的，个人认为唯一不足的是: 由于源码在一起，仓库变更非常常见，存储空间也变得很大，甚至几G，CI 测试运行时间也会变长,虽然如此也是可以接受的。 --></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><!-- lerna import/ lerna link： 项目公用模块，utils --><ol><li><ul><li style="list-style: none"><input type="checkbox"> 抽离公共的配置：eslint，babel，webpack-config，oss等。</li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> 抽离公共的模块：utils，axios，components等。</li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> ci/cd 优化：<!-- 微前端应用 -->既可以单独打包部署, 也可以一起打包部署在一台服务器。</li></ul></li><li><ul><li style="list-style: none"><input type="checkbox"> Conventional commit 规范。条件验证，version_bump，生成 changelog，生成 git tag。</li></ul></li></ol><h3 id="version-问题"><a href="#version-问题" class="headerlink" title="version 问题"></a>version 问题</h3><!-- 5. - [] 重写version 命令。必须先创建commit，然后又检查版本，提交新的commit。类似publish 的contents 参数   $_PS: 是否必要。实现的意义。   通过git 和lerna 的冲突影响大小 --><!-- 如果不发包，只提交git 仓库。lerna version 可以限制只有master分支的修改做lerna version 直接打tag （只能在master，执行version 和 打tag） --><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><!-- If you prefer some guidance for cli (in case you're about to start using lerna or introducing it to a new team), you might like lerna-wizard. It will lead you through a series of well-defined steps: --><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cli 引导 lerna-wizard</span></span><br><span class="line">npm i -g lerna-wizard</span><br><span class="line"><span class="comment"># 更新公共依赖 lerna-update-wizard</span></span><br><span class="line">npm install --save-dev lerna-update-wizard</span><br></pre></td></tr></table></figure><!-- ./node_modules/.bin/lernaupdatenpx lernaupdate --><!-- 假设要升级 moduleA 和 moduleB 都依赖的 lodash 版本，不必依次到各子package下升级，可以借助 lerna-update-wizard 这个包来做 --><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>目录结构.会创建3份文件（夹）<br>package.json<br>lerna.json<br>packages/</p><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p>lerna create &lt; name &gt; [loc]<br>创建一个包，name包名，loc 位置可选</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>lerna add [@version] [–dev] [–exact] –scope=module-2</p><h3 id="boostrap"><a href="#boostrap" class="headerlink" title="boostrap"></a>boostrap</h3><!-- 通过lerna的命令lerna bootstrap 将会把代码库进行link。 --><ol><li>为每个包安装依赖</li><li>链接相互依赖的库到具体的目录（symlink）</li><li>执行 npm run prepublish</li><li>执行 npm run prepare<br>&lt;!– </li><li>在每个 package 下面执行 npm install 。</li><li>根据各个 package 下 package.json 里面的 dependencies 和 devDependencies 配置，使用 symlink 在各个 package 的 node_modules 下面建立引用关系。</li><li>在每个 package 下执行 npm run prepublish 。</li><li>在每个 package 下执行 npm run prepare 。 –&gt;</li></ol><p>–hoist<br>将 packages 里重复的依赖提取到最外层的 node_modules 里，同时最外层的 package.json 也不会更新 dependency 信息，<br>所以不建议将公用依赖写到最外层的package.json里，而是重复写到每个子package.json 里，然后用 –hoist 提取出来<br>  <!-- [lerna 使用指南](https://www.jianshu.com/p/db3ee301af47) --></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>lerna list [–json]</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>导入本地已经存在的包</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>运行所有包里面的有这个script的命令。类比 exec<br>lerna run &lt; script &gt; – [..args]<br><code>lerna run --scope my-component test</code></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lerna <span class="built_in">exec</span> -- &lt; <span class="built_in">command</span> &gt; [..args] <span class="comment"># runs the command in all packages</span></span><br><span class="line">$ lerna <span class="built_in">exec</span> -- rm -rf ./node_modules</span><br><span class="line">$ lerna <span class="built_in">exec</span> -- protractor conf.js</span><br><span class="line">lerna <span class="built_in">exec</span> --scope my-component -- ls -la</span><br></pre></td></tr></table></figure><p>–concurrency<br>默认命令时并行执行的， 我们可以设置并发量为1<br>lerna exec –concurrency 1 – ls -la</p><p>–scope<br>lerna exec –scope my-component – ls -la</p><p>–stream<br>交叉并行输出结果<br>lerna exec –stream – babel src -d lib</p><p>–parallel</p><p>–no-bail<br>默认lerna exec，如果有命令返回了非0， 则会停止执行， 通过设置这个参数 忽略返回非0， 继续执行其它命令</p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>项目包建立软链，类似npm link</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>删除所有包的node_modules目录</p><blockquote><p>lerna clean 不会删除项目最外层的根 node_modules</p></blockquote><h3 id="changed"><a href="#changed" class="headerlink" title="changed"></a>changed</h3><p>列出下次发版lerna publish 要更新的包。<br><!-- 显示自上次relase tag以来有修改的包， 选项通 list --></p><p>原理： 需要先git add,git commit 提交。 然后内部会运行git diff –name-only v版本号，搜集改动的包，就是下次要发布的。<!-- 并不是网上人说的所有包都是同一个版全发布。 --></p><h3 id="lerna-diff"><a href="#lerna-diff" class="headerlink" title="lerna diff"></a>lerna diff</h3><p>显示自上次release tag以来有修改的包的差异， 执行 git diff</p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>发布最新改动的库</p><ol><li>运行lerna updated来决定哪一个包需要被publish</li><li>如果有必要，将会更新lerna.json中的version</li><li>将所有更新过的的包中的package.json的version字段更新</li><li>将所有更新过的包中的依赖更新</li><li>为新版本创建一个git commit或tag</li><li>将包publish到npm上</li></ol><!-- 会打tag，上传git,上传npm。 如果你的包名是带scope的例如："name": "@gp0320/gpwebpack", 那需要在packages.json添加`publishConfig.access = public` --><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 某些发布的情况，开发者需要指定安装包版本，或者指定子目录发布。</span></span><br><span class="line">lerna publish --dist-tag next   <span class="comment">#// 指定当前版本号</span></span><br><span class="line">lerna publish --contents dist   <span class="comment">#// 指定dist目录为发布目录</span></span><br></pre></td></tr></table></figure><!-- 同时，该命令也有许多的参数，例如 --><p>–skip-git 将不会创建git commit或tag<br>–skip-npm将不会把包publish到npm上。</p><p>–canary<br>可以用来独立发布每个commit，不打tag</p><p>–npm-client<br>默认npm</p><p>–npm-tag<br>为发布的版本添加 dist-tag</p><p>–no-verify-access<br>不进行用户发布的权限校验</p><p>–registry <url><br>指定registry</url></p><p>–yes<br>用于ci自动输入 yes</p><!-- --temp-tag没啥用 --><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>识别出修改的包 –&gt; 创建新的版本号 –&gt; 修改package.json –&gt; 提交修改，打上版本的tag –&gt; 推送到git上。</p><p>–allow-branch <glob><br>设置git上的哪些分支允许执行 lerna version 命令， 也可以在lerna.json中设置</glob></p><p>–amend<br>把version的修改都合并到前一个commit， 而且不会推送哦。</p><p>–message <msg><br>指定提交信息， 而不是自动生成的log<br>也可以在lerna.json配置</msg></p><p>–conventional-commits<br>使用了这个选项， lerna会收集日志， 自动生成 CHANGELOG</p><!-- --commit-hooks执行对应的commit-hook， 默认true--changelog-preset修改changelog生成插件， 默认是 angular--exact??? 没试出什么效果--force-publish强制更改所有包的版本， 不管有没有修改 --git-remote <name>把修改推送到其它的源， 而不是origin--><p>–ignore-changes<br>忽略检查某些文件的修改<br>lerna version –ignore-changes ‘<strong>/*.md’ ‘</strong>/<strong>tests</strong>/**’<br>也可以在lerna.json中配置</p><p>–git-tag-version<br>添加git的tag， 默认true</p><p>–no-git-tag-version       Do not commit or tag version changes.<br><!-- --no-private Do not version private packages. --><br><!-- --no-granular-pathspec     Do not stage changes file-by-file, but globally.              [布尔] --></p><p>使用​–no-push​会把tag推送一起禁止掉，好在禁止推送主分支只会报错，但不影响整个流程</p><!-- # 参考[现代前端工程化-基于 Monorepo 的 lerna 详解(从原理到实战)](https://blog.csdn.net/xgangzai/article/details/115423425)[现代前端工程化-彻底搞懂基于 Monorepo 的 lerna 模块(从原理到实战)](https://jishuin.proginn.com/p/763bfbd57cc5)$_PS: 内容大致相同。简介，原理，应用，优劣势。[Lerna 中文教程详解](https://juejin.cn/post/6844903856153821198)$_PS: 英文文档。转为中文文档。--><!-- Storybook：辅助UI组件开发的工具。Storybook是一个辅助UI组件开发的工具。通过story创建独立的组件，让每个组件开发都有一个独立的开发调试环境。 Storybook的运行不依赖于项目，开发人员不用担心由于开发环境、依赖问题导致不能开发控件。 他是通过 iframe 的形式嵌入组件网页。 --><!-- [lerna的基础使用](https://www.jianshu.com/p/8b7e6025354b)$_PS: 每个指令的参数。 --><!-- # 题外话 --><!-- 上周比较忙，周六加班，本来周日也考虑加班。周日抽空开始整理了一下。之前也想分享活动开发相关。包括快速开始，脚手架，开发人员的思考/自觉等。 --><!-- 最近比较忙，周日简单整理了一下。讲的不好的地方，提出来改进。项目最开始，考虑当作一个简单的后台项系统去开发，用路由去实现，不考虑拆分项目。多人倾向于微前端。人力有了支持，技术应用不难。项目快速跑起来。对于个人技术积累也是一个机会。 --><h1 id="yarn-workspace"><a href="#yarn-workspace" class="headerlink" title="yarn workspace"></a>yarn workspace</h1><p>yarn workspace: <a href="https://yarn.bootcss.com/docs/workspaces/" target="_blank" rel="noopener">https://yarn.bootcss.com/docs/workspaces/</a><br><!-- yarn workspace: <https://yarnpkg.com/lang/en/docs/workspaces/> --></p><blockquote><p>It allows you to setup multiple packages in such a way that you only need to run yarn install once to install all of them in a single pass. 。</p></blockquote><p>简而言之，workspace能帮助你更好的管理有多个子project的repo。你既可以在每个子project下使用独立的package.json管理你的依赖，又可以享受一条yarn命令安装或者升级所有依赖的都便利性。</p><!-- \#0 [封装Vue组件库（四）、Yarn workspaces 和 lerna](https://blog.csdn.net/u012961419/article/details/108704826) --><p>npm 不支持 workspaces，所以之前安装依赖都要使用 yarn。<br>monorepo的项目结构，一般都会配合 yarn workspace 来管理包的依赖。</p><!-- [Yarn Workspace 使用指南](https://www.jianshu.com/p/990afa30b6fe)没有使用 Yarn Workspace 前，需要分别在 project1 和 project2 目录下分别执行 yarn|npm install 来安装依赖包到各自的 node_modules 目录下。或者使用 yarn|npm upgrade 来升级依赖的包。如果 project2 依赖 project1，而 project1 并没有发布到 npm 仓库，只是一个本地项目，有两种方式配置依赖：1) 使用相对路径（如 file: 协议）在 project2 中指定 project1 的依赖。1) 使用 yarn|npm link 来配置依赖。--><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"workspaces"</span>: [</span><br><span class="line">    <span class="string">"packages/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根目录执行 yarn install<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -r project1/node_modules</span><br><span class="line"></span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">yarn workspace &lt;workspace_name&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">yarn workspaces &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">yarn workspaces info [--json]</span><br></pre></td></tr></table></figure></p><p>使用 yarn workspaces 后无法直接 yarn add &lt;pkg_name&gt; 或 yarn remove &lt;pkg_name&gt;，需要指定工作区。</p><ul><li>安装根工作区（workspace root）的依赖</li><li>给指定的工作区（包）安装单独的依赖</li><li>给所有工作区安装依赖</li><li>删除依赖</li><li>执行指定工作区的 scripts 命令<!-- End: #0 --></li></ul><!-- \#3 [使用Yarn Workspace管理多project repo](https://hateonion.me/posts/b2b0/)## workspace能帮你做什么简化你的工作流: 一条在根目录运行yarn install 或updage 或指令降低包安装和包升级的成本你会发现整个repo只生成了一份yarn.lock，绝大多数的依赖包都被提升到了根目录下的node_modules之内。各个子project的node_modules里面不会重复存在依赖，只会有针对根目录下cross-env的引用。不仅如此，你会发现，对于repo内部的依赖关系（比如workspace-b依赖于workspace-a），yarn也能很好的进行管理。## 一些使用yarn workspace的小tips尽可能多的保证子project的包版本一致，可能的情况下，不要让某个子project依赖于某个特定版本的包。在这种情况下，yarn会尽可能的帮你做hoist，减少安装成本。同时，当你想要升级这个包的时候，一切也会变得非常方便。对于一些包，由于没法做hoist（比如react-native），我们可以使用nohoist属性进行声明。如果在上面的例子中，如果workspace-b中依赖的workspace-a的版本并不是1.0.0，那么yarn会从github而不是从你本地去安装workspace-a这个依赖。## workspace有哪些不足和限制？yarn workspace并没有像lerna那样封装大量的高层API，整个workspace整体上还是依赖于整个yarn命令体系。workspace不能嵌套（只能有一个根workspace）workspace采用的是向上遍历，所以workspace并不能识别根workspace之外的依赖。  End: #3 --><!-- \#4 [yarn workspaces 文档](https://yarn.bootcss.com/docs/cli/workspaces/) --><h2 id="与Lerna相比"><a href="#与Lerna相比" class="headerlink" title="与Lerna相比"></a>与Lerna相比</h2><!-- \# [ Workspaces（工作区）](https://cloud.tencent.com/developer/section/1477773) --><p>Yarn的工作区是Lerna的工具可以（和做！）使用的底层原语。<br>他们绝不会尝试支持Lerna提供的高级功能，但通过实施Yarn内部的解决方案和链接步骤的核心逻辑，我们希望能够启用新的用法并提高性能。</p><h3 id="提示与技巧"><a href="#提示与技巧" class="headerlink" title="提示与技巧"></a>提示与技巧</h3><p>workspaces字段是包含每个工作区的路径的数组。由于追踪每个路径可能很乏味，因此该字段也接受glob模式！例如，Babel通过一个packages/*指令来引用它们的所有包。<br>工作空间足够稳定，可用于大规模应用程序，不应该改变常规安装的工作方式，但如果您认为他们正在破坏某些东西，可以通过将以下行添加到Yarnrc文件中来禁用它们：工作区 - 实验错误</p><h3 id="制和注意事项"><a href="#制和注意事项" class="headerlink" title="制和注意事项"></a>制和注意事项</h3><ul><li>程序包布局在您的工作空间和用户将得到的内容之间会有所不同（工作空间依赖关系将被升高到文件系统层次结构中）。对这种布局做出假设已经很危险，因为提升过程不规范，理论上这里没有什么新的东西。</li><li>在上面的例子中，如果workspace-b依赖于workspace-apackage.json中引用的不同版本，依赖将从Github安装，而不是从本地文件系统链接。这是因为一些软件包实际上需要使用以前的版本才能构建新的版本（Babel就是其中之一）。</li><li>根据文件夹层次结构，工作空间必须是工作空间根的子项。您不能也不能引用位于此文件系统层次结构之外的工作空间。</li><li>目前不支持嵌套工作区。<!-- End: #4 --></li></ul><h1 id="lerna-yarn-workspace"><a href="#lerna-yarn-workspace" class="headerlink" title="lerna+yarn workspace"></a>lerna+yarn workspace</h1><h2 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h2><!-- \# [lerna+yarn workspace+monorepo项目的最佳实践](https://www.cnblogs.com/cczlovexw/p/14621939.html)3.2 优雅的提交3.2.1 commitizen && cz-lerna-changelogcommitizen 是用来格式化 git commit message 的工具，它提供了一种问询式的方式去获取所需的提交信息。cz-lerna-changelog 是专门为 Lerna 项目量身定制的提交规范，在问询的过程，会有类似影响哪些 package 的选择。如下：3.2.2 commitlint && husky3.2.3 eslint && lint-staged3.3 发布自动生成日志 --><!-- [结合 lerna 和 yarn workspace 管理多项目工作流](https://segmentfault.com/a/1190000025173538)$_PS: 参考了 下面 [基于lerna和yarn workspace的monorepo工作流]cz-conventional-changelog > 用于使 commitizen 支持Angular的Commit message格式<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"config"</span>: &#123;</span><br><span class="line">        <span class="attr">"commitizen"</span>: &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"./node_modules/cz-conventional-changelog"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;<br>conventional-changelog-cli<br>根据commit message生成 changelog.md 文件 <!--（这里功能和 lerna version --conventional-commits 生成changelog 有部分重叠 ，下文会详细区分 -->）。<br><code>conventional-changelog -p angular -i CHANGELOG.md -s -r 2</code><p></p><blockquote><p>注意：这里生成的是整个仓库的 changelog ，<strong>而非每个 package生成 changelog</strong></p></blockquote><!-- \#1 [工程化:基于yarn和lerna的workspace工作流](https://blog.staleclosure.com/monorepo-yarn-workspace/)[基于lerna和yarn workspace的monorepo工作流](https://zhuanlan.zhihu.com/p/71385053)$_PS: 详细说了工作流。 --><h2 id="lerna-版本升级"><a href="#lerna-版本升级" class="headerlink" title="lerna 版本升级"></a>lerna 版本升级</h2><h3 id="lerna-version"><a href="#lerna-version" class="headerlink" title="lerna version"></a>lerna version</h3><p>lerna version的作用是进行version bump,支持手动和自动两种模式</p><h4 id="只发布某个package"><a href="#只发布某个package" class="headerlink" title="只发布某个package"></a>只发布某个package</h4><p>不支持，lerna官方不支持仅发布某个package，见 <a href="https://github.com/lerna/lerna/issues/1691，如果需要，只能自己手动的进入package进行发布，这样lerna自带的各种功能就需要手动完成且可能和lerna的功能相互冲突" target="_blank" rel="noopener">https://github.com/lerna/lerna/issues/1691，如果需要，只能自己手动的进入package进行发布，这样lerna自带的各种功能就需要手动完成且可能和lerna的功能相互冲突</a></p><p>由于lerna会自动的监测git提交记录里是否包含指定package的文件修改记录，来确定版本更新，这要求设置好合理的ignore规则（否则会造成频繁的，无意义的某个版本更新），好处是其可以自动的帮助package之间更新版本</p><p>例如如果ui-form依赖了ui-button，如果ui-button发生了版本变动，会自动的将ui-form的对ui-button版本依赖更新为ui-button的最新版本。 如果ui-form发生了版本变动，对ui-button并不会造成影响。</p><h4 id="自动选择发布版本"><a href="#自动选择发布版本" class="headerlink" title="自动选择发布版本"></a>自动选择发布版本</h4><p>使用–conventional-commits 参数会自动的根据conventional commit规范和git commit message记录帮忙确定更新的版本号。</p><h4 id="手动选择发布版本"><a href="#手动选择发布版本" class="headerlink" title="手动选择发布版本"></a>手动选择发布版本</h4><p>如果git commit message发现不太靠谱，且无法修改的话，那么需要手动的确认新版本，version默认是手动选择版本</p><blockquote><p>version成功后会自动的推送到主分支，我一般是关闭主分支的推送权限的，这样就会导致推送失败，但是暂时没找到如何禁止推送主分支的好办法，使用​–no-push​会把tag推送一起禁止掉，好在禁止推送主分支只会报错，但不影响整个流程<br>lerna version自动生成的提交格式为“ publish xxx”,并不符合conventional-commit规范，因此需要加以修改，我们通过message参数可以修改自动生成的提交记录<br><!-- End: #1 --></p></blockquote><!-- 其它：[使用Lerna & Yarn Workspaces 构建mono-repo项目](https://zhuanlan.zhihu.com/p/108118011)$_PS: 线编辑器 的一个实例，集成了测试Jest。MonoLith，Multi-Repo，Mono-Repo。 [基于 Yarn WorkSpace + Lerna + OrangeCI 搭建 Typescript Monorepo 项目实践](https://cloud.tencent.com/developer/article/1659352) --><!-- # 其他git的子工程管理subtree和submodule了解下，将公用库A作为独立的子工程导入项目B中，同时在A里的修改本身在你项目B的git管理目录下，跟现行的操作方式没有区别，当完成一个版本的开发后如果公共库A里有修改的内容，通过git subtree 或 submodule将该修改推到远程公共库A的git仓库，这样别的项目也能直接使用了。建议使用git subtree，新增的命令和管理方式都比较简单，学习和维护成本低。[git subtree教程](https://segmentfault.com/a/1190000012002151) --><h1 id="Git多项目管理"><a href="#Git多项目管理" class="headerlink" title="Git多项目管理"></a>Git多项目管理</h1><!-- \#1 [Git多项目管理](https://www.jianshu.com/p/284ded3d191b) --><p>基于Git有多种方式来解决这个问题：Git Submodule，Git Subtree，GitSlave和Google Repo。</p><!-- \#_-_ [用git管理多项目引用的大项目最好的方式是什么呢？](https://www.zhihu.com/question/37573837)在中心服务器上将所有项目综合起来拆分成不同的git repo（假设有100个），用REPO（管理git的工具）为每个项目配置一套code。爱的 Kevin，你这个问题是依赖的问题不是版本控制的问题。说到底只需要在新项目checkout出来的时候，让他可以随时引用多个第三方类库呗？用依赖管理工具啊，Git 只解决区分版本，不解决依赖和重建依赖的问题，这个东西应该用 NuGet 啊！Git的submodule功能设计成这样是有原因的。假设项目A和项目B都引用了项目C，但是项目A引用的是版本1.0的项目C，而项目B引用的是2.0版本，那么项目C的代码就必须分两份存放，否则就会发生问题。根结在于，submodule引用的不是“项目C”，而是“具体某一版本的项目C”。如果你需要这种精确到版本的引用管理，就得接受这种设定。如果你不需要，当然你也可以不用Git，手动管理引用。我一般选择自己搭建私有maven仓库，然后依赖到每个具体工程。 End --><h2 id="Git-Submodule"><a href="#Git-Submodule" class="headerlink" title="Git Submodule"></a>Git Submodule</h2><p>Git 1.5.3中加入了git submodule这个命令。<br>Git子模块允许你将一个Git仓库作为另一个Git仓库的子目录。它能让你将另一个仓库克隆到自己的项目中，同时还保持独立的提交。</p><p>默认情况下，子模块会将子项目放在一个与仓库同名的目录中。我们也可以通过在命令结尾添加一个path来指定放到其他地方。</p><p>不过还有更简单一点的方式。如果给git clone命令传递–recursive选项，它就会自动初始化并更新仓库中的每一个子模块。<br>如果你不想在子模块目录中手动抓取与合并，那么还有种更容易的方式。运行git submodule update –remote，Git将会进入子模块然后抓取并更新。</p><p>如果在此时提交，那么你会将父项目锁定为子模块master分支最新的代码。<br>提交子模块的改动最简单的选项是进入每一个子模块中然后手动推送到远程仓库。然而git push命令接受值为on-demand的–recurse-submodules参数，它会尝试为你这样做。<br>遍历子模块.Git提供了foreach子模块命令。<code>$ git submodule foreach &#39;git checkout -b featureA&#39;</code></p><h3 id="子模块的问题"><a href="#子模块的问题" class="headerlink" title="子模块的问题"></a>子模块的问题</h3><!-- 然而使用子模块还是有一些小问题： --><p>1) 在父项目中git pull并不会自动更新子模块，需要调用git submodule update来更新子模块信息。如果忘记调用git submodule update，那么你极有可能再次把旧的子模块依赖信息提交上去。<br>2) 调用git submodule update并不会将子模块切换到任何分支，默认情况下子模块处于“游离的 HEAD”的状态。如果此时我们改动子模块而没有检出一个工作分支，那调用git submodule update时你所做的任何改动都会丢失。<br>3) Git子模块在父项目中维护所有依赖的子模块版本，当包含大量子模块时，父项目的更新将很容发生冲突，并且父项目的维护历史与所有子模块的维护历史相互交织，维护成本也会比较高。</p><h2 id="Git-Subtree"><a href="#Git-Subtree" class="headerlink" title="Git Subtree"></a>Git Subtree</h2><p>Git在1.8.0版本引入了git subtree这个命令，<br>它使用Git的subtree merge策略来得到类似git submodule的结果。但本质上，它是将子项目的代码全部merge进父项目。<br>使用git subtree，你不仅可以将其他项目合并为父项目的一个子目录，而且可以从父项目提取某个子目录的全部历史作为一个单独的项目。</p><h3 id="相比Git子模块"><a href="#相比Git子模块" class="headerlink" title="相比Git子模块"></a>相比Git子模块</h3><p>管理和更新流程比较方便<br>不再有.gitmodules文件<br>克隆仓库不再需要init和update等操作<br>删除时不再像git submodule那样费劲</p><h2 id="GitSlave"><a href="#GitSlave" class="headerlink" title="GitSlave"></a>GitSlave</h2><p>GitSlave用于管理相关的一个父项目和多个Slave项目。<br>通常，它会将你要执行的Git常规操作顺序在父项目和Slave项目中执行一遍，所以当你执行pull操作，项目中的所有仓库会顺序执行pull操作。<br>GitSlave是对Git命令的封装，是被设计用于简化多仓库的Git操作，而不是要取代Git。<br><!-- 我们还是以Hexo博客项目和Hacker主题项目为例来说明GitSlave的用法。 --></p><h3 id="GitSlave的缺点"><a href="#GitSlave的缺点" class="headerlink" title="GitSlave的缺点"></a>GitSlave的缺点</h3><p>GitSlave被设计用于包含多个Slave仓库的中等大小项目的开发，其在父项目的.gitslave文件中记录所需子项目的信息，并在所有仓库中顺序执行相应Git操作的设计原理，注定其使用场景有一定局限性。</p><p>GitSlave并不会记录所需子项目的版本，所以其永远只是追踪子项目的最新版本，无法满足父项目基于某一特定版本子项目的场景，而此种场景在开发中却是极为常见。<br>GitSlave在父项目的.gitslave文件中记录相关子项目的信息，使得父项目本身的提交历史与子项目的增删历史相互交织在一起，一旦子项目增多，父项目的提交历史将变得混乱。</p><h2 id="Google-Repo"><a href="#Google-Repo" class="headerlink" title="Google Repo"></a>Google Repo</h2><!-- 到此，我们可以总结出，一 -->个优秀的基于Git的多项目管理系统设计需要满足如下2点：<br>记录子项目的远程地址、所需版本和对应的本地路径。<br>这个记录文件应该单独维护，而不应该污染任何一个仓库，因为它与这些仓库本身毫无关系。<br>Google Repo正是完美匹配这2个设计要点的Git多项目管理系统。<br><br>Repo是Google为了有效组织Android的源代码而开发的一个基于Git的管理工具。<br><br><!-- End: #1 --><h2 id="subtree-和-submodule-切换历程"><a href="#subtree-和-submodule-切换历程" class="headerlink" title="subtree 和 submodule 切换历程"></a>subtree 和 submodule 切换历程</h2><!-- \# [使用git subtree & submodule管理多个子项目](https://www.jianshu.com/p/84e34ac318e4) --><p>第一阶段：gulp等自动化工具手动同步<br>第二阶段：使用Git subtree<br><!-- 第二阶段最终选择了subtree，一是官网已经不再推荐使用submodule了，二是subtree实在是太方便易用了。（后来和同事商量了下发现submodule还是有使用价值的，在第三阶段中我们再分析。） --></p><p>第三阶段：使用Git submodule<br>1.在新员工加入团队时：一次性clone项目，submodule可以一起clone出来，只需添加–recursive递归参数就可以了，而subtree并不行，只能手动添加，不过可以借助神器Yeoman(一个自动生成项目脚手架的工具)来实现。<br>2.subtree适合像配置文件这种需要跟着项目走的情况。<br>3.submodule适合在开发阶段时引用，到了生产环境会被打包到指定文件内，而本身并不用跟着版本走的情况。</p><h1 id="git-subtree"><a href="#git-subtree" class="headerlink" title="git subtree"></a>git subtree</h1><!-- \#1 [git subtree教程](https://segmentfault.com/a/1190000012002151) --><!-- 关于子仓库或者说是仓库共用，git官方推荐的工具是git subtree。 我自己也用了一段时间的git subtree，感觉比git submodule好用，但是也有一些缺点，在可接受的范围内。所以对于仓库共用，在git subtree 与 git submodule之中选择的话，我推荐git subtree。 --><p>使用git subtree 有以下几个原因：</p><p>旧版本的git也支持(最老版本可以到 v1.5.2).<br>git subtree与git submodule不同，它不增加任何像.gitmodule这样的新的元数据文件.<br>git subtree对于项目中的其他成员透明，意味着可以不知道git subtree的存在.<br>当然，git subtree也有它的缺点，但是这些缺点还在可以接受的范围内：</p><p>必须学习新的指令(如：git subtree).<br>子仓库的更新与推送指令相对复杂。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">git subtree add --prefix=sub/libpng https://github.com/<span class="built_in">test</span>/libpng.git master --squash</span><br></pre></td></tr></table></figure></p><p>(–squash参数表示不拉取历史信息，而只生成一条commit信息。)</p><!-- 执行git status可以看到提示新增两条commit： --><!-- git log查看详细修改： --><!-- 执行git push把修改推送到远端photoshop仓库，现在本地仓库与远端仓库的目录结构为： --><p>注意，现在的photoshop仓库对于其他项目人员来说，可以不需要知道libpng是一个子仓库。什么意思呢？<br>当你git clone或者git pull的时候，你拉取到的是整个photoshop(包括libpng在内，libpng就相当于photoshop里的一个普通目录)；当你修改了libpng里的内容后执行git push，你将会把修改push到photoshop上。<br>也就是说photoshop仓库下的libpng与其他文件无异。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从源仓库拉取更新</span></span><br><span class="line">git subtree pull --prefix=sub/libpng https://github.com/<span class="built_in">test</span>/libpng.git master --squash</span><br><span class="line"><span class="comment"># 推送修改到源仓库</span></span><br><span class="line">git subtree push --prefix=sub/libpng https://github.com/<span class="built_in">test</span>/libpng.git master</span><br><span class="line"><span class="comment"># 简化git subtree命令</span></span><br><span class="line"><span class="comment"># 我们已经知道了git subtree 的命令的基本用法，但是上述几个命令还是显得有点复杂，特别是子仓库的源仓库地址，特别不方便记忆。</span></span><br><span class="line"><span class="comment"># 这里我们把子仓库的地址作为一个remote，方便记忆：</span></span><br><span class="line">git remote add -f libpng https://github.com/<span class="built_in">test</span>/libpng.git</span><br><span class="line"><span class="comment"># 然后可以这样来使用git subtree命令：</span></span><br><span class="line">git subtree add --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree pull --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree push --prefix=sub/libpng libpng master</span><br></pre></td></tr></table></figure><!-- End: #1 --><h1 id="Git-Repo"><a href="#Git-Repo" class="headerlink" title="Git-Repo"></a>Git-Repo</h1><p>文档： <a href="https://gerrit.googlesource.com/git-repo/" target="_blank" rel="noopener">https://gerrit.googlesource.com/git-repo/</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><!-- \# [Google Git-Repo 多仓库项目管理](https://zhuanlan.zhihu.com/p/50564255) --><p>除了 git-repo 外的几个要么 子模块需要手动指定本地仓库路径、要么 主仓库与子仓库会产生污染 且操作不够简便化。所以最终就采用了 Google 的 Git-repo（Repo）</p><p>Repo 是对 Git 构成补充的多（可以巨多的那种）代码库管理工具，简单说就是使用 Python 在 Git 基础上开发的一系列脚本命令。<!-- 当前整个 Android 项目（AOSP）就是通过 repo 来管理，最新版本的仓库大约 七百多个，可见 Repo 在多仓库的代码管理和版本管理上是可以支撑现有我们的项目的。接下来描述分析下迁移使用 Repo 的过程和一些解释。 --></p><h3 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h3><p>Repo 管理的核心就在于 Manifest，每个采用 repo 管理的复杂多仓库项目都需要一个对应的 manifest 仓库，如 AOSP 的 manifest ，此仓库用来存储所有子仓库的配置信息，repo 也是读取此仓库的配置文件来进行管理操作。里面的配置就是 xml 定义的结构，一般有两个主要的配置：子仓库用到的仓库地址（remote）、子仓库详细配置信息（project）。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">remote</span>  <span class="attr">name</span>=<span class="string">"remote1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">alias</span>=<span class="string">"origin"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">fetch</span>=<span class="string">".."</span></span></span><br><span class="line"><span class="tag">           <span class="attr">review</span>=<span class="string">"https://android-review.googlesource.com/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">remote</span>  <span class="attr">name</span>=<span class="string">"remote2"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">alias</span>=<span class="string">"origin"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">fetch</span>=<span class="string">"git@github.com:group2/"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">review</span>=<span class="string">"https://android-review2.googlesource.com/"</span> /&gt;</span>         </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">default</span> <span class="attr">revision</span>=<span class="string">"master"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">remote</span>=<span class="string">"remote1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">sync-j</span>=<span class="string">"4"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/make"</span> <span class="attr">name</span>=<span class="string">"platform/build"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">copyfile</span> <span class="attr">src</span>=<span class="string">"core/root.mk"</span> <span class="attr">dest</span>=<span class="string">"Makefile"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkfile</span> <span class="attr">src</span>=<span class="string">"CleanSpec.mk"</span> <span class="attr">dest</span>=<span class="string">"build/CleanSpec.mk"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/blueprint"</span> <span class="attr">name</span>=<span class="string">"platform/build/blueprint"</span> <span class="attr">groups</span>=<span class="string">"pdk,tradefed"</span> <span class="attr">revision</span>=<span class="string">"other_branch"</span> <span class="attr">remote</span>=<span class="string">"remote1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>remote: 远程仓库地址配置，可以多个。<br>project</p><p>子项目仓库配置，可以多个。<br>copyfile</p><p>project 的子节点属性.</p><h3 id="Repo-命令"><a href="#Repo-命令" class="headerlink" title="Repo 命令"></a>Repo 命令</h3><p><code>repo init -u yout_manifest_git_url</code> 初始化了你的项目 repo 工作区后，repo sync，你就可以进入正常的特性开发状态了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo init -u your_project_git_url</span><br><span class="line">repo sync</span><br><span class="line">repo start</span><br></pre></td></tr></table></figure><p>Jenkins</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lerna: &lt;a href=&quot;https://www.lernajs.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lernajs.cn&lt;/a&gt;&lt;br&gt;yarn workspace: &lt;a href=&quot;https://yar
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Node服务端开发框架</title>
    <link href="http://yoursite.com/sum/ser/node%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/sum/ser/node服务端开发框架/</id>
    <published>2021-05-15T00:00:00.000Z</published>
    <updated>2021-09-04T09:06:41.382Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.5  </p><h1 id="现有框架"><a href="#现有框架" class="headerlink" title="现有框架"></a>现有框架</h1><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h1 id="egg-js"><a href="#egg-js" class="headerlink" title="egg.js"></a>egg.js</h1><p>Egg.js 为企业级框架和应用而生，我们希望由 Egg.js 孕育出更多上层框架，帮助开发团队和开发人员降低开发和维护成本。</p><p>Egg 奉行『约定优于配置』，按照一套统一的约定进行应用开发，团队内部采用这种方式可以减少开发人员的学习成本，<br># 新手指南</p><h2 id="egg-和-koa"><a href="#egg-和-koa" class="headerlink" title="egg 和 koa"></a>egg 和 koa</h2><h3 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h3><blockquote><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。</p></blockquote><p>Koa 和 Express 的设计风格非常类似，底层也都是共用的同一套 HTTP 基础库<br>但是有几个显著的区别，除了上面提到的默认异步解决方案之外，主要的特点还有下面几个。</p><p>1) Middleware: Koa 的中间件和 Express 不同，Koa 选择了洋葱圈模型。<br>2) Context: 和 Express 只有 Request 和 Response 两个对象不同，Koa 增加了一个 Context 的对象，<br>3) 异常处理: 通过同步方式编写异步代码带来的另外一个非常大的好处就是异常处理非常自然.使用 try catch 就可以将按照规范编写的代码中的所有错误都捕获到。只需要将这个中间件放在其他中间件之前<!-- ，就可以捕获它们所有的同步或者异步代码中抛出的异常了 -->。</p><p>Egg 继承于 Koa<br>&lt;!– 如上述，Koa 是一个非常优秀的框架，然而对于企业级应用来说，它还比较基础。<br>而 Egg 选择了 Koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强。</p><p>扩展<br>在基于 Egg 的框架或者应用中，我们可以通过定义 app/extend/{application,context,request,response}.js 来扩展 Koa 中对应的四个对象的原型，通过这个功能，我们可以快速的增加更多的辅助方法，</p><p>插件 –&gt;</p><p># 基础功能<br># 核心功能<br># 教程</p><h2 id="MyQSQL"><a href="#MyQSQL" class="headerlink" title="MyQSQL"></a>MyQSQL</h2><h3 id="CRUD-语句"><a href="#CRUD-语句" class="headerlink" title="CRUD 语句"></a>CRUD 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一条数据</span></span><br><span class="line"><span class="keyword">const</span> post = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.get(<span class="string">'posts'</span>, &#123; <span class="attr">id</span>: <span class="number">12</span> &#125;);</span><br><span class="line"><span class="comment">// 全表</span></span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.select(<span class="string">'posts'</span>);</span><br><span class="line"><span class="comment">// 条件查询和结果定制</span></span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.select(<span class="string">'posts'</span>, &#123; <span class="comment">// 搜索 post 表</span></span><br><span class="line">  where: &#123; <span class="attr">status</span>: <span class="string">'draft'</span>, <span class="attr">author</span>: [<span class="string">'author1'</span>, <span class="string">'author2'</span>] &#125;, <span class="comment">// WHERE 条件</span></span><br><span class="line">  columns: [<span class="string">'author'</span>, <span class="string">'title'</span>], <span class="comment">// 要查询的表字段</span></span><br><span class="line">  orders: [[<span class="string">'created_at'</span>,<span class="string">'desc'</span>], [<span class="string">'id'</span>,<span class="string">'desc'</span>]], <span class="comment">// 排序方式</span></span><br><span class="line">  limit: <span class="number">10</span>, <span class="comment">// 返回数据量</span></span><br><span class="line">  offset: <span class="number">0</span>, <span class="comment">// 数据偏移量</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; SELECT `author`, `title` FROM `posts`</span></span><br><span class="line"><span class="comment">//   WHERE `status` = 'draft' AND `author` IN('author1','author2')</span></span><br><span class="line"><span class="comment">//   ORDER BY `created_at` DESC, `id` DESC LIMIT 0, 10;</span></span><br></pre></td></tr></table></figure><h3 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h3><h3 id="表达式-Literal"><a href="#表达式-Literal" class="headerlink" title="表达式(Literal)"></a>表达式(Literal)</h3><p>内置表达式<br>NOW()：数据库当前系统时间，通过 app.mysql.literals.now 获取。</p><p>自定义表达式<br>下例展示了如何调用 MySQL 内置的 CONCAT(s1, …sn) 函数，做字符串拼接。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.insert(table, &#123;</span><br><span class="line">  create_time: <span class="keyword">this</span>.app.mysql.literals.now,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; INSERT INTO `$table`(`create_time`) VALUES(NOW())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Literal = <span class="keyword">this</span>.app.mysql.literals.Literal;</span><br><span class="line"><span class="keyword">const</span> first = <span class="string">'James'</span>;</span><br><span class="line"><span class="keyword">const</span> last = <span class="string">'Bond'</span>;</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.insert(table, &#123;</span><br><span class="line">  id: <span class="number">123</span>,</span><br><span class="line">  fullname: <span class="keyword">new</span> Literal(<span class="string">`CONCAT("<span class="subst">$&#123;first&#125;</span>", "<span class="subst">$&#123;last&#125;</span>"`</span>),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; INSERT INTO `$table`(`id`, `fullname`) VALUES(123, CONCAT("James", "Bond"))</span></span><br></pre></td></tr></table></figure></p><p>egg-mysql<br>egg-sequelize</p><h3 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h3><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>Controller 中 this.ctx.validate() 进行参数校验，失败抛出异常。</p><h3 id="Passport-鉴权"><a href="#Passport-鉴权" class="headerlink" title="Passport 鉴权"></a>Passport 鉴权</h3><p>## 自结<br>express -》 koa -》egg -》 nest。<br>express 和 koa 都属于库，egg 是项目实践方案，提供了规范，工具等。nest 是框架，包含一套解决方案。</p><p>已实现的koa 项目和 框架egg 大抵 一致。<br>区分：各个控制器，包括api，user验证，参数验证方式等.</p><p>sql方式：直接在service 中写sql，也写了一层sql操作，能力偏弱。<br>直接在service写sql 可以借鉴；包括表达式部分。（见上面代码）</p><p>有些是没有做的，包括测试，缓存等。</p><h1 id="nestjs"><a href="#nestjs" class="headerlink" title="nestjs"></a>nestjs</h1><p>Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和 FRP（函数式响应编程）的元素。</p><p>在底层，Nest使用强大的 HTTP Server 框架，如 Express（默认）和 Fastify。Nest 在这些框架之上提供了一定程度的抽象，同时也将其 API 直接暴露给开发人员。这样可以轻松使用每个平台的无数第三方模块。</p><p>哲学： Nest 提供了一个开箱即用的应用程序<strong>架构</strong>，允许开发人员和团队创建高度可测试，可扩展，松散耦合且易于维护的应用程序。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Nest 与数据库无关，允许您轻松地与任何 SQL 或 NoSQL 数据库集成。根据您的偏好，您有许多可用的选项。一般来说，将 Nest 连接到数据库只需为数据库加载一个适当的 Node.js 驱动程序，就像使用 Express 或 Fastify 一样。</p><p>您还可以直接使用任何通用的 Node.js 数据库集成库或 ORM ，例如 Sequelize (recipe)、knexjs (tutorial)`和 TypeORM ，以在更高的抽象级别上进行操作。</p><p>Nest 使用TypeORM是因为它是 TypeScript 中最成熟的对象关系映射器( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* cats.controller.ts */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Request</span></span><br><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Req &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line">@Controller(<span class="string">'cats'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  @Get()</span><br><span class="line">  findAll(@Req() request: Request): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态码</span></span><br><span class="line">@Post()</span><br><span class="line">@HttpCode(<span class="number">204</span>)</span><br><span class="line">create() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This action adds a new cat'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路由参数</span></span><br><span class="line">@Get(<span class="string">':id'</span>)</span><br><span class="line">findOne(@Param() params): string &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params.id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;params.id&#125;</span> cat`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.5  &lt;/p&gt;



&lt;h1 id=&quot;现有框架&quot;&gt;&lt;a href=&quot;#现有框架&quot; class=&quot;headerlink&quot; title=&quot;现有框架&quot;&gt;&lt;/a&gt;现有框架&lt;/h1&gt;&lt;h2 id=&quot;实践&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Axios实用</title>
    <link href="http://yoursite.com/sum/jsplus/axios%E5%AE%9E%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/axios实用/</id>
    <published>2021-05-07T00:00:00.000Z</published>
    <updated>2021-09-04T09:32:39.994Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.5 </p><!-- [VUE axios 发送 Form Data 格式数据请求](https://www.cnblogs.com/similar/p/10680228.html) --><p>axios 默认是 Payload 格式数据请求，但有时候后端接收参数要求必须是 Form Data 格式的，所以我们就得进行转换。Payload 和 Form Data 的主要设置是根据请求头的 Content-Type 的值来的。</p><p>Payload   　　   Content-Type: ‘application/json; charset=utf-8’<br>Form Data　　  Content-Type: ‘application/x-www-form-urlencoded’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置单个的POST请求为 Form Data 格式</span></span><br><span class="line">axios(&#123;</span><br><span class="line">   method: <span class="string">'post'</span>,</span><br><span class="line">   url: <span class="string">'http://localhost:8080/login'</span>,</span><br><span class="line">   data: &#123;</span><br><span class="line">      username: <span class="keyword">this</span>.loginForm.username,</span><br><span class="line">      password: <span class="keyword">this</span>.loginForm.password</span><br><span class="line">   &#125;,</span><br><span class="line">   transformRequest: [</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">            ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">         &#125;</span><br><span class="line">         ret = ret.substring(<span class="number">0</span>, ret.lastIndexOf(<span class="string">'&amp;'</span>));</span><br><span class="line">         <span class="keyword">return</span> ret</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    headers: &#123;</span><br><span class="line">       <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、全局设置POST请求为 Form Data 格式</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">设置请求头 Content-Type 为 application/x-www-form-urlencoded。 </span></span><br><span class="line"><span class="comment">然后在请求拦截器中，通过 qs.stringify() 进行数据格式转换，这样每次发送的POST请求都是 Form Data 格式的数据了。</span></span><br><span class="line"><span class="comment">其中 qs 模块是安装 axios 模块的时候就有的，不用另行安装，通过 import 引入即可使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例对象</span></span><br><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">  timeout: <span class="number">6000</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.data = qs.stringify(config.data) <span class="comment">// 转为formdata数据格式</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">Promise</span>.error(error)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.5 &lt;/p&gt;


&lt;!-- [VUE axios 发送 Form Data 格式数据请求](https://www.cnblogs.com/similar/p/10680228.html) --&gt;
&lt;p&gt;axio
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome插件整理</title>
    <link href="http://yoursite.com/sum/others/chrome%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/sum/others/chrome插件整理/</id>
    <published>2021-04-09T00:00:00.000Z</published>
    <updated>2021-04-10T04:06:12.117Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>H5动画调研</title>
    <link href="http://yoursite.com/sum/jsplus/h5%E5%8A%A8%E7%94%BB%E8%B0%83%E7%A0%94/"/>
    <id>http://yoursite.com/sum/jsplus/h5动画调研/</id>
    <published>2021-04-07T00:00:00.000Z</published>
    <updated>2021-05-05T08:31:53.632Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.7 星期三  11：00 </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><!-- 完全凭第一印象 --><p>strong： Three.js，GreenSockJS<br>easy：hover.css, cssShake, wickedCSS,animate.css, Magic,Tuesday<br>  Waves,<br>  wow.js, scrollReveal.js,<br>easy+: anime.js, mo.js, Animate Plus, move.js，Velocity.js;, Bounce.js Lottie<br>spec: Vivus(svg路径)，parallax.js；Spinkit (加载)；PACE.js（加载进度条）<br>others: Popmotion.js,Dynamics.js，ParticlesJS<br>游戏相关：CreateJS，PixiJS，COCOS2DX-JS,</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>业务没确定。根据ui/ux 选择。<br>包括依赖大小，性能，成本，成熟度等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="round-1"><a href="#round-1" class="headerlink" title="round 1"></a>round 1</h3><p><a href="https://zhuanlan.zhihu.com/p/112110089" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a><br><a href="http://blog.itpub.net/69940844/viewspace-2679405/" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a><br><a href="http://blog.itpub.net/69940844/viewspace-2679405/" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a></p><p>01 Three.js<br>该库提供<code>&lt;canvas&gt;，&lt;svg&gt;</code>，CSS3D和WebGL渲染器，使我们能够在设备和浏览器之间创建丰富的交互体验。该库于2010年4月首次引入，目前仍由近1,000名贡献者开发。<br><!-- 项目地址：https://github.com/mrdoob/three.js/ --><br>02 Anime.js<br>Anime.js是一个轻量级JavaScript动画库，具有简单但功能强大的API。</p><p>它适用于CSS属性，SVG，DOM属性和JavaScript对象。它可以通过对时间轴的回调实现对动画的控制。通过关键帧实现对动画补充与饱满，在上面几乎可以实现基本动画需要的工作。最关键的是，Anime.js适用于所有网页，你可以使用html，css，js，svg等制作动画。<br><!-- Github上的项目地址：https://github.com/juliangarnier/anime --></p><p>03 ParticlesJS<br>ParticlesJS由VincentGarreau创建，是一款特定动画的JavaScript库，用于创建点和线组成的精彩动画。如上所述，该库用于创建看起来像粒子的动画。因此，它允许开发人员切换诸如粒子的密度，颜色，不透明度，形状和大小之类的东西。但是，由于它仅适用于粒子背景，因此不适合用来创建其他类型的动画。</p><p>04 Mo.js<br>Mo.js是一个用于Web的动态图形工具带，具有简单的声明API，跨设备兼容性和超过1500个单元测试。你可以在DOME或SVGDOME周围移动东西或创建唯一的mo.js对象。虽然文档有些稀缺，但是示例很丰富。</p><p>Mo.js是一个”简洁、高效”的图形动画库，拥有流畅的动画和惊人的用户体验，在任何设备上，屏幕密度独立的效果都很好，你可以绘制内置的形状或者自定义形状，随便，只要你喜欢，你还可以绘制多个动画，再让它们串联在一起。<br><!-- Github上的项目地址：https://github.com/legomushroom/mojs --></p><p>05 ScrollReveal<br>与前面讨论的ParticlesJS一样，这也是一款特定动画的JavaScript库。<br>ScrollRevealJS用于创建十分酷炫的滚动特效，是一个轻量级的工具（没有任何依赖），而且非常容易使用，因为它使用自然语言来发送创建动画的指令。</p><p>ScrollRevealJS适用于DOM节点，多个容器，异步内容，并且支持3D旋转。ScrollRevealJS可能是创建滚动特效最好用的工具，它支持大量的浏览器，只要这些浏览器支持CSSTransform和CSSTransition特性。</p><p>06 Popmotion<br>Popmotion是一个只有12KB的JavaScript运动引擎，可以用来实现动画，物理效果和输入跟踪。</p><p>它允许开发人员从动作创建动画和交互，这些动作是可以启动和停止，可以使用CSS、SVG、React、three创建，js和任何接受数字作为输入的API。<br><!-- 在Github上的项目地址：https://github.com/Popmotion/popmotion --></p><p>07 Vivus<br>Vivus是一款可以执行SVG路径动画的轻量级Javascript库，如果你在寻找一个使用SVG的优秀库，那么VivusJS是最佳之选，尤其适合初学者。<br>这个库也很快、很轻量级，因为它没有任何依赖。除了使用SVG之外，VivusJS还可用于创建漂亮的按钮，也有其他令人惊叹的动画可供使用。<br><!-- https://github.com/maxwellito/vivus --></p><p>08 GreenSockJS<br>GSAP是一个JavaScript库，用于创建高性能，零依赖的跨浏览器动画，该动画库据称已在超过400万个网站中使用。<br>GSAP非常灵活，可以与React，Vue，Angular和VanillaJS 一起使用。GSDevtools还可以帮助调试使用GSAP构建的动画。<br><!-- 在Github上的地址为：https://github.com/greensock/GreenSock-JS --></p><p>09 Hover(CSS)<br>Hover.CSS是一个有用的CSS3悬停效果集合，可用于动作调用，按钮，商标，特性图片等，提供CSS，Sass和LESS支持。<br><!-- Github上的项目地址为：https://github.com/IanLunn/Hover --></p><p>10 Spinkit<br>Spinkit是一个酷炫的加载动画CSS集合。Spinkit使用CSS动画来创建吸引人的易于自定义的动画。<br><!-- 该集合目标不是提供所有浏览器的解决方案--如果你需要支持哪些还没实现CSS动画属性(像是IE9及之前的版本)的浏览器，你需要检测下这些动画属性并实现一个变通方案。 --></p><h3 id="round-1-2"><a href="#round-1-2" class="headerlink" title="round 1-2"></a>round 1-2</h3><p><a href="https://blog.csdn.net/u012118993/article/details/94777846" target="_blank" rel="noopener">2019年值得推荐的11款JavaScript动画库</a></p><p>Kute.js<br>成熟的原生javascript动画引擎，具有跨浏览器动画的基本功能。重点是代码质量、灵活性、性能和大小(核心引擎最小17K，gzip为5.5K)。库也是可扩展的，因此您可以添加自己的功能。<br><!-- 在Github上的项目地址：https://github.com/thednp/kute.js/ --></p><p>Typed.js<br>这个6K星的库基本上允许您以选定的速度为字符串来创建输入打字动画。您还可以在页面上放置一个HTML DIV并从中读取，以允许对禁用javascript的搜索引擎和用户进行访问。<br><!-- 在Github上的地址：https://github.com/mattboldt/typed.js --></p><p>Lottie<br>lottie是一个用于的移动端类库，在Android和iOS端渲染Adobe After Effects的动画，并以本地方式呈现。同样适用于Web、ReactNative和Windows平台。由AirBnb公司出品。<br><!-- 在Github上的地址为：https://github.com/airbnb/lottie-web --></p><h3 id="round-2"><a href="#round-2" class="headerlink" title="round 2"></a>round 2</h3><p><a href="https://www.uisdc.com/10-best-free-animation-libraries" target="_blank" rel="noopener">前端福利！10个免费好用功能强大的网页动画效果库</a><br><a href="https://www.jianshu.com/p/1e4267912e1b" target="_blank" rel="noopener">10款好用的前端动画插件</a><br><a href="https://www.toutiao.com/a6573538825295888903" target="_blank" rel="noopener">10个免费好用功能强大的网页动画效果库</a></p><ol><li>GSAP<br>10个免费好用功能强大的网页动画效果库<br>GSAP 可能目前最炫酷的免费动画库之一了。它运行于纯粹的 JavaScript 之上，是目前最强健的动画资源库之一。</li></ol><p>它符合 HTML5 的规范，并且和几乎所有的现代浏览器都能良好的协同，可以SVG、画布元素甚至 jQuery 对象良好地协同，诸如 EaselJS 这样的库也可以和 GSAP 联动。</p><p>如果你需要一个强大的网页动画库的话，GSAP绝对值得一看。</p><ol start="2"><li>Anime.js<br>我第一次看到Anime.js 这个库的时候，彻底被它迷住了。这玩意非常强大，功能并不仅限于UI/UX动画的制作。</li></ol><p>你可以借助 Anime.js 将动画加持在LOGO、按钮、图像等各种各样的元素上。它支持各种常见的触发机制，比如点击、悬停、滑动，你可以借助它定义一系列的动画。</p><ol start="3"><li>Wicked CSS<br>Wicked CSS 是一个相对更新一些的动效库，它主要是基于CSS代码的。Wicked CSS 借助 CSS3的特性，提供了一些堪称不可思议的特效。</li></ol><p>在它的首页上，你会看到许多实时演示，你可以通过这些范例学会如何让对象进行旋转、翻转、划入等不同类型的动画效果。</p><p>有些动画效果很简单，但是它同样可以实现许多复杂而有趣的动画，这也是Wicked CSS 有意思的地方。</p><ol start="4"><li>Animate CSS</li><li>Tuesday<br>Tuesday 所提供的动画最令人着迷的地方，是其中动画都非常的简单、有用。借助这个库，你可以有效的控制页面中元素的出现和消失的方式。</li></ol><p>这些动画并不是那种炫酷屌炸天的，相反它们是非常微妙的，真正从美学和用户体验的层面提升整个页面的设计。</p><p>Tuesday 是纯粹的CSS代码，几乎可以和任何网站无缝地衔接起来。</p><ol start="6"><li>CSShake<br>坦率的讲，我从来没有见过比 CSShake 更加奇怪或者有趣的 CSS库了。它所带来的动画效果非常的疯狂、独特，它并不一定适合每个网站。</li></ol><p>换句话来说，就是 CSShake 所提供的动效其实是独一无二的，这也是为什么它会存在于这个列表当中。</p><ol start="7"><li>Mo.js<br>通过细节仔细对比了诸多的 JavaScript 库之后，不得不说 Mo.js 是最好的动效库之一。Mo.JS 非常的庞大，而且它是完全为UI/UX设计而生的动效库。</li></ol><p>关于 Mo.js 有大量的文档和教程，它的代码操作并不复杂，了解之后就可以轻松掌握。</p><p>它有着许多令人惊叹的功能，无论是导航栏，还是LOGO或者其他复杂的元素，它都能够将他们合理的动画化。</p><ol start="8"><li>Animate Plus<br>Animate Plus 是一个轻量级的动效库，它只有2KB，但是它有着自定义 JavaScript 动画所需的全部基本功能。</li></ol><p>使用npm你可以轻松地将 Animate Plus 安装好，你只需要按照Github 上的代码进行设置即可。其中所包含的绝大多数都是基本的Demo，所以你不会碰到复杂的问题，不过通过Github，你会找到所有你需要的选项和方法。</p><ol start="9"><li>Bounce.js<br>只需要点击几下，你就可以借助Bounce.js创造出强大的CSS3 和 JS动画了。<br>在主页上，你会找到一个模块化的自定义动画生成器，通过这种方式，Bounce.js 会帮你将特定的功能添加到你的页面上，无需添加额外的代码。</li></ol><p>和其他的同类工具不同的地方在于，它不仅仅是一个库，而是有这用户可以直接操作的实际功能，它带有一个完整的网页构建器。Bounce.js 是为数不多的可以直接在浏览器中进行设计和设置的动画库之一。</p><ol start="10"><li>Magic<br>Magic 可能是最有趣的动效库之一。它集合了许多基于CSS3的动画效果，并且带有许多在别的地方根本找不到的自定义样式。这是一个非常大的CSS3代码库合集，你也会在这里学会许多巧妙的动画设计技巧。</li></ol><h3 id="round-x"><a href="#round-x" class="headerlink" title="round x"></a>round x</h3><p><a href="https://blog.csdn.net/qq_40028324/article/details/84779573" target="_blank" rel="noopener">前端几个常用的动画库汇总</a><br><!-- $_PS: 有链接地址。比下面的多出10以后的库 --><br><a href="https://zhuanlan.zhihu.com/p/85726670" target="_blank" rel="noopener">前端开发动画效果常用的几种动画库</a><br>1、AniJS.js<br> 基于 CSS3 的动画库</p><p>2、Velocity.js<br>Velocity 是一个简单易用、高性能、功能丰富的轻量级 JS 动画库。它能和 jQuery 完美协作，并和 $.animate() 有相同的 API， 但它不依赖 jQuery，可单独使用</p><p>3、vivus.js<br>Vivus 是一款可以执行 SVG 路径动画的轻量级 Javascript 库</p><p>4、snabbt.js<br>snabbt.js 是一款轻量级的、功能强大的、简单易用的 jQuery 动画库插件</p><p>5、PACE.js<br>网页自动加载进度条插件</p><p>6、Popmotion.js<br>Popmotion 是一个只有 12KB 的 JavaScript 运动引擎，可以用来实现动画，物理效果和输入跟踪</p><p>7、Bounce.js<br>Bounce.js 是一个漂亮的关键帧动画生成工具和类库，基于 CSS3 实现</p><p>8、Dynamics.js<br>Dynamics.js 是一款可以创建物理运动动画效果的 js 库插件</p><p>9、cta.js<br>一款轻量级 Modal 模态框插件</p><p>10、 Rocket</p><p>11、html5tooltips.js<br>html5tooltips.js 是一个轻量级和简洁的 Tooltips。采用纯 JavaScript 开发，拥有 CSS 动画，不依赖任何框架</p><p>12、ScrollReveal.js<br>ScrollReveal.js 用于创建和管理元素进入可视区域时的动画效果，帮助你的网站增加吸引力</p><p>13、WOW.js<br>WOW.js 是一款帮助你实现滚动页面时触发 CSS 动画效果的插件 收费的</p><p>14、Transit</p><p>15、parallax.js<br>Parallax.js 是一款功能非常强大的 JavaScript 视觉差特效引擎插件。通过这个视觉差插件可以制作出非常炫酷的视觉差特效，可以检测智能设备的方向。</p><p>6、CreateJS<br>CreateJS 库是一款 HTML5 游戏开发的引擎，是一套可以构建丰富交互体验的 HTML5 游戏的开源工具包<a href="https://createjs.com/" target="_blank" rel="noopener">https://createjs.com/</a></p><h3 id="round-0"><a href="#round-0" class="headerlink" title="round 0"></a>round 0</h3><p><a href="https://www.cnblogs.com/mq0036/p/11726150.html" target="_blank" rel="noopener">前端常用动画库</a><br>Anime.js<br>一个强大的、轻量级的用来制作动画的javascript库。它适用于任何CSS属性，单个CSS转换，SVG或任何DOM属性以及JavaScript对象。</p><p>Hover.css<br>CSS hover 悬停效果，可以应用于链接、按钮、图片等等，提供CSS，Sass和LESS。</p><p>Animate.css<br>目前最通用的动画库，是一个CSS3动画库，内置了很多典型的css3动画，兼容性好使用方便。</p><p>wow.js<br>滚动展示动画，依赖 animate.css，所以它支持 animate.css 多达 60 多种的动画效果</p><p>scrollReveal.js<br>和 WOW.js 一样，scrollReveal.js 也是一款页面滚动显示动画的 JavaScript，能让页面更加有趣，更吸引用户眼球。不同的是 WOW.js 的动画只播放一次，而 scrollReveal.js 的动画可以播放一次或无限次。WOW.js 依赖 animate.css，而 scrollReveal.js 不依赖其他任何文件。</p><p>Magic.css<br>一款独特的CSS3动画特效包，你可以自由地使用在您的网页中。只需简单的在页面上引入 CSS 文件: magic.css 或者压缩版本 magic.min.css 就可以使用了。</p><p>Waves<br>点击水波纹动画效果</p><p>move.js<br>Move.js是一个小型的JavaScript库，通过JS来控制一系列的CSS动画顺序执行，使CSS3动画变得非常简单和优雅。</p><p>Velocity.js<br>Velocity 是一个简单易用、高性能、功能丰富的轻量级JS动画库。它能和 jQuery 完美协作，并和.animate()有相同的API，但它不依赖jQuery，可单独使用。Velocity不仅包含了.animate()有相同的API，但它不依赖jQuery，可单独使用。Velocity不仅包含了<br> .animate() 的全部功能， 还拥有：颜色动画、转换动画(transforms)、循环、 缓动、SVG 动画、和 滚动动画 等特色功能。</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>并没有需求。自取</p><p>七、目前5大游戏引擎，同步适配微信小游戏！<br>Cocos 、 Laya(Layabox) 、Phaser 、 Egret 、 3D - Three.js</p><h3 id="PixiJS"><a href="#PixiJS" class="headerlink" title="PixiJS"></a>PixiJS</h3><p>PixiJS: <a href="https://www.pixijs.com" target="_blank" rel="noopener">https://www.pixijs.com</a><br>github: <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener">https://github.com/pixijs/pixi.js</a><br><a href="https://www.zhihu.com/question/267933307" target="_blank" rel="noopener">前端的canvas动画框架Pixi.js为什么火不起来？</a><br>首先pixi.js的定位是一个渲染框架，渲染速度非常快的前端渲染框架了。<br>但是pixi.js挺适合写游戏的。<br>我觉得CreateJS也很好用，也没火。当然不能和COCOS 这种引擎相提并论<br>关键的是现在官方已经放弃这个项目了，bug也不修复了，专弄cocos creator了。</p><p>createJS没火因为Adobe自己不上心，半成品没法用。</p><h3 id="Cocos"><a href="#Cocos" class="headerlink" title="Cocos"></a>Cocos</h3><p>Cocos Creator： <a href="https://docs.cocos.com/creator/manual/zh/getting-started/introduction.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/getting-started/introduction.html</a><br>Q：Cocos Creator 是游戏引擎吗？<br>A：它是一个完整的游戏开发解决方案，包含了轻量高效的跨平台游戏引擎，以及能让你更快速开发游戏所需要的各种图形界面工具。</p><p>关于 Cocos Creator:<br>Cocos Creator 是以内容创作为核心的游戏开发工具，在 Cocos2d-x 基础上实现了彻底脚本化、组件化和数据驱动等特点。</p><h3 id="Egret"><a href="#Egret" class="headerlink" title="Egret"></a>Egret</h3><p>egret: <a href="https://www.egret.com" target="_blank" rel="noopener">https://www.egret.com</a><br>Egret是一套HTML5游戏开发解决方案，产品包含Egret Engine，Egret Wing，EgretVS，Res Depot，Texture Merger，TS Conversion，Egret Feather，Egret Inspector，DragonBones，Lakeshore等。<br>而核心产品是Egret Engine，是一个基于TypeScript语言开发的一个HTML5游戏引擎，其余的大多是开发和辅助工具。</p><p>EgretPro： <a href="https://docs.egret.com/egretpro/docs/guide/getting-started-introduction" target="_blank" rel="noopener">https://docs.egret.com/egretpro/docs/guide/getting-started-introduction</a><br>目前 EgretPro 支持通过命令行的方式发布到 Web 平台。</p><h3 id="create-js"><a href="#create-js" class="headerlink" title="create.js"></a>create.js</h3><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.7 星期三  11：00 &lt;/p&gt;


&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;!-- 完全凭第一印象 --&gt;

      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Websocket问题</title>
    <link href="http://yoursite.com/sum/jsplus/websocket%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/sum/jsplus/websocket问题/</id>
    <published>2021-04-07T00:00:00.000Z</published>
    <updated>2021-09-04T09:55:21.783Z</updated>
    
    <content type="html"><![CDATA[<!-- [WebSocket断开原因分析，再也不怕为什么又断开了](https://segmentfault.com/a/1190000014582485) --><p>如何在老IE上使用原生WebSocket？<br>web-socket-js是基于flash的技术，只需要引入两个js文件和一个swf文件，就可以让浏览器用于几乎原生的WebSocket接口。另外，web-socket-js还是需要在ws服务端843端口做一个flash安全策略文件的服务。</p><p>我自己曾经基于stompjs和web-socket-js，做WebSocket兼容到IE5, 当然了stompjs在低版本的IE上有兼容性问题, 而且stompjs已经不再维护了，你可以使用我fork的一个版本，地址是：<a href="https://github.com/wangduandu.." target="_blank" rel="noopener">https://github.com/wangduandu..</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- [WebSocket断开原因分析，再也不怕为什么又断开了](https://segmentfault.com/a/1190000014582485) --&gt;
&lt;p&gt;如何在老IE上使用原生WebSocket？&lt;br&gt;web-socket-js是基于flash的技术，只需要
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Mongo数据库设计</title>
    <link href="http://yoursite.com/sum/ser/monogo%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/sum/ser/monogo数据库设计/</id>
    <published>2021-04-07T00:00:00.000Z</published>
    <updated>2021-04-10T13:20:38.406Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.7 星期三  14：37 </p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><!-- \#1 [MongoDB设计方法及技巧](https://www.cnblogs.com/zimug/p/13175156.html) --><p>二、数据库设计技巧和窍门<br>2.1.规范化存储与非规范化存储<br>所以在两种存储数据方式之间进行选择之前，先评估一下你的应用数据库的使用方式。</p><p>如果您有一个不需要频繁更新的数据，更新的即时一致性不是很重要，但是在读取时需要良好的性能，那么非规范化可能是明智的选择。（比如：我们博客的博文，作者一旦保存之后，几乎就不在进行频繁的修改，但是面临着读者频繁的读取阅读操作）</p><p>如果数据库中的文档数据需要不断的更新，并且您希望在写入时具有良好的性能，那么您可能需要考虑规范化存储。（比如：需要频繁修改数据的业务类系统）</p><p>2.2. 一对多关系<br>与RDBMS相比，在MongoDB中对“一对多”关系建模需要进行更细粒度的设计。许多初学者陷入将文档数组嵌入父文档中的陷阱。正如我们在上文中介绍的，知道何时进行规范化存储或非规范化存储是非常重要的。因此设计者需要考虑关系的基数是<strong>“一个对少数几个”还是“一个对多个”</strong>？每种关系将具有不同的建模方法。</p><p>2.3.设计模式可视化<br>尽管MongoDB是schemaless“无模式的”，但仍然存在将集合collections可视化为图表的方法。能够查看设计图，将对您理解和设计MongoDB的方式上产生重大影响。</p><p>DbSchema是可以很好地完成可视化设计工作的一个工具。<br>2.4.智能索引<br>为了保持数据库的良好性能，有必要建立智能索引，这将简化写入和读取操作。知道MongoDB的索引优势和局限性非常重要，MongoDB保留用于排序操作的内存限制为32MB。如果你不使用索引，则排序时数据库将被迫将所有排序文档hold在内存里面，如果达到32M的限制，则数据库将返回错误或空集。<br><!-- \#1 end --></p><h3 id="内嵌-vs-引用"><a href="#内嵌-vs-引用" class="headerlink" title="内嵌 vs 引用"></a>内嵌 vs 引用</h3><!-- \#2 [聊聊 MongoDB 数据库的设计](https://www.codesky.me/archives/talk-about-mongodb-collection-design.wind) --><p>各种垃圾设定，包括但不仅限于：<br>没有事务<br>没有表连接（新版支持了，但估摸着性能堪忧）</p><!-- 前两天无聊接着看《MongoDB 权威指南》的时候看到一些观点， --><p>在 SQL 中，我们经常会提起：一对一，一对多，多对多，而在 MongoDB 这样的数据库中，<strong>我们可以分为新的类型：少和多</strong>，之后我们会根据少和多进行一些数据库设计的详细分析，先来简单根据之前的介绍引用一下《MongoDB 权威指南》中的表格：</p><table><thead><tr><th>更适合内嵌</th><th>更适合引用</th></tr></thead><tbody><tr><td>子文档较小</td><td>子文档较大</td></tr><tr><td>数据不会定期改变</td><td>数据经常改变</td></tr><tr><td>最终数据一致即可</td><td>中间阶段的数据必须一致</td></tr><tr><td>文档数据小幅增加</td><td>文档数据大幅增加</td></tr><tr><td>数据通常需要执行二次查询才能获得</td><td>数据通常不包含在结果中</td></tr><tr><td>快速读取</td><td>快速写入</td></tr></tbody></table><p>由于 MongoDB 的文档会自动扩充大小，如果太过频繁的让 MongoDB 产生文档移动，将会造成性能问题，在设计阶段，可以预留足够的空间，提高写入速度。</p><!-- \#2 end --><!-- [MongoDb数据库设计](https://blog.csdn.net/wangyongxuyan/article/details/84132857) --><!-- 储存在MongoDB中的文档是一种类JSON格式，为了得到更高的效率，使用了一种二进制表现形式且被称为BSON的格式。目标是使数据更紧凑和合理以便于扫描。 客户端序列化数据成BSON传送至数据库中，数据是以BSON格式被存储的。因此，读取数据的时候，数据库只需做很小的解析处理就可以传送出去，更加高效。然后客户端在反序列化BSON格式为当前语言使用的格式。 --><h3 id="几个好处"><a href="#几个好处" class="headerlink" title="几个好处"></a>几个好处</h3><p>1、一次数据库查询可以得到整条记录。。<br>2、一条记录的所有信息都书存储在硬盘的的同一片区域，所以一次检索可以可以得到所有数据。<br>3、插入或更新单条属性时：<br>4、插入一条新属性不需要在硬盘上移动整条记录，Mongo有一个预留机制，预留出了一部分空间以适应数据对象的增长。也可以预防索引的增长等问题。 </p><p>Embed vs. Reference<br>在Mongo数据库设计中关键的一句话是“比起嵌入到其他Collection中做一个子对象，每个对象值得拥有自己的Collection吗？”。在关系数据库中。每个有兴趣的子项目通常都会分离出来单独设计一张表（除非为了性能的考虑）。而在Mongo中，是不建议使用这种设计的，嵌入式的对象更高效。(这句不是很确定Data is then colocated on disk; client-server turnarounds to the database are eliminated)数据是即时同步到硬盘上的，客户端与服务器不必要在数据库上做周转。所以通常来说问题就是“为什么不使用嵌入式对象呢？”  </p><h3 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h3><p>1、顶级对象，一般都有自己的Collection<br>2、线性细节对象，一般作为嵌入式的<br>3、一个对象和另一个对象是包含关系时通常采用嵌入式设计<br>4、多对多的关系通常采取引用设计<br>5、只含有几个简单对象的可以单独作为一个Collection，因为整个Collection可以很快的被缓存在应用程序服务器内存中。<br>6、在Collection中嵌入式对象比顶级对象更难引用。as you cannot have a DBRef to an embedded object (at least not yet).<br>7、It is more difficult to get a system-level view for embedded objects. For example, it would be easier to query the top 100 scores across all students if Scores were not embedded.<br>8、如果将要嵌入的数据量很大（很多M），你可以限制单个对象的大小<br>9、如果性能存在问题，请使用嵌入式设计<br><!-- #3 end --></p><!-- ## 其他[MongoDB 数据库的命名、设计规范详解](https://www.jb51.net/article/179928.htm)[MongoDB数据库的设计规范](https://www.cnblogs.com/xuliuzai/p/9884178.html)1. 数据库设计规范2. 2. 集合设计规范3. 文档设计规范4. 连接规范5. 操作规范 不是需要的设计规范。是一种命名、操作上的规范。--><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.7 星期三  14：37 &lt;/p&gt;


&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;!-- \#1 [MongoDB
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="monogo" scheme="http://yoursite.com/tags/monogo/"/>
    
  </entry>
  
  <entry>
    <title>indexedDB学习</title>
    <link href="http://yoursite.com/sum/jsplus/indexedDB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/jsplus/indexedDB学习/</id>
    <published>2021-04-06T00:00:00.000Z</published>
    <updated>2021-04-09T09:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>IndexedDB: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API</a><br>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索。</p><p style="text-align:right"> 2021.4.6 星期二  14：20 </p><blockquote><p>此特性在 Web Worker 中可用。<br>注意： 正如大多数的 web 储存解决方案一样，IndexedDB 也遵守同源策略。</p></blockquote><h2 id="关键概念和用法"><a href="#关键概念和用法" class="headerlink" title="关键概念和用法"></a>关键概念和用法</h2><p>IndexedDB 是一个事务型数据库系统，类似于基于 SQL 的 RDBMS。 然而，不像 RDBMS 使用固定列表，IndexedDB 是一个基于 JavaScript 的面向对象数据库。</p><h3 id="同步和异步（Synchronous、asynchronous）"><a href="#同步和异步（Synchronous、asynchronous）" class="headerlink" title="同步和异步（Synchronous、asynchronous）"></a>同步和异步（Synchronous、asynchronous）</h3><p>使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。<!-- IndexedDB 最初包括同步和异步 API。同步 API 仅用于 Web Workers，且已从规范中移除，因为尚不清晰是否需要。但如果 Web 开发人员有足够的需求，可以重新引入同步 API。 --></p><h3 id="储存限制和回收标准"><a href="#储存限制和回收标准" class="headerlink" title="储存限制和回收标准"></a>储存限制和回收标准</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria" target="_blank" rel="noopener">IndexedDB 浏览器存储限制和清理标准</a></p><h4 id="储存限制"><a href="#储存限制" class="headerlink" title="储存限制"></a>储存限制</h4><p>浏览器的最大存储空间是动态的——它取决于您的硬盘大小。 全局限制为可用磁盘空间的50％。<br>还有另一个限制称为组限制——这被定义为全局限制的20％，但它至少有10 MB，最大为2GB。</p><h4 id="LRU策略"><a href="#LRU策略" class="headerlink" title="LRU策略"></a>LRU策略</h4><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>localForage：一个简单的 Polyfill，提供了简单的客户端数据存储的值语法。它在后台使用 IndexedDB，并在不支持 IndexedDB 的浏览器中回退到   WebSQL 或 localStorage。<br>Dexie.js：IndexedDB 的包装，通过简单的语法，可以更快地进行代码开发。<br>ZangoDB：类似 MongoDB 的 IndexedDB 接口，支持 MongoDB 的大多数熟悉的过滤、投影、排序、更新和聚合功能。<br>JsStore：一个带有 SQL 语法的 IndexedDB 包装器。<br>MiniMongo：由 localstorage 支持的客户端内存中的 mongodb，通过 http 进行服务器同步。MeteorJS 使用 MiniMongo。<br>PouchDB：使用 IndexedDB 在浏览器中实现 CouchDB 的客户端。<br>idb：一个微小的（〜1.15k）库，大多 API 与 IndexedDB 类似，但做了一些小的改进，让数据库的可用性得到了大大的提升。<br>idb-keyval：使用 IndexedDB 实现的超级简单且小巧的（~600B）基于 Promise 的键值对存储。<br>sifrr-storage：一个非常小的（~2kB）基于 Promise 的客户端键值数据库。基于 IndexedDB、localStorage、WebSQL 和 Cookies 实现。它可以自动选择上述支持的数据库，并按照优先顺序使用。<br>lovefield：Lovefield 是一个用于 Web App 的关系型数据库，使用 JavaScript 编写，可以在不同的浏览器环境中运行，提供了类似 SQL 的 API，速度快、安全且易用。</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">浏览器数据库 IndexedDB 入门教程</a><br><!-- [IndexedDB 教程](https://www.jianshu.com/p/ca838ff7e4d8) --><br><!-- 现有的浏览器数据储存方案，都不适合储存大量数据：Cookie 的大小不超过4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景。 --></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>IndexedDB 具有以下特点。<br>（1）键值对储存。<!--  IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以"键值对"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。 --><br>（2）异步。<!--  IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。 --><br>（3）支持事务。 <!-- IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。 --><br>（4）同源限制 <!-- IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库 -->。<br>（5）储存空间大 <!-- IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限 -->。<br>（6）支持二进制储存。<!-- IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。 --></p><p>（8）能够为数据建立索引，以此提高查询数据的各方面性能。<br>  <a href="https://blog.csdn.net/qq_34874034/article/details/104907704" target="_blank" rel="noopener">indexedDB概述</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>IDBFactory：数据库工厂，负责打开或者创建数据库<br><!-- IDBFactory.open 方法发送一个打开或者创建一个数据库的请求IDBFactory.deleteDatabase 方法： 发送一个删除数据库的请求 --></p><p>IDBDatabase: 数据库<br><!-- IDBDatabase.close 方法关闭数据库。 --><br><!-- IDBDatabase.createObjectStore 方法创建  -->store，相当于表<br><!-- IDBDatabase.transaction 开启一个事务。 --></p><p>IDBIndex：数据库表的索引<br>IDBObjectStore：数据库表<br>IDBTransaction：事务<br>IDBRequest：机会是所有 indexedDB 操作的返回值，indexedDB 操作请求<br><!-- IDBRequest.result 结果IDBRequest.onerror 异常事件IDBRequest.onsuccess 成功的事件 --></p><p>操作请求：IDBRequest 对象<br>指针： IDBCursor 对象<br>主键集合：IDBKeyRange 对象</p><!-- [JS-indexedDB和应用](https://blog.csdn.net/u013362192/article/details/115443766) --><!-- 索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值） --><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>区块链项目，服务端只存储加密字符串：客户端(electron)需要下载大量的加密数据，然后批量解密，并且提供排序和数据流转。所以前端没数据库是不行的<br>配合Electron做一个桌面应用<br>需要存储大量数据的应用，比如图书管理系统这类的需要存储大量数据的应用，完全可以将图书信息存储在IndexedDB中<br>配和service worker构建pwa应用，用来缓存网络请求<br>离线日志：Tent-reflow</p><h1 id="扩展须知"><a href="#扩展须知" class="headerlink" title="扩展须知"></a>扩展须知</h1><h2 id="大小限制"><a href="#大小限制" class="headerlink" title="大小限制"></a>大小限制</h2><!-- [前端大容量缓存方案-IndexedDB](https://zhuanlan.zhihu.com/p/104536473) --><p>在 Chrome 正常模式下<br>如果命中了should remain available的值 的配额将为零，对临时存储的其他写操作将失败<!-- ，但是临时存储中的现有数据将不会被删除 -->。如果尚未达到should remain available值，则配额将为共享池的20％。<br><!-- should remain available值与在大容量存储上保持空闲的空间有关。从Chrome 67开始，它是2 GB和大容量存储总容量的10％中的较低值。一旦达到此限制，对临时存储的其他写操作将失败，但是临时存储中的现有数据将不会被删除。 --></p><p>在 Chrome 隐身模式下<br>固定 100MB 的大小</p><p>IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象），所以我们可以把图片或者 3D 模型文件转化成 Blob 格式的文件，存在 IndexedDB 中，就可以解决免去二次加载时网络请求的时间。</p><!-- [IndexedDB使用与出坑指南](https://segmentfault.com/a/1190000006924681) --><p>取值相关<br>key值能够接受的数据类型<br>key path能够接受的数据类型<br>value能够接受的数据类型</p><p>清空缓存<br>用户在清除浏览器缓存时，可能会清除IndexedDB中相关的数据。</p><p>访问权限<br>部分浏览器如Safari手机版隐私模式在访问IndexedDB时，可能会出现由于没有权限而导致的异常（LocalStorage也会），需要进行异常处理。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><!-- [浏览器里的本地数据库：IndexedDB](https://www.infoq.cn/article/jglgydX0S0OMRlANvzXP) --><p>从上面的例子中可以看出，每一次操作需要至少三行代码才能完成，而且需要一直维护 DB 的对象引用，避免它被回收，这样子开发代码膨胀得太厉害，所以我们在业务中引入其他类库来减少代码量</p><p>LocalForage<br>可以指定数据存储方案，默认依次为 IndexedDB、WebSQL、LocalStorage，意味着当前 IndexedDB 失效可以有兜底措施。<br>API 简化为 CRUD ( getItem、removeItem、setItem、clear )<br>库大小为 475b</p><p>Pouchdb<br>API 简化为 put、get、remove，基于 promise 来检查回收错误<br>有较好的错误日志机制， 如失败，冲突等等，方便调试<br>库大小为 255b</p><h2 id="Web-SQL"><a href="#Web-SQL" class="headerlink" title="Web SQL"></a>Web SQL</h2><!--   [新一代的前端存储方案--indexedDB](https://my.oschina.net/jamesview/blog/1819938)IndexedDB 是 WebSQL 数据库的取代品, W3C组织在2010年11月18日废弃了webSql. IndexedDB 和WebSQL的不同点在于WebSQL 是关系型数据库（复杂）IndexedDB 是key-value型数据库（简单好使）. --><!-- [IndexedDB 实践](http://www.alloyteam.com/2019/09/13969/) --><p>由于 Web SQL 的规范已经废弃，官方说法是因为无法走标准化的流程，大概意思是你都用 SQL 了，本身就是一个标准化的东西，每个浏览器实现几乎一样，没有多样性了，没法进行标准的演进，所以废弃了。<br><!-- Web SQL Database: <https://dev.w3.org/html5/webdatabase/> --></p><blockquote><p>This document was on the W3C Recommendation track but specification work has stopped. The specification reached an impasse: all interested implementors have used the same SQL backend (Sqlite), but we need multiple independent implementations to proceed along a standardisation path.</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><!-- IndexedDB API: <https://wangdoc.com/javascript/bom/indexeddb.html>IndexedDB: <https://lavas-project.github.io/pwa-book/chapter03/5-indexeddb.html#indexeddb>[IndexedDB](https://www.cnblogs.com/l-y-h/p/11688035.html)  $_PS: 有一个vue的案例  --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IndexedDB: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozi
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器插件开发</title>
    <link href="http://yoursite.com/sum/others/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/sum/others/浏览器插件开发/</id>
    <published>2021-04-06T00:00:00.000Z</published>
    <updated>2021-09-04T08:00:34.363Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.6 星期二 </p><br><!-- Chrome插件有：extension，app， NaCl(Native Client)， PNaCl(Portable Native Client)等。但因为安全性，兼容性等各种原因，Chrome官方已经宣布：逐渐废弃其它类型的插件，只保留extension,文件扩展名为crx. --><br><br>## chrome extendsion 开发<br><a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="noopener">https://developer.chrome.com/extensions/manifest</a><br><a href="http://open.chrome.360.cn/extension_dev/bookmarks.html" target="_blank" rel="noopener">360开发文档-书签</a><br><!-- [[【干货】Chrome插件(扩展)开发全攻略]](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html) --><br><!-- Chrome 平台 API: <http://www.kkh86.com/it/chrome-extension-doc/extensions/api_index.html>$_PS: 非常全的api --><br><br><!-- [Chrome 扩展(插件) 开发教程](https://dev.crxhome.org/guide/user_interface.html#设计交互界面)vue-doc 文档方式。更友好。 推荐入门[Chrome Extension插件开发概述](https://blog.csdn.net/haoaiqian/article/details/86749728)【干货】部分内容[Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/index.html)来源360。 但网页ui更简洁  --><br><br>manifest.json: name, icons, manifest_version, version, description<br>browser_action<br>page_action<br>options_page/ options_ui<br>chrome_url_overrides<br>devtools_page<br><br>background<br>content_scripts<br>web_accessible_resources<br><br>permissions<br><br>omnibox<br><br><br>injected-script, event-page,<br><br><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class="line"><span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="comment">// 插件的名称</span></span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line"><span class="comment">// 插件的版本</span></span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="comment">// 插件描述</span></span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"简单的Chrome扩展demo"</span>,</span><br><span class="line"><span class="comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class="line"><span class="attr">"icons"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"16"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line"><span class="attr">"48"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line"><span class="attr">"128"</span>: <span class="string">"img/icon.png"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line"><span class="attr">"background"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line"><span class="attr">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line"><span class="comment">//"scripts": ["js/background.js"]</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line"><span class="attr">"browser_action"</span>: </span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"default_icon"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line"><span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line"><span class="attr">"default_title"</span>: <span class="string">"这是一个示例Chrome插件"</span>,</span><br><span class="line"><span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 当某些特定页面打开才显示的图标</span></span><br><span class="line"><span class="comment">/*"page_action":</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">"default_icon": "img/icon.png",</span></span><br><span class="line"><span class="comment">"default_title": "我是pageAction",</span></span><br><span class="line"><span class="comment">"default_popup": "popup.html"</span></span><br><span class="line"><span class="comment">&#125;,*/</span></span><br><span class="line"><span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line"><span class="attr">"content_scripts"</span>: </span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//"matches": ["http://*/*", "https://*/*"],</span></span><br><span class="line"><span class="comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span></span><br><span class="line"><span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</span><br><span class="line"><span class="comment">// 多个JS按顺序注入</span></span><br><span class="line"><span class="attr">"js"</span>: [<span class="string">"js/jquery-1.8.3.js"</span>, <span class="string">"js/content-script.js"</span>],</span><br><span class="line"><span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line"><span class="attr">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line"><span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line"><span class="attr">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"matches"</span>: [<span class="string">"*://*/*.png"</span>, <span class="string">"*://*/*.jpg"</span>, <span class="string">"*://*/*.gif"</span>, <span class="string">"*://*/*.bmp"</span>],</span><br><span class="line"><span class="attr">"js"</span>: [<span class="string">"js/show-image-content-size.js"</span>]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 权限申请</span></span><br><span class="line"><span class="attr">"permissions"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line"><span class="string">"tabs"</span>, <span class="comment">// 标签</span></span><br><span class="line"><span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line"><span class="string">"webRequest"</span>, <span class="comment">// web请求</span></span><br><span class="line"><span class="string">"webRequestBlocking"</span>,</span><br><span class="line"><span class="string">"storage"</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line"><span class="string">"http://*/*"</span>, <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line"><span class="string">"https://*/*"</span> <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span></span><br><span class="line"><span class="attr">"web_accessible_resources"</span>: [<span class="string">"js/inject.js"</span>],</span><br><span class="line"><span class="comment">// 插件主页，这个很重要，不要浪费了这个免费广告位</span></span><br><span class="line"><span class="attr">"homepage_url"</span>: <span class="string">"https://www.baidu.com"</span>,</span><br><span class="line"><span class="comment">// 覆盖浏览器默认页面</span></span><br><span class="line"><span class="attr">"chrome_url_overrides"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 覆盖浏览器默认的新标签页</span></span><br><span class="line"><span class="attr">"newtab"</span>: <span class="string">"newtab.html"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Chrome40以前的插件配置页写法</span></span><br><span class="line"><span class="attr">"options_page"</span>: <span class="string">"options.html"</span>,</span><br><span class="line"><span class="comment">// Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个</span></span><br><span class="line"><span class="attr">"options_ui"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"page"</span>: <span class="string">"options.html"</span>,</span><br><span class="line"><span class="comment">// 添加一些默认的样式，推荐使用</span></span><br><span class="line"><span class="attr">"chrome_style"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span></span><br><span class="line"><span class="attr">"omnibox"</span>: &#123; <span class="attr">"keyword"</span> : <span class="string">"go"</span> &#125;,</span><br><span class="line"><span class="comment">// 默认语言</span></span><br><span class="line"><span class="attr">"default_locale"</span>: <span class="string">"zh_CN"</span>,</span><br><span class="line"><span class="comment">// devtools页面入口，注意只能指向一个HTML文件，不能是JS文件</span></span><br><span class="line"><span class="attr">"devtools_page"</span>: <span class="string">"devtools.html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 能力<br>Chrome插件提供了很多实用API供我们使用，包括但不限于：<br>书签控制；<br>下载控制；<br>窗口控制；<br>标签控制；<br>网络请求控制，各类事件监听；<br>自定义原生菜单；<br>完善的通信机制；<br>等等；<br><br>#### override<br>书签管理器：从工具菜单上点击书签管理器时访问的页面，或者从地址栏直接输入 chrome://bookmarks。<br>历史记录：从工具菜单上点击历史记录时访问的页面，或者从地址栏直接输入 chrome://history。<br>新标签页：当创建新标签的时候访问的页面，或者从地址栏直接输入 chrome://newtab。<br>注意：一个扩展只能替代一个页面。<br><br>### api<br><!-- [浏览器插件开发-常用API](https://blog.csdn.net/mjzhang1993/article/details/84848985) --><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs</span><br><span class="line">chrome.runtime</span><br><span class="line">chrome.webRequest</span><br><span class="line">chrome.window</span><br><span class="line">chrome.storage</span><br><span class="line">chrome.contextMenus</span><br><span class="line">chrome.devtools</span><br><span class="line">chrome.extension</span><br></pre></td></tr></table></figure><br><br>chrome.runtime.getBackgroundPage(background: Window =&gt; {…}) 返回当前扩展的 background 对象<br>chrome.runtime.ma 返回清单文件<br>chrome.runtime.getURL 返回扩展中文件相对于安装位置的路径<br>chrome.runtime.setUninstallURL 设置卸载时要访问的 URL<br>chrome.runtime.reload 重新加载扩展<br><br><br>chrome.tabs.create(params, callback) 创建一个新的标签，以下是 params 参数<br>windowId 创建新标签的目标窗口，默认当前窗口<br>index 标签在窗口中的位置<br>url 标签导航的初始页面<br>selected 是否为选中的 默认是true<br>pinned 标签是否为固定<br>callback(tab) tab 是创建后的标签的细节，包括id<br>chrome.tabs.executeScript(tabId, details, callback) 向标签页注入脚本<br>tabId 标签页ID，默认为当前选中窗口<br>details.code 直接注入的脚本代码<br>details.file 也可以指定注入的脚本文件，与 details.code 二选一<br>chrome.tabs.get(tabId, callback) 获取指定标签页的细节<br>chrome.tabs.getSelected(windowId, callback) 获取特定窗口（windowId 默认为当前窗口） 的选中的标签<br>chrome.tabs.insertCSS(tabId, details, callback) 向页面注入样式<br>chrome.tabs.remove(tabId, callback) 移除标签<br><br><br>chrome.extension<br>&gt; 主要被用于通信支持，提供 扩展与 content_script 之间， 扩展与扩展之间，与大多数 chrome.* API 不同，chrome.extension 部分功能可以直接在 content_script 中使用<br>&gt; 注意 chrome.extension 与 chrome.runtime 由很多重叠的 api , chrome.extension 比较老旧，尽量使用 chrome.runtime<br><br>chrome.extension.connect<br>chrome.extension.onConnect<br>chrome.extension.sendMessage<br>chrome.extension.onMessage<br>chrome.extension.getURL<br><br><!-- \#1  [Chrome浏览器扩展开发系列之八：Chrome扩展的数据存储](https://www.cnblogs.com/champagne/p/4826611.html)[Chrome浏览器扩展开发系列之八：Chrome扩展的数据存储](https://huajiakeji.com/dev/2018-12/1754.html) --><br>#### chrome.cookies<br>在manifest.json文件中声明cookie权限以及要访问的域如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"permissions"</span>: [</span><br><span class="line">  <span class="string">"cookies"</span>,</span><br><span class="line">  <span class="string">"*://*.google.com"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>chrome.cookies.CookieStore对象表示浏览器中的cookie仓库，常见的有正常模式的CookieStore和隐身模式的CookieStore。<br><br>常规方法 get | remove | set | getAll 等除外，以下是可能会用到的 api<br>chrome.cookies.get(object details, function(Cookie cookie) {…})<br>  url, name, storeId<br>chrome.cookies.getAll(object details, function(array of Cookie cookies) {…})<br>chrome.cookies.set(object details, function(Cookie cookie) {…})<br>chrome.cookies.remove(object details, function(object details) {…})<br>  url, name, storeId<br><br>chrome.cookies.getAllCookieStores(function(array of CookieStore cookieStores) {…})<br><br>chrome.cookies.onChanged.addListener(({removed, cookie}) =&gt; {…}) removed=true 表示的是cookie被删除的情况，否则表示被添加或者设置，cookie 表示操作的cookie<br><br><br><!-- End: #1 --><br><br>#### chrome.storage<br><!-- \#2 [14-chrome 扩展开发 - chrome.storage 本地存储](http://www.ptbird.cn/chrome-extensions-storage.html) [Chrome storage存储 API使用详解](https://blog.csdn.net/sinat_36001828/article/details/104814507)--><br><br>Chrome 存储 API 提供了 2 种储存区域，分别是 sync 和 local。两种储存区域的区别在于，sync 储存的区域会根据用户当前在 Chrome 上登陆的 Google 账户自动同步数据，当无可用网络连接可用时，sync 区域对数据的读写和 local 区域对数据的读写行为一致。<br><br>对于每种储存区域，Chrome 又提供了 5 个方法，分别是 get、getBytesInUse、set、remove 和 clear。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chrome.storage.local.set(&#123;<span class="attr">key</span>: value&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Value is set to '</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">chrome.storage.local.get([<span class="string">'key'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Value currently is '</span> + result.key);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">chrome.storage.local.getBytesInUse(keys, <span class="function"><span class="keyword">function</span>(<span class="params">bytes</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bytes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome.storage.onChanged.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">changes, areaName</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Value in '</span>+areaName+<span class="string">' has been changed:'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(changes);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>在 get() 方法中 keys 可以是字符串、包含多个字符串的数组或对象。<br>如果 keys 是对象，则会先读取以这个对象属性名为键值的数据，如果这个数据不存在则返回 keys 对象的属性值（比如 keys 为 {‘name’:’Billy’}，如果 name 这个值存在，就返回 name 原有的值，如果不存在就返回 ‘Billy’）。<br><br>set() 方法为写入数据<br>items 为对象类型，形式为键/值对。items 的属性值如果是字符型、数字型和数组型，则储存的格式不会改变，但如果是对象型和函数型的，会被储存为 “{}”，如果是日期型和正则型的，会被储存为它们的字符串形式。<br><br>remove() 方法为删除数据，完整方法为：其中 keys 可以是字符串，也可以是包含多个字符串的数组。<br>clear() 方法为删除所有数据<br><br><br>getBytesInUse() 方法为获取一个数据或多个数据所占用的总空间，返回结果的单位是字节，完整方法为：<br><br>Chrome 同时还为存储 API 提供了一个 onChanged() 事件，当存储区的数据发生改变时，这个事件会被激发。<br>callback() 会接收到两个参数，第一个为 changes，第二个是 StorageArea。changes 是词典对象，键为更改的属性名称，值包含两个属性，分别为 oldValue 和 newValue；StorageArea 为 local 或 sync。<br><!-- End: #2 --><br><br><br><br><!-- 其他[谷歌(Chrome)浏览器插件开发教程](https://www.jianshu.com/p/51c650f98d9c)极简demo[Chrome插件(扩展)开发全攻略](https://www.bookstack.cn/read/chrome-plugin-develop/spilt.9.8bdb1aac68bbdc44.md)$_PS: 一个文档网站。 --><br><br><br>#### bookmarks<br>对象和属性<br>书签是按照树状结构组织的，每个节点都是一个书签或者一组节点（每个书签夹可包含多个节点）。每个节点都对应一个 BookmarkTreeNode 对象。<br>可以通过 chrome.bookmarks API来使用BookmarkTreeNode的属性。例如，当调用函数 create()，可以传入参数新节点的父节点（父节点ID），以及可选的节点索引，标题和url属性。可参看 BookmarkTreeNode 来获取节点的信息。<br><br><br>方法<br>create<br>get<br>getChildren<br>getRecent<br>getTree<br>move<br>remove<br>removeTree<br>search<br>update<br><br>事件<br>onChanged<br>onChildrenReordered<br>onCreated<br>onImportBegan<br>onImportEnded<br>onMoved<br>onRemoved<br><br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chrome.bookmarks.create(&#123;</span><br><span class="line">    <span class="string">'parentId'</span>: bookmarkBar.id,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'Extension bookmarks'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">newFolder</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"added folder: "</span> + newFolder.title);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><!-- 类型 --><br>##### BookmarkTreeNode<br>( object )<br>这个节点对象代表一个书签或者一个书签目录项。 节点对象有父子关系。<br>id ( string )<br>节点的唯一标识。IDs 在当前配置文件中是唯一的，浏览器重启后依然有效。<br>parentId ( optional string )<br>父节点的ID。根节点没有父节点。<br>index ( optional integer )<br>在父节点的书签夹范围内，该节点的索引，从0开始。<br>url ( optional string )<br>当用户点击书签时，浏览器访问的url。书签夹没有该属性 。<br>title ( string )<br>节点的说明文字。<br>dateAdded ( optional number )<br>节点创建时距纪元时间的毫秒数。 (new Date(dateAdded)).<br>dateGroupModified ( optional number )<br>书签夹内容的最后更新时间距纪元时间的毫秒数。<br>children ( optional array of BookmarkTreeNode )<br>节点的孩子的有序列表。<br><br><br><br>## 跨浏览器<br><!-- [[苹果：你甚至可以在 Safari 中使用 Chrome 的插件]](https://www.infoq.cn/article/TdS104Q68yk3oLONlk9x) --><br><!-- 2020 年 9 月 11 日 --><br>为了让开发者不需要写多套代码，Mozilla 发布了 WebExtensions API。WebExtensions API 主要基于 JavaScript、HTML 和 CSS，可以重新打包并在 Chrome、Firefox 和 Edge 等其他浏览器中使用。<br><br>6月27日消息，在WWDC2020，苹果宣布<br>近日，苹果宣布 Safari 也可以使用 WebExtensions API 了。苹果此前所使用的 Safari App Extensions 虽然在 macOS 应用程序和 Safari 之间共享代码很便捷，但无法将组件移植到其他浏览器，也无法将其他浏览器的组件移植到 Safari 中。<br><br>值得注意的是，Safari Web 扩展需要在 macOS 11 及更高版本或者安装了 Safari 14 的 macOS 10.14.6 或 10.15.6 中使用。<br><br><!-- [safari浏览器开发app插件_苹果新动作：Chrome插件可以移植到Safari浏览器了](https://blog.csdn.net/weixin_32446485/article/details/113581451) --><br><br>## chrome<br>位置：<br>Mac： ~/Library/Application Support/Google/Chrome/Default/Extensions/fmkxxxxxxxxxnihi/4.10.1_0<br><br>### 安装<br><br><br><br>## firefox<br><!-- [[利用Firefox开发者网站，转换Chrome插件为Firefox插件]](https://zhuanlan.zhihu.com/p/163535578)  发布于 2020-07-24--><br>1、提前准备好Chrome插件。<br>3、打开Firefox开发者网址<br><a href="https://addons.mozilla.org/zh-CN/firefox/" target="_blank" rel="noopener">https://addons.mozilla.org/zh-CN/firefox/</a><br>6、登录后，点击页面右上角“开发者中心”<br>7、点击右下角“提交新附加组件”<br>8、选择如何分发此版本。<br>因为我们上传的是别人开发的东西，只是用此方法来转换，所以一定请选“我自己托管”。不这样选，插件会出现在插件库中，全网可以搜索到。当然，大概率是你上传后根本审核不通过……<br>9、点击“选择文件”，选择刚才你准备好的插件文件。<br>10、选定你准备好的插件后，插件会自动上传并进行验证，<br>11、出现让你提交源代码的页面<br>13、找到你刚才提交的附加组件并点击<br><br><!-- How to develop firefox extentionsfirefox插件开发教程1.Development Overviewhttp://www.rietta.com/firefox/Tutorial/overview.pdf2.Environment Setuphttp://www.rietta.com/firefox/Tutorial/env.pdf3.Configuration Fileshttp://www.rietta.com/firefox/Tutorial/conf.pdf4.Creating GUIshttp://www.rietta.com/firefox/Tutorial/guis.pdf5.The Backendhttp://www.rietta.com/firefox/Tutorial/backend.pdf6.Preferenceshttp://www.rietta.com/firefox/Tutorial/prefs.pdf7.Localizationhttp://www.rietta.com/firefox/Tutorial/locale.pdf8.Distributionhttp://www.rietta.com/firefox/Tutorial/dist.pdf9.Securityhttp://www.rietta.com/firefox/Tutorial/security.pdf Safari: http://develop.apple.com   (打不开)firefox: http://developer.mozilla.org/en/docs/Plugins--><br>## safari<br>### 文档<br><a href="https://developer.apple.com/videos/play/wwdc2020/10665/" target="_blank" rel="noopener">Meet Safari Web Extensions</a><br>视频教程，英文。<br><br>### 转化现有插件<br><!-- [How to convert Chrome extensions to run in Safari](https://forums.macrumors.com/threads/how-to-convert-chrome-extensions-to-run-in-safari.2247012/) --><br><code>xcrun safari-web-extension-converter</code><br>xcrun safari-web-extension-converter /big/ass/path/to/chrome/extensions/from/above/{EXTENSION ID}/{some version number}<br><br>1. First, you need to be on Big Sur with the latest Xcode (12) installed. But! There’s a big <strong>asterisk</strong> to this which I’ll get to later.<br><br>I’ve successfully converted extensions like Refind, Notion, DF Tube, the 33Msil extension, and a couple of others. From what I can tell extensions that change the page layout somehow or grab URLs work.<br><br><br><strong>Big asterisk</strong>: From the limited testing I’ve done you can’t convert extensions on Catalina with Xcode 12 installed BUT you can build them. What I’ve done is converted the extensions on my macOS 11 machine and then copied them over to my Catalina machine and built there. These extensions will run in the Safari 14 beta for Catalina.<br><br><br><br>#### 问题<br>1. <code>scrub: error: unable to find utility &quot;safari-web-extension-converter&quot;, not a developer tool or in PATH.</code><br>&gt; I originally tried this on Xcode 12.5 Beta.<br><br>Try launching the terminal and reselecting your Xcode install as the primary. Type:<br><code>sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</code><br>or if you’re running a beta version,<br><code>sudo xcode-select -s /Applications/Xcode-beta.app/Contents/Developer</code><br><br><br><br><!--  其他：[Safari 浏览器插件（扩展）开发](https://blog.csdn.net/mjzhang1993/article/details/106897673)2020-06-22 11:14:33 swift 语言通过XCode 开发，打包--><br><br><br><br># 浏览器插件问题<br>## chrome<br>1. chrome 中可以设置和修改插件的  快捷键<br>chrome://extensions/shortcuts<br><br><br>## safari<br>### 安装<br>#### 官方<br><!-- [如何在 Mac 上安装 Safari 浏览器扩展](https://support.apple.com/zh-cn/HT203051) --><br>您需要 Safari 浏览器 12 或更高版本才能从 App Store 获取 Safari 浏览器扩展。<br><br>如上图所示，App Store 将打开并显示“Safari 浏览器扩展”页面。要下载并安装扩展，请点按“获取”或点按价格。系统可能会要求您使用 Apple ID 登录。<br><br><br><!-- 浏览器地址栏输入：<extensitions.apple.com>会唤起app store  --><br><br>#### 自己安装<br><!-- \#1 [Mac的Safari安装油猴插件（Tampermonkey）](https://www.jianshu.com/p/7e3526f830a2) --><br>Safari浏览器 -》偏好设置 -》 菜单栏显示开发选项<br>菜单栏 -》 开发选项 -》 显示拓展构建器 -》 添加拓展<br><br><!-- 在提示框中输入开机密码，即可完成安装。 --><br><!-- 插件管理页会有黄色warning： `没有safari 浏览器扩展证书`。但是不影响使用 --><br><br><br><!-- 于是就会遇到这种情况: --><br>&gt; safari浏览器不再支持不安全的拓展，你可以在app store或Safari浏览器拓展库中查找经过apple审核的更新拓展。<br>将下载好的 tampermonkey.safariextz 改为 tampermonkey.zip。<br><!-- $_PS: 不要转为zip 文件 --><br>解压这个zip文件，我喜欢用 The Unarchiver解压，官方的默认解压工具容易陷入.cpgz与.zip的死循环之中。<br><!-- $_PS: 同时chrome 的插件也是这样，限于死循环 --><br><br>下载的源压缩文件：tampermonkey.safariextz<br>解压后文件：tampermonkey.safariextension<br><br><br>##### 其他评论：<br>求助：safari重启后tampermonkey和下载的插件就都不见了有解决方法吗？<br>你好 我在chrome浏览器安装成功 但电脑关机后油猴扩展就消失需要重新安装 请问有解决方案吗<br><br>safari13貌似没有扩展架构器了，你看看<br>这本来是给开发者开发完插件调试使用的，最新的Safari 13 是官方移除了这个选项，暂时无解。<br><br><!-- End: #1 --><br><br>### 使用<br><!-- \#2 [如何在苹果电脑Mac浏览器Safari中安装使用浏览器插件](https://blog.csdn.net/TheBeauty2016/article/details/83268553) 转自： [如何在苹果电脑Mac浏览器Safari中安装使用浏览器插件](https://huajiakeji.com/utilities/2018-10/1571.html)--><br>二、Safari浏览器启用safari插件<br>Safari 可能还会询问您是否想要信任该网站以使用该插件：<br>四、如何允许或阻止网站使用safari插件<br><br><br>以安全模式运行：如果您允许该插件以安全模式运行，Safari 会允许该网站使用该插件，并运行 Mac 内置的恶意软件安全检查。如果以不安全模式运行，Safari 会允许该网站使用该插件，但是不会运行恶意软件安全检查。这存在安全风险，因此除非您信任该网站，并且没有其他方式来查看内容，否则请勿停用安全模式。<br><!-- End: #2 --><br><br><br>### 插件<br><!-- [Greasy Fork](https://greasyfork.org/zh-CN)https://safari.tampermonkey.net/tampermonkey.safariextz（旧版）https://www.tampermonkey.net/?browser=safari(新版) --><br><br><br><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.6 星期二 &lt;/p&gt;&lt;br&gt;&lt;!-- 
Chrome插件有：extension，app， NaCl(Native Client)， PNaCl(Portable Native Client)等。但因为安全性，
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
</feed>
