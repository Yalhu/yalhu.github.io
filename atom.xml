<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-08T08:21:49.590Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis学习</title>
    <link href="http://yoursite.com/sum/ser/redis%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/ser/redis学习/</id>
    <published>2020-10-08T00:00:00.000Z</published>
    <updated>2020-10-08T08:21:49.590Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2020.10.8 星期四 16：20</p><p><a href="https://www.yuque.com/docs/share/cd4f8cf2-0d66-4bf5-ab63-9e07327ba243#wp8i2" target="_blank" rel="noopener">Redis初探</a><br>$_PS: 魏媛</p><ol><li>Redis简介<br>Redis全称为REmote DIctionary Server(Redis) ，是一个免费开源的，内存中的数据结构存储系统。更具体些，是一个高性能的key-value存储系统。<br>Redis 与其他 key - value 缓存产品有以下三个特点：<br>• Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。<br>• Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>• Redis支持数据的备份，即master-slave模式的数据备份。</li><li>Redis优势<br>• 性能极高 – Redis读的速度是110000次/s,写的速度是81000次/s 。<br>• 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。<br>• 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。<br>• 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li><li>Redis数据结构<br>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2020.10.8 星期四 16：20&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/docs/share/cd4f8cf2-0d66-4bf5-ab63-9e07327ba243#wp8i2
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>跨端开发</title>
    <link href="http://yoursite.com/sum/jsplus/%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/sum/jsplus/跨端开发/</id>
    <published>2020-09-29T00:00:00.000Z</published>
    <updated>2020-10-11T10:26:47.691Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Mongo操作</title>
    <link href="http://yoursite.com/sum/ser/mongo%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/sum/ser/mongo操作/</id>
    <published>2020-09-27T00:00:00.000Z</published>
    <updated>2020-10-08T07:22:26.274Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.27 星期  ： </p><h2 id="安装和启动-mac"><a href="#安装和启动-mac" class="headerlink" title="安装和启动(mac)"></a>安装和启动(mac)</h2><h3 id="安装-mac"><a href="#安装-mac" class="headerlink" title="安装-mac"></a>安装-mac</h3><p>brew （失败）<br>直接下载文件<br>配置环境变量（vim ~/.bash_profile; source ~/.base_profile）<br>启动：mongod –port 27017</p><p>安装位置：<del>/usr/local/lib</del>  || 或者/usr/local/<br>(homebrew安装python也在这个位置.)<br>不放到local下，为了local里面的文件做区分</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建配置文件（下载文件没有找到配置文件）<br>/usr/local/etc/mongo.conf<br>(redis,nginx (homebrew)安装也在这个位置)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">port=27017</span><br><span class="line">dbpath=/usr/local/var/mongodb-db</span><br><span class="line">logpath=/usr/local/var/log/mongodb/mongo.log</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">Auth=true</span><br><span class="line"></span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line"># journal=true</span><br><span class="line"> </span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=false</span><br></pre></td></tr></table></figure></p><p>记得修改文件夹权限<br><code>sudo chmod -R 777 /usr/local/var/mongodb-db/</code><br>sudo chmod -R go+w /data/db    // 取得读写权限</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>作用：在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。<br>不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个”–fork”参数即可，<br>值得注意的是，用到了”–fork”参数就必须启用”–logpath”参数。如下所示</p><h3 id="brew安装区别"><a href="#brew安装区别" class="headerlink" title="brew安装区别"></a>brew安装区别</h3><p>brew安装后文件位置在<br>/usr/local/Cellar/pgk/1.12.3/*</p><h3 id="启动-mac"><a href="#启动-mac" class="headerlink" title="启动-mac"></a>启动-mac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/<span class="built_in">local</span>/etc/mongo.conf <span class="comment">## mac</span></span><br><span class="line"><span class="comment"># mongod --config D:/program/mongodb/mongo.conf ## windows</span></span><br><span class="line"><span class="comment">## mongod其他参数：--auth, --dbpath, --logpath, --fork，</span></span><br><span class="line">  <span class="comment">## ---master, --slave,-source</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod --master --slave -dbpath=/data/db/master -port=11536 --<span class="built_in">source</span> 127.0.0.1:11537</span><br><span class="line"><span class="comment">## 进入mongo</span></span><br><span class="line">mongo --port <span class="comment"># -u,-p,</span></span><br></pre></td></tr></table></figure><h2 id="安装和启动-windows"><a href="#安装和启动-windows" class="headerlink" title="安装和启动(windows)"></a>安装和启动(windows)</h2><p>可以放到d盘（从c盘）等任意位置。<br>创建配置文件.mongod.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dbpath= D:\data\mongodb #数据库路径 </span><br><span class="line">port= 27017 #端口号 默认为27017  </span><br><span class="line"> </span><br><span class="line">journal= true #启用日志文件，默认启用  </span><br><span class="line">logpath= D:\var\log\mongod.log #日志输出文件路径  </span><br><span class="line">logappend= true #错误日志采用追加模式  </span><br><span class="line">quiet= true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  </span><br><span class="line"> </span><br><span class="line"># destination= file</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>直接通过命令行启动<br>或者通过services 启动(services.mac).(需要设置好配置文件和安装 MongoDB服务)</p><p><strong>需要注意</strong>：</p><ol><li>命令行必须要 用管理员方式启动<br>可以设置mongod.exe 默认为管理员方式打开(通过文件属性 )</li><li>配置文件需要是绝对/全路径。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装 MongoDB服务</span></span><br><span class="line"><span class="comment"># 通过执行mongod.exe，使用--install选项来安装服务，使用--config选项来指定之前创建的配置文件。</span></span><br><span class="line">C:\mongodb\bin\mongod.exe --config <span class="string">"C:\mongodb\mongod.cfg"</span> --install <span class="comment"># --serviceName MongoDB</span></span><br><span class="line"><span class="comment"># ./mongod.exe --config '/d/Server/mongodb-3.4.24/mongod.conf' --install</span></span><br><span class="line"><span class="comment">### 卸载</span></span><br><span class="line">C:\mongodb\bin\mongod.exe --remove --servicesName <span class="string">"MongoDB"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 通过服务启动/关闭</span></span><br><span class="line">net start MongoDB    启动服务</span><br><span class="line">net stop MongoDB    关闭服务</span><br><span class="line">sc delete MongoDB    卸载服务</span><br><span class="line"></span><br><span class="line"><span class="comment">## 命令行下运行 MongoDB 服务器</span></span><br><span class="line">C:\mongodb\bin\mongod.exe --dbpath c:\data\db</span><br><span class="line"><span class="comment"># ./mongod.exe -f '/d/Server/mongodb-3.4.24/mongod.conf'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="添加auth权限"><a href="#添加auth权限" class="headerlink" title="添加auth权限"></a>添加auth权限</h2><p><a href="https://www.cnblogs.com/imgss/p/10274813.html" target="_blank" rel="noopener">MongoDB加auth权限</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 初始化mongo用户</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod -f  /etc/mongod.conf</span><br><span class="line">mongo 127.0.0.1:27017</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user:<span class="string">'admin'</span>,<span class="built_in">pwd</span>:<span class="string">'admin'</span>,roles:[&#123;role:<span class="string">"dbAdminAnyDatabase"</span>,db:<span class="string">"admin"</span>&#125;,&#123;role:<span class="string">"readWriteAnyDatabase"</span>,db:<span class="string">"admin"</span>&#125;,&#123;role:<span class="string">"userAdmin"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"userAdmin"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"ares"</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># db.createUser(&#123; user: "root",  pwd: "123456", roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ] &#125;) </span></span><br><span class="line"></span><br><span class="line">db.system.version.update(&#123;<span class="string">'_id'</span>:<span class="string">'authSchema'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;<span class="string">'currentVersion'</span>:3&#125;&#125;)</span><br><span class="line">db.system.version.find()</span><br><span class="line"></span><br><span class="line"><span class="comment">## auth方式重启mongo并创建xes_fe用户</span></span><br><span class="line">lsof -i:27017 <span class="comment">#// 查询mongod的PID</span></span><br><span class="line"><span class="built_in">kill</span> 9 PID  <span class="comment">#// 终止mongod</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod -f  /etc/mongod.conf --auth  <span class="comment">#// 重启</span></span><br><span class="line"></span><br><span class="line">mongo 127.0.0.1:27017</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">'admin'</span>, <span class="string">'admin'</span>)</span><br><span class="line"></span><br><span class="line">use ares</span><br><span class="line">db.createUser(&#123;user:<span class="string">'root'</span>,<span class="built_in">pwd</span>:<span class="string">'root'</span>,roles:[&#123;role:<span class="string">'readWrite'</span>,db:<span class="string">'ares'</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>后续服务端可以通过root 连接mongo数据库 进行操作</p><!-- db.auth('xes', 'big_root') --><p>lsof -i:27027<br>ps -ef | grep mongo</p><h2 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h2><p><a href="https://www.cnblogs.com/ruizhang3/p/6539730.html" target="_blank" rel="noopener">MongoDB的几种同步方式</a></p><h3 id="1、冷拷贝"><a href="#1、冷拷贝" class="headerlink" title="1、冷拷贝"></a>1、冷拷贝</h3><p>这种方式对数据同步的完整性保持的最好，同时也非常方便，但是会影响服务器的使用。<br>首先关闭源数据库服务，之后使用远程复制命令将数据文件全量拷贝到目标服务器的数据目录下，再启动目标服务器。<br>如果不关闭源数据库，将会导致部分数据没有写到数据文件中，有很大概率目标服务器无法启动。</p><h3 id="2、使用mongodump"><a href="#2、使用mongodump" class="headerlink" title="2、使用mongodump"></a>2、使用mongodump</h3><p>mongodump是mongodb官方提供的导出工具，使用起来非常简单，一个例子如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump <span class="comment">--host example.net --port 37017 -o /opt/backup/mongodump -d dbname -c collectionname</span></span><br></pre></td></tr></table></figure></p><p>通过host port参数指定主机，通过o参数指定输出目录，通过d参数指定数据库，通过c参数指定集合<br>mongodump会自动建立备份目录，并按照数据库，集合划分目录与文件。</p><p>对应的，官方还提供了mongorestore程序来恢复备份，命令类似于mongodump。使用相同的参数指定主机，数据库，集合等信息，最后一个参数默认为用来恢复的数据文件目录即可。</p><p>还有几个需要注意的问题：<br>mognodb不会导出索引数据，所以在恢复后需要重新建立索引。<br>备份过程中所做的修改可能无法写入到备份文件中，如果需要同步这一些数据，可以使用–oplog参数记录过程中的修改日志，同时需要服务器为副本集或主从模式，否则数据库不会产生oplog。</p><h3 id="3、增量备份"><a href="#3、增量备份" class="headerlink" title="3、增量备份"></a>3、增量备份</h3><p>当数据库为副本集的主节点或主从模式的主节点时，将会生成操作日志，mongodb会使用操作日志对各节点中的数据进行增量同步。<br>利用这一点，我们也可以对集群之外的节点做同样的增量同步。</p><p>oplog数据存储在数据库的local数据库下。<br>主要字段如下:</p><p>有了这些信息，我们就可以用代码模拟mongodb的同步模式，对操作日志实现重播，从而实现数据的增量同步。<br>基本代码逻辑如下：</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>带认证 <code>--authenticationDatabase admin</code><br><a href="https://blog.csdn.net/qq_37142346/article/details/82822726" target="_blank" rel="noopener">MongoDB数据备份与恢复以及安全认证</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongorestore <span class="comment">--db ares --host=127.0.0.1 --port=27027 --dir /Users/tal/working/202009231107/ares  --drop</span></span><br><span class="line">mongorestore <span class="comment">--db ares --host=127.0.0.1 --port=27027 --dir /Users/tal/working/202009231107/ares  --drop -u admin -p=admin --authenticationDatabase admin</span></span><br></pre></td></tr></table></figure></p><h3 id="bosn"><a href="#bosn" class="headerlink" title="bosn"></a>bosn</h3><!-- \# [Mongodb开启认证时的备份和恢复（mongodump 和mongorestore ）](https://blog.csdn.net/weixin_45444133/article/details/105099806) --><h4 id="bson-和json"><a href="#bson-和json" class="headerlink" title="bson 和json"></a>bson 和json</h4><p>mongodump导出的是bson格式，是二进制形式，不过可以使用mongo自带的bsondump命令查看里面的数据，<br>而mongoexport导出的则是文本，可以是csv、json格式。</p><p>JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。<br>JSON虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。</p><p>在一些mongodb版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能不会成功，具体要看版本之间的兼容性。<br>当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即mongoexport/mongoimport是一个可选项。跨版本的mongodump/mongorestore个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><!-- [mongodb 常用命令](https://www.jianshu.com/p/49722075f330)$_PS: RiverSouthMan --><h1 id="工具-可视化"><a href="#工具-可视化" class="headerlink" title="工具(可视化)"></a>工具(可视化)</h1><h2 id="Studio-3T-for-MongoDB"><a href="#Studio-3T-for-MongoDB" class="headerlink" title="Studio 3T for MongoDB"></a>Studio 3T for MongoDB</h2><!-- \# [mongodb可视化工具 mac版 Studio 3T破解 (永久版)](https://www.jianshu.com/p/038fe91affa2) --><p><code>sudo spctl --master-disable</code></p><h2 id="MongoDB-Compass"><a href="#MongoDB-Compass" class="headerlink" title="MongoDB Compass"></a>MongoDB Compass</h2><p>连接mongod<br><code>mongodb://root:123456@127.0.0.1:27017/admin</code> </p><h2 id="mongodVU"><a href="#mongodVU" class="headerlink" title="mongodVU"></a>mongodVU</h2><p style="text-align:right"> </p><!-- [设置文件直接以管理员权限运行](http://blog.sina.com.cn/s/blog_69e8e64e0102yoaj.html)1. 属性-》兼容性-》以管理员身份运行此程序2. 直接从注册表中着手，为文件设置管理员身份权限。    在注册表中找到HKEY_CURRENT_USER\Software\Microsoft\WindowsNT\CurrentVersion\AppCom让cmd一直默认以管理员身份打开一、手动修改注册表Win+R – regedit找到以下位置HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers，新建一个字符串值，命名为”c:\windows\system32\cmd.exe”然后右键–修改 – 数值数据写入“RUNASADMIN”，确定 ！ -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.27 星期  ： &lt;/p&gt;

&lt;h2 id=&quot;安装和启动-mac&quot;&gt;&lt;a href=&quot;#安装和启动-mac&quot; class=&quot;headerlink&quot; title=&quot;安装和启动(mac)&quot;&gt;&lt;/a&gt;安装和启动(m
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Uniapp使用</title>
    <link href="http://yoursite.com/sum/jsplus/uniapp%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/uniapp使用/</id>
    <published>2020-09-24T00:00:00.000Z</published>
    <updated>2020-10-05T09:58:29.113Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX19v8y5vOiYx/Dv3wLMzL6fiRazdXSlfHqo8TIbdCGPGsud9f/A7YbmFIyWEZU7c1hvk/NOZHHodUilCqVXNbkLv28fU0fDc3ds4y8t0A0nGzf8SHyxmiJ0yw1mrsFKD69znHsAlOWkCRuXNui1uFQ8UEj4EoVZjggaibQ94hY9dt/77Wi8mLY8IE9km8CfiWbhevFn6CLSHT30/koe8rXmszhsg8ZNrZe0RIsAzq5FVMbTxPMNp3C4LDPwDwS6FkAIYW5rwHlgQWAyIArEQOqO5oMRPHIHhQajrNGOBlbdWE77bEjY5Gf4qILu4cE7fOJqv+Dsczqp+JN0neuybt6cYNEsUJvWnl6VLUJVqHIj86rOIOmhhT0SALBrNWdD3RRv/Q1wZKkM/nn0bLjs2VZlrgOfX1WNUDvNDQiPTj0l7nzMjVY9Kl76zsJ//Usmzk6YeQT6RZiIpvaCNFTAe5YxmC4hjIc9/DcXUNVvTjdvJeFNUHUsH2JyUk9WPuiaBDHOaRl4pAVg+I0dix/WIdbd+KaqkL0mDM2ZxnTa0DKo3yV9ynDtRVSTCNhkOF1SW6S2D/zWtL4sDSoApFQM268HjMRH3gpcFaHjxtO0Ur24X8ymfQpcWzaGyj91vskjS9Nf6oId1/eeJhNvyvIbTnVnYuiI5kMiK4iYu9vEuxF7Yfrsk+iqgLfZNQdeR4XRdeaAsf33i0I5RqWZfWC8UByUTC8J4hD2GKqYUUvjBOla/sK2+ndidIhwy9R3CU1bTbPz1aJci30fh5J9B4pbLqs0nSFv6Wlvfd9eZY0vqwX6cdAVlZ2vUYVlcGkrFdM2pZXTtKJtikleRcBhyMv4/5ofA22sFF90ahBDmQ/BzAMo4QUfR0pSR/WkiWhwIOrPa8U438ZjO3vDMPF0uMkL1X+XhPFHZhdxMSF8BL/UP2DaPVjwnmBY72hbITPGfHbgagdSZXZTJ7F0wRcC2vRIvExkpTyNYrUPYjvrvAI0P2NyIrrhhinxP4LTTo0+HLT7b7aEPCKRxiAYMnQaF0kphkEY853011gFPNNRPjxCmwkRPufROfj+C21+ga7FKa9TzvAfNV/xlBYkaCOCT1Iw/9J+YpzX4zn/m7//sc1uEP65EQKq5kq+udhYYuWFi+ic2mCpRv+CISD3C0tZKuoYFbdKD1RbUfR1cEQpTy9Kp81fxVi+hNDFvv4A1PYM1n8kJaMbCc0FawIy8aY1BERKVq/SLGnP8JscBWGrf7ksv0zfXBDs/a0V1yGakkzJEj3b/tkTdEsgIpMwmiWNaITuGlBcbFrooveQirFnl42IJTw43fcQZkh347QMxh3kg9nJOkU5TWKVqNjfiIc32oec+Va844464LI78CajF+i2ihC+ArUAaeewwDiqoFOX/pSTIys38HYFJVcy0f2eM30obCPOOrhY1W5qNFiqqLOtturM/6GHpgW2R15Cysm1QuAKnIGX5Wc+NVRIzr3dhyH31wAVEr1OfdkJMLVanMiMG/CF8Oe6O6Z0GMGsocuQuPkIajD0a/RJfHal9NP1XqoLkiu++HXobzOS5EgTQmbDubnUVn3ZJTuh5uoCCVJ36F4wq/YLnCReFadlh0ZxCfak0XkeJpNkoUEheH/YjcXqMBJHtHPvITBlvMjJYr9hdydSdnCWizBucsdxahiZL5UfjABda6McvRvZ0bbKtnYejkHkyvxRk364ewbdSNvbmx+9uIGcDRwh14ompL5S9PMbJzSCQ3fcJIIDPYwS7wWxl3lJjYtKtyyFTXZnwGlbY6IZcnoVrKfvVtQaQ3766euBU5HMnuffaXgcZPBDWv3kELLsli5GuPLpzCZyXCV3gJqeaXyVu9cAlLDsQZ8YwkDUVzKjEmeQgGpqMUAXEFylK+5ECC3UrYVhsHlYkThrUSn4xa+eqVRbQ/TGhLcVQA9p1hNl+Ak1sDR6hREub30F7xp5XosD+0KlvMEqlr9pK+EAYxEc8TXU79KNL+cN+m/NzQ1rw7X8+V3SoXrvlExoI9zba9Itq1BEz+EdIlRXOFECUAWtGXZctuJZCv4bCMghdf1BDtEefrMFv9Xk216DtMbUjAK9vAIqyjd1lzi+aXz1JPllA1l+Vhn7W8nE/9z8TmHwg79mYNhPxiaxnwwI9gAHKy4lcGv8us/Sa9UxyS+IK7CARCp+XxnqRZrxaA+yFJkr2zbRrYeBW2R8QGZ3bhqiMZzph4crI3iWA3NZO67f7/dF7JTAf6oj+uGCKRSe1QU4mfqqnftTuqtGpxZLb404ZBFtL8dbL5uCEsBiD/GuFi0O6/b8/CP9a4klnZNL8OjrKtFrtQdSjkFn45mzQ+NVPpnzUcx9ze+CHnGdOhqaDChNQ89GT+zFc7PCukm7fmOggfimYIdI1uNehfBvuew/axV0lRQM4k8yTKIUrfizkUhGnp/OZW+jln3RU0m0CseU5bAlfBIUXpqxYyTQnkyDy2YSzII5bxfMhP/P0bVAW3LnnieAqCXnABnaavvtJaHrOzPeYgHFDrqEy6abv1NUQ+mTvqprVB0yHj8IBJBM2AAwCwInmVbtMLg==</div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>脚手架搭建</title>
    <link href="http://yoursite.com/sum/jsplus/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/sum/jsplus/脚手架搭建/</id>
    <published>2020-09-23T00:00:00.000Z</published>
    <updated>2020-10-05T10:01:47.905Z</updated>
    
    <content type="html"><![CDATA[<p><code>npm i chalk commander download-git-repo inquirer ora request -S</code></p><p>commander: <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">https://github.com/tj/commander.js</a><br>Inquirer: <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">https://github.com/SBoudrias/Inquirer.js</a><br>chalk: <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a><br>Simple Git: <a href="https://github.com/steveukx/git-js#readme" target="_blank" rel="noopener">https://github.com/steveukx/git-js#readme</a></p><p style="text-align:right"> 2020.9.23 星期三  12：51 </p><h1 id="cli-搭建"><a href="#cli-搭建" class="headerlink" title="cli 搭建"></a>cli 搭建</h1><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>我们实现了一个脚手架的基本功能，大致分为三个流程（拉取模板-&gt;创建项目-&gt;收尾清理</p><p>1) commander 创建可执行的node命令<br>2) command:init： 复制模版</p><ol><li>可提交到git，从服务端下载</li><li>本地缓存（和cli一起），不用从服务端下载最新</li><li>模版可以写死然后重写；<br>或者使用模版文件ejs等<br>；可添加其他命令，init,built,publish,test 等。<br>3) 创建bin命令；包括package.json中配置。<br>4) 测试；npm link<br>5) 发布到npm</li></ol><h3 id="使用模版文件"><a href="#使用模版文件" class="headerlink" title="使用模版文件"></a>使用模版文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&lt;%= type.toLowerCase() %&gt;"</span>,</span><br><span class="line">  <span class="attr">"name_cn"</span>: <span class="string">"&lt;%= name %&gt;"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"&lt;%= desc %&gt;"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"&lt;%= type %&gt;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"category"</span>: <span class="string">"&lt;%= category %&gt;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&lt;%= desc %&gt;"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"department"</span>:  <span class="string">"&lt;%= department %&gt;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 使用模版文件ejs 创建模版</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">renderDir</span>(<span class="params">dir, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> files = readdir(dir, <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\.(less|css|view|js|json|md)$/gi</span>.test(filename);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(files.map(<span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> filepath = dir + <span class="string">'/'</span> + file;</span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> fs.readFile(filepath, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">await</span> fs.outputFile(filepath, ejs.render(content, data));</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> simpleGit <span class="keyword">from</span> <span class="string">'simple-git'</span>;</span><br><span class="line"><span class="keyword">const</span> git = simpleGit();</span><br></pre></td></tr></table></figure><p>有些提交可能需要用到git权限，比如发布到git，读取开发者信息等。<br>可以申请token，然后做相关操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><!-- [开发一个简单的脚手架cli](https://blog.csdn.net/Headmaster_Tan/article/details/88531978)[开发一个简单的脚手架cli ](https://www.pianshen.com/article/1913275915/) $_PS: 内容相同，简单了解。--><!-- \# [如何自己搭一个脚手架](https://segmentfault.com/a/1190000016996897?utm_source=tag-newest) $_PS: 实践了init；没有尝试list。下载用了downlong-git-repo--><!-- \# [总结一个项目模板，开发一个简单的脚手架](https://www.imooc.com/article/300430) $_PS: 比较完整。react参考/学习。以下内容为摘抄--><p><code>npm i chalk commander download-git-repo inquirer ora request -S</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commander = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> progress = <span class="built_in">require</span>(<span class="string">'request-progress'</span>);</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// 实际</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs-extra'</span>;</span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'underscore.string'</span>;</span><br><span class="line"><span class="keyword">import</span> ejs <span class="keyword">from</span> <span class="string">'ejs'</span>;</span><br><span class="line"><span class="keyword">import</span> readdir <span class="keyword">from</span> <span class="string">'fs-readdir-recursive'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>链接：<a href="https://www.imooc.com/article/300430" target="_blank" rel="noopener">https://www.imooc.com/article/300430</a></p><p>|– bin<br>    |– co<br>    |– co2<br>|– command<br>    |– download.js<br>    |– generator.js<br>|– utils<br>    |– api.js<br>|– template<br>    |– src<br>      |– views/<br>    |– utils/<br>    |– /<br>    |– mainl.js<br>    |– package.json<br>|– index.js<br>|– package.json</p><h3 id="创建bin命令"><a href="#创建bin命令" class="headerlink" title="创建bin命令"></a>创建bin命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line">process.env.NODE_PATH = __dirname + <span class="string">'/../node_modules'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../index'</span>)</span><br></pre></td></tr></table></figure><p>在脚手架的package.json中配置bin</p><p>“bin”: {<br>        “easy-cli-react”: “index.js”<br>}</p><h3 id="模板下载"><a href="#模板下载" class="headerlink" title="模板下载"></a>模板下载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> downloadZipName = <span class="string">'template.zip'</span>;</span><br><span class="line">progress(request(templateUrl))</span><br><span class="line">    .on(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.cyan(<span class="string">`[easy-cli-react]downloading project template (<span class="subst">$&#123;<span class="built_in">Math</span>.floor((state.percent * <span class="number">100</span>) || <span class="number">0</span>)​&#125;</span>%)`</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">`[error]<span class="subst">$&#123;err&#125;</span>`</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'[easy-cli-react]downloading project template (100%)'</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解压并且重命名文件夹</span></span><br><span class="line">        <span class="keyword">const</span> cmdStr = [</span><br><span class="line">            <span class="string">`unzip -o <span class="subst">$&#123;downloadZipName&#125;</span> -d ./`</span>,</span><br><span class="line">            <span class="string">`rm <span class="subst">$&#123;downloadZipName&#125;</span>`</span>,</span><br><span class="line">            <span class="string">`mv easy-template-react-master <span class="subst">$&#123;projectName&#125;</span>`</span></span><br><span class="line">        ].join(<span class="string">' &amp;&amp; '</span>);</span><br><span class="line">  exec(cmdStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(fs.createWriteStream(downloadZipName));</span><br><span class="line"><span class="comment">// 修改package.json内的项目名</span></span><br><span class="line"><span class="keyword">const</span> packageJson = fs.readJsonSync(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>);</span><br><span class="line">packageJson.name = projectName;</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, </span><br><span class="line">    <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(chalk.cyan(<span class="string">'[easy-cli-react]done!!'</span>));</span><br></pre></td></tr></table></figure><h3 id="模板样例"><a href="#模板样例" class="headerlink" title="模板样例"></a>模板样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">|____.babelrc                           # babel配置</span><br><span class="line">|____LICENSE                            # 项目协议</span><br><span class="line">|____dist                               # 打包产出目录</span><br><span class="line">|____README.md </span><br><span class="line">|____.gitignore</span><br><span class="line">|____package-lock.json</span><br><span class="line">|____package.json</span><br><span class="line">|____build </span><br><span class="line">| |____plugins                          # 自定义的webpack插件</span><br><span class="line">| | |____MyPlugin.js                    </span><br><span class="line">| |____server                           # 脚本</span><br><span class="line">| | |____buildServer.js                     # 打包脚本</span><br><span class="line">| | |____devServer.js                       # 本地开发server</span><br><span class="line">| |____webpackConfig                    # webpack配置</span><br><span class="line">| | |____webpack.dev.config.js              # 开发时配置</span><br><span class="line">| | |____webpack.base.config.js             # 基本配置</span><br><span class="line">| | |____webpack.build.config.js            # 打包时配置</span><br><span class="line">| | |____devProxyConfig.js                  # 本地开发代理配置</span><br><span class="line">|____postcss.config.js                  # postcss 配置</span><br><span class="line">|____src # 项目代码</span><br><span class="line">| |____template                         # html模板</span><br><span class="line">| | |____template.html</span><br><span class="line">| |____lib                              # 公用库代码</span><br><span class="line">| | |____tools.js</span><br><span class="line">| |____index.js                         # 入口文件js</span><br><span class="line">| |____index.scss                       # 入口文件css</span><br></pre></td></tr></table></figure><h1 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h1><p>文档：<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md" target="_blank" rel="noopener">https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md</a><br>github: <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">https://github.com/tj/commander.js</a></p><h2 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h2><ol><li><code>program.parse(process.argv)</code>后才可以访问program.args<br>parse一般放在最后</li><li>program监听不到事件，只好在command的action中 注入函数<br>如果每一个命令前都需要，那就。。<ol><li>可以监听不存在的command <code>on(command:*)</code></li><li>可以监听到选项option  <code>on(option:small)</code></li><li>还可以<code>on(&#39;--help&#39;)</code><br>$_PS: Commander 继承自EventEmitter<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3>无法监听到command <del>/#1090</del> /#1197</li></ol></li></ol><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const program = require('commander')</span></span><br><span class="line"><span class="comment">// const &#123; program &#125; = require('commander')</span></span><br><span class="line"><span class="keyword">const</span> &#123; Command &#125; = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> Command();</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* # options */</span></span><br><span class="line">program</span><br><span class="line">  .option(<span class="string">'-d, --debug'</span>, <span class="string">'output extra debugging'</span>)</span><br><span class="line">  .option(<span class="string">'-s, --small'</span>, <span class="string">'small pizza size'</span>)</span><br><span class="line">  .option(<span class="string">'-p, --pizza-type &lt;type&gt;'</span>, <span class="string">'flavour of pizza'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('program', program)</span></span><br><span class="line"><span class="comment">// 未执行parse前没有args属性</span></span><br><span class="line"><span class="comment">// console.log('program.args', program.args) // undefined</span></span><br><span class="line"><span class="comment">// program.parse(process.argv);</span></span><br><span class="line"><span class="comment">// console.log('program: after parase ', program)</span></span><br><span class="line"><span class="comment">// console.log('program.args', program.args) // [init]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(program.opts()); // &#123; debug: true, small: undefined, pizzaType: undefined &#125;</span></span><br><span class="line"><span class="keyword">if</span> (program.debug) <span class="built_in">console</span>.log(program.opts());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'pizza details:'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.small) <span class="built_in">console</span>.log(<span class="string">'- small pizza size'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.pizzaType) <span class="built_in">console</span>.log(<span class="string">`- <span class="subst">$&#123;program.pizzaType&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* # version */</span></span><br><span class="line">program.version(pkg.version)</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options]'</span>)</span><br><span class="line"></span><br><span class="line">program.action(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'haha , here is action'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* # command */</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init'</span>)</span><br><span class="line">  .description(<span class="string">'生成一个新项目'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'command:init'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'init action'</span>)</span><br><span class="line">    <span class="comment">// require('./command/init')()</span></span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* event listener */</span></span><br><span class="line"><span class="comment">// ## --help</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'on help*.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ## command</span></span><br><span class="line"><span class="comment">// ### error on unknown commands</span></span><br><span class="line">program.on(<span class="string">'command:*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">operands</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`hahhn error: unknown command '<span class="subst">$&#123;operands[<span class="number">0</span>]&#125;</span>'`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'operands'</span>,operands, <span class="keyword">this</span>.name())</span><br><span class="line">  <span class="comment">// const availableCommands = program.commands.map(cmd =&gt; cmd.name());</span></span><br><span class="line">  <span class="comment">// mySuggestBestMatch(operands[0], availableCommands);</span></span><br><span class="line">  <span class="comment">// process.exitCode = 1;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* parse */</span></span><br><span class="line"><span class="comment">// 执行parse后才可以通过属性访问</span></span><br><span class="line">program</span><br><span class="line">  .parse(process.argv)</span><br><span class="line"><span class="keyword">if</span>(!program.args.length) &#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="inrequirer"><a href="#inrequirer" class="headerlink" title="inrequirer"></a>inrequirer</h1><p>github: <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">https://github.com/SBoudrias/Inquirer.js</a></p><h2 id="实际-1"><a href="#实际-1" class="headerlink" title="实际"></a>实际</h2><p>返回的Promise，可以通过async/await 同步方式使用。不在回调中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">message = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">await</span> inquirer.prompt([&#123;</span><br><span class="line">      name: <span class="string">'input'</span>,</span><br><span class="line">      message: message,</span><br><span class="line">      validate: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Boolean</span>(name.trim());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;])</span><br><span class="line">  ).input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><!-- \# [inquirer.js —— 一个用户与命令行交互的工具](https://blog.csdn.net/qq_26733915/article/details/80461257) --><p>使用脚手架的时候最明显的就是与命令行的交互，如果想自己做一个脚手架或者在某些时候要与用户进行交互，这个时候就不得不提到inquirer.js了。</p><p>type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">    <span class="comment">// 具体交互内容</span></span><br><span class="line">];</span><br><span class="line">inquirer.prompt(promptList).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers); <span class="comment">// 返回的结果</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ## input</span></span><br><span class="line"><span class="keyword">const</span> promptList = [&#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'设置一个用户名:'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">"test_user"</span> <span class="comment">// 默认值</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'请输入手机号:'</span>,</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val.match(<span class="regexp">/\d&#123;11&#125;/g</span>)) &#123; <span class="comment">// 校验位数</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请输入11位数字"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// ## confirm</span></span><br><span class="line"><span class="keyword">const</span> promptList = [&#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">    message: <span class="string">"是否使用监听？"</span>,</span><br><span class="line">    name: <span class="string">"watch"</span>,</span><br><span class="line">    prefix: <span class="string">"前缀"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">    message: <span class="string">"是否进行文件过滤？"</span>,</span><br><span class="line">    name: <span class="string">"filter"</span>,</span><br><span class="line">    suffix: <span class="string">"后缀"</span>,</span><br><span class="line">    when: <span class="function"><span class="keyword">function</span>(<span class="params">answers</span>) </span>&#123; <span class="comment">// 当watch为true的时候才会提问当前问题</span></span><br><span class="line">        <span class="keyword">return</span> answers.watch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><h2 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h2><p># <a href="http://lzw.me/a/nodejs-stdin.html" target="_blank" rel="noopener">nodeJS 中从命令行等待并读入用户输入实现与用户交互的方法</a></p><ol><li>fs.readSync + process.stdin 同步读取用户输入</li><li>readline.question 获取用户输入</li><li>基于 nodejs 模块 readline-sync</li></ol><p>readline-sync: <a href="https://www.npmjs.com/package/readline-sync" target="_blank" rel="noopener">https://www.npmjs.com/package/readline-sync</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ## 1 fs.readSync + process.stdin</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSyncByfs</span>(<span class="params">tips</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    tips = tips || <span class="string">'&gt; '</span>;</span><br><span class="line">    process.stdout.write(tips);</span><br><span class="line">    process.stdin.pause();</span><br><span class="line">    response = fs.readSync(process.stdin.fd, <span class="number">1000</span>, <span class="number">0</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    process.stdin.end();</span><br><span class="line">    <span class="keyword">return</span> response[<span class="number">0</span>].trim();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(readSyncByfs(<span class="string">'请输入任意字符：'</span>));</span><br><span class="line"><span class="comment">// ## 2 readline.question</span></span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSyncByRl</span>(<span class="params">tips</span>) </span>&#123;</span><br><span class="line">    tips = tips || <span class="string">'&gt; '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">            input: process.stdin,</span><br><span class="line">            output: process.stdout</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        rl.question(tips, (answer) =&gt; &#123;</span><br><span class="line">            rl.close();</span><br><span class="line">            resolve(answer.trim());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readSyncByRl(<span class="string">'请输入任意字符：'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ##3 readline-sync</span></span><br><span class="line"><span class="keyword">var</span> readlineSync = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Wait for user's response.</span></span><br><span class="line"><span class="keyword">var</span> userName = readlineSync.question(<span class="string">'May I have your name? '</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi '</span> + userName + <span class="string">'!'</span>);</span><br></pre></td></tr></table></figure></p><h1 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h1><p>chalk: <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a></p><p>Terminal string styling done right<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(chalk.blue(<span class="string">'Hello world!'</span>));</span><br><span class="line">log(chalk.blue(<span class="string">'Hello'</span>) + <span class="string">' World'</span> + chalk.red(<span class="string">'!'</span>));</span><br><span class="line">log(chalk.blue.bgRed.bold(<span class="string">'Hello world!'</span>));</span><br></pre></td></tr></table></figure></p><h1 id="ora"><a href="#ora" class="headerlink" title="ora"></a>ora</h1><p>ora: <a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">https://github.com/sindresorhus/ora</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'Loading unicorns'</span>).start();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">spinner.color = <span class="string">'yellow'</span>;</span><br><span class="line">spinner.text = <span class="string">'Loading rainbows'</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">spinner..stop()</span><br><span class="line"><span class="comment">// .succeed(text?) ,.fail(text?) ,...</span></span><br><span class="line"><span class="comment">/* # color of the text */</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">`Loading <span class="subst">$&#123;chalk.red(<span class="string">'unicorns'</span>)&#125;</span>`</span>).start();</span><br></pre></td></tr></table></figure></p><h1 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h1><p>除了上述方法，我们也可以直接通过大名鼎鼎的Yeoman来创建，不过个人觉得没必要，毕竟这玩意也不难。</p><p>yeman: <a href="https://github.com/yeoman/yeoman" target="_blank" rel="noopener">https://github.com/yeoman/yeoman</a><br>yeoman: <a href="https://yeoman.io/" target="_blank" rel="noopener">https://yeoman.io/</a></p><h1 id="Simple-Git"><a href="#Simple-Git" class="headerlink" title="Simple Git"></a>Simple Git</h1><p>Simple Git: <a href="https://github.com/steveukx/git-js#readme" target="_blank" rel="noopener">https://github.com/steveukx/git-js#readme</a><br>A lightweight interface for running git commands in any node.js application.</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">[npm scripts 使用指南]</a><br><a href="https://juejin.im/post/6844903826344902670" target="_blank" rel="noopener">#!/usr/bin/env node 到底是什么？</a></p><p>shabang,shebang: sharp/hash/mesh;shell.  bang；#!<br>npm link</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;npm i chalk commander download-git-repo inquirer ora request -S&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;commander: &lt;a href=&quot;https://github.com/tj/commander.j
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者和发布订阅</title>
    <link href="http://yoursite.com/sum/js/%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>http://yoursite.com/sum/js/观察者和发布订阅/</id>
    <published>2020-09-21T00:00:00.000Z</published>
    <updated>2020-10-06T10:14:46.915Z</updated>
    
    <content type="html"><![CDATA[<p>发布订阅和观察者，确和研究vue源码有点关系。<br>之前当作是一个模式学习，细比较之：</p><p style="text-align:right"> 2020.9.21 星期一  13：32 </p><h2 id="vue相关"><a href="#vue相关" class="headerlink" title="vue相关"></a>vue相关</h2><p>vue 中的 observer watcher dep 可以理解为发布订阅者模式吧？<br>应该是观察者模式。 vue的事件通讯机制才是发布订阅模式<br>vue双向绑定过程涉及发布订阅和观察者，setter是观察者，更新的过程是发布订阅</p><h2 id="区别解释"><a href="#区别解释" class="headerlink" title="区别解释"></a>区别解释</h2><!-- \# [JavaScript 观察者模式与发布订阅模式](https://baijiahao.baidu.com/s?id=1649464351438032712&wfr=spider&for=pc) --><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义了对象间一种一对多的依赖关系，当目标对象 Subject 的状态发生改变时，所有依赖它的对象 Observer 都会得到通知。</p><p>模式特征：<br>\<br>一个目标者对象 Subject，拥有方法：添加 / 删除 / 通知 Observer；<br>多个观察者对象 Observer，拥有方法：接收 Subject 状态变更通知并处理；<br>目标对象 Subject 状态变更时，通知所有 Observer。</p><p>Subject 添加一系列 Observer， Subject 负责维护与这些 Observer 之间的联系，“你对我有兴趣，我更新就会通知你”。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>基于一个<strong>事件（主题）</strong>通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p><p>发布订阅模式与观察者模式的不同，“第三者” （事件中心）出现。目标对象并不直接通知观察者，而是通过事件中心来派发通知。</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。</p><p>从上面代码可以看出，观察者模式由具体目标调度，每个被订阅的目标里面都需要有对观察者的处理，会造成代码的冗余。而发布订阅模式则统一由调度中心处理，消除了发布者和订阅者之间的依赖。</p><p>原文：<a href="https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c" target="_blank" rel="noopener">Observer vs Pub-Sub pattern</a><br><!-- \# [观察者模式 vs 发布订阅模式](https://zhuanlan.zhihu.com/p/51357583) --><br><!-- 我脑海中立刻闪现了《Head First设计模式》里讲的： --></p><blockquote><p>Publishers + Subscribers = Observer Pattern</p></blockquote><p>所谓观察者模式，其实就是为了实现松耦合(loosely coupled)。<br>用《Head First设计模式》里的气象站为例子，每当气象测量数据有更新，changed()方法就会被调用，于是我们可以在changed()方法里面，更新气象仪器上的数据，比如温度、气压等等。</p><p>在发布订阅模式里，发布者，并不会直接通知订阅者，换句话说，发布者和订阅者，彼此互不相识。</p><p>从表面上看：<br>    观察者模式里，只有两个角色 —— 观察者 + 被观察者而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— 经纪人Broker</p><p>往更深层次讲：<br>    观察者和被观察者，是松耦合的关系发布者和订阅者，则完全不存在耦合</p><p>从使用层面上讲：<br>    观察者模式，多用于单个应用内部<br>    发布订阅模式，则更多的是一种跨应用的模式(cross-application pattern)，比如我们常用的消息中间件</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><!-- \# [观察者和发布订阅模式的区别](https://www.cnblogs.com/viaiu/p/9939301.html) --><ol><li>在Observer模式中，Observers知道Subject，同时Subject还保留了Observers的记录。<br>然而，在发布者/订阅者中，发布者和订阅者不需要彼此了解。他们只是在消息队列或代理的帮助下进行通信。</li><li>在Publisher / Subscriber模式中，组件是松散耦合的，而不是Observer模式。</li><li>观察者模式主要以同步方式实现，即当某些事件发生时，Subject调用其所有观察者的适当方法。<br>发布者/订阅者在大多情况下是异步方式（使用消息队列）。</li><li>观察者模式需要在单个应用程序地址空间中实现。<br>另一方面，发布者/订阅者模式更像是跨应用程序模式。</li></ol><p><a href="https://www.yuque.com/docs/share/05b9517d-a502-4e66-b3b5-7c48ef75ca06" target="_blank" rel="noopener">订阅-发布模式</a><br><!-- $_PS: tal-zhangyi --><br>类似点<br>观察者模式与订阅-发布模式都是定义了一个一对多的依赖关系，当有关状态发生变更时则执行相应的更新。<br>区别点<br>发布订阅模式更灵活，是进阶版的观察者模式，指定对应分发。</p><ol><li>观察者模式维护单一事件对应多个依赖该事件的对象关系；</li><li>发布订阅维护多个事件（主题）及依赖各事件（主题）的对象之间的关系；</li><li>观察者模式是目标对象直接触发通知（全部通知），观察对象被迫接收通知。发布订阅模式多了个中间层（事件中心），由其去管理通知广播（只通知订阅对应事件的对象）；</li><li>观察者模式对象间依赖关系较强，发布订阅模式中对象之间实现真正的解耦</li></ol><h2 id="SMTC"><a href="#SMTC" class="headerlink" title="SMTC"></a>SMTC</h2><!-- \# [观察者模式和发布订阅模式的区别](https://blog.flqin.com/357.html) --><p>观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。</p><p>在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。</p><p>发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个 主题 通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ## 观察者模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = [];</span><br><span class="line">  &#125;</span><br><span class="line">  add(ob) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(ob);</span><br><span class="line">  &#125;</span><br><span class="line">  remove(ob) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.splice(<span class="keyword">this</span>.list.indexOf(<span class="keyword">this</span>.list.find(<span class="function">(<span class="params">item</span>) =&gt;</span> ob.id === item.id)), <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  notfiy() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">      i.update(i.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  update(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;id&#125;</span>,我被通知了！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = <span class="keyword">new</span> Observer(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">let</span> people2 = <span class="keyword">new</span> Observer(<span class="number">9527</span>);</span><br><span class="line"><span class="keyword">let</span> people3 = <span class="keyword">new</span> Observer(<span class="number">89757</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">sub.add(people1);</span><br><span class="line">sub.add(people2);</span><br><span class="line">sub.add(people3);</span><br><span class="line"></span><br><span class="line">sub.notfiy();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sub.remove(people2);</span><br><span class="line">  sub.notfiy();</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ## 发布订阅模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pub</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  subscribe(name, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.list[name]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.list[name] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[name].push(cb);</span><br><span class="line">  &#125;</span><br><span class="line">  unSubscribe(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list[name] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  publish(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">Array</span>.from(args).shift();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.list[name] || <span class="keyword">this</span>.list[name].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>主题没有可发布的事件！`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[name].forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item(args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> publisher = <span class="keyword">new</span> Pub();</span><br><span class="line"></span><br><span class="line">publisher.subscribe(<span class="string">'event1'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event1'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event2'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event3'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">publisher.publish(<span class="string">'event1'</span>, <span class="string">'额外参数1'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  publisher.unSubscribe(<span class="string">'event2'</span>);</span><br><span class="line">  publisher.publish(<span class="string">'event2'</span>, <span class="string">'额外参数2'</span>);</span><br><span class="line">  publisher.publish(<span class="string">'event3'</span>, <span class="string">'额外参数3'</span>, <span class="string">'额外参数4'</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p><!-- \# [观察者模式和发布订阅模式的区别](https://www.jianshu.com/p/594f018b68e7) --><!-- 之前一直对观察者模式和发布订阅模式的区别理解不深，正好这段时间在看vue源码的分析，vue数据双向绑定也用到了发布订阅模式，于是又把这两者探究了一番，今天做个笔记加强印象。观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 观察者模式 */</span></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    update(val) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察者列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList = []</span><br><span class="line">    &#125;</span><br><span class="line">    add(observer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    remove(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList = <span class="keyword">this</span>.observerList.filter(<span class="function"><span class="params">ob</span> =&gt;</span> ob !== observer);</span><br><span class="line">    &#125;</span><br><span class="line">    count() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span>(index) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 目标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">    &#125;</span><br><span class="line">    addObserver(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    removeObserver(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    notify(...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> obCount = <span class="keyword">this</span>.observers.count();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; obCount; index++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.observers.get(i).update(...args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布订阅模式： */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PubSub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribers = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    subscribe(type, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>.subscribers, type)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.subscribers[type] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.subscribers[type].push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    unsubscribe(type, fn) &#123;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="keyword">this</span>.subscribers[type];</span><br><span class="line">        <span class="keyword">if</span> (!listeners || !listeners.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.subscribers[type] = listeners.filter(<span class="function"><span class="params">v</span> =&gt;</span> v !== fn);</span><br><span class="line">    &#125;</span><br><span class="line">    publish(type, ...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="keyword">this</span>.subscribers[type];</span><br><span class="line">        <span class="keyword">if</span> (!listeners || !listeners.length) <span class="keyword">return</span>;</span><br><span class="line">        listeners.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(...args));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob = <span class="keyword">new</span> PubSub();</span><br><span class="line">ob.subscribe(<span class="string">'add'</span>, (val) =&gt; <span class="built_in">console</span>.log(val));</span><br><span class="line">ob.publish(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p> –&gt;</p><h2 id="观察者模式是不是发布订阅模式"><a href="#观察者模式是不是发布订阅模式" class="headerlink" title="观察者模式是不是发布订阅模式"></a>观察者模式是不是发布订阅模式</h2><!-- \# [发布订阅模式与观察者模式](https://blog.csdn.net/hf872914334/article/details/88899326) --><p>网上关于这个问题的回答，出现了两极分化，有认为发布订阅模式就是观察者模式的，也有认为观察者模式和发布订阅模式是真不一样的。</p><p>其实我不知道发布订阅模式是不是观察者模式，就像我不知道辨别模式的关键是设计意图还是设计结构（理念），虽然《JavaScript设计模式与开发实践》一书中说了<strong>分辨模式的关键是意图而不是结构</strong>。</p><p>如果以结构来分辨模式，发布订阅模式相比观察者模式多了一个中间件订阅器，所以发布订阅模式是不同于观察者模式的；如果以意图来分辨模式，他们都是<strong>实现了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</strong>，那么他们就是同一种模式，发布订阅模式是在观察者模式的基础上做的优化升级。</p><p>不过，不管他们是不是同一个设计模式，他们的实现方式确实有差别，我们在使用的时候应该根据场景来判断选择哪个。</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发布订阅和观察者，确和研究vue源码有点关系。&lt;br&gt;之前当作是一个模式学习，细比较之：&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2020.9.21 星期一  13：32 &lt;/p&gt;



&lt;h2 id=&quot;vue相关&quot;&gt;&lt;a href=&quot;#vue相关
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git Hooks及规范提交</title>
    <link href="http://yoursite.com/sum/jsplus/git%20hooks%E5%8F%8A%E8%A7%84%E8%8C%83%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/sum/jsplus/git hooks及规范提交/</id>
    <published>2020-09-18T00:00:00.000Z</published>
    <updated>2020-10-08T08:51:21.181Z</updated>
    
    <content type="html"><![CDATA[<p>git hooks文档：<a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener">https://git-scm.com/docs/githooks</a><br>husky: <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">https://github.com/typicode/husky</a><br>lint-staged: <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">https://github.com/okonet/lint-staged</a></p><p style="text-align:right"> 2020.9.18 星期五  ： </p><p>做一些hooks相关的工作。比如：commit前 检查/格式化代码；规范提交信息/提交信息模版；<br>CI/CD</p><h1 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h1><p>在项目根目录的 .git/hooks 下面配置，配置文件的名称是固定的，使用shell语法编写。<br><!-- \# [一文带你彻底学会 Git Hooks 配置](https://segmentfault.com/a/1190000022970270?utm_source=tag-newest) --></p><h2 id="Git-Hooks-介绍"><a href="#Git-Hooks-介绍" class="headerlink" title="Git Hooks 介绍"></a>Git Hooks 介绍</h2><p>.git/hooks文件下，保存了一些 shell 脚本，然后在对应的钩子中执行这些脚本就行了。<br>一个还没有配置 Git Hooks 的仓库，默认会有很多.sample结尾的文件，这些都是示例文件<br>这个脚本默认是不生效的，如果要生效，把文件名后缀去掉就可以了</p><h3 id="not-set-as-executable"><a href="#not-set-as-executable" class="headerlink" title="not set as executable"></a>not set as executable</h3><p>问题： hint: The ‘.git/hooks/pre-commit’ hook was ignored because it’s not set as executable.<br><!-- [Why is my Git pre-commit hook not executable by default?](https://stackoverflow.com/questions/8598639/why-is-my-git-pre-commit-hook-not-executable-by-default) --><br><!-- [为什么我的Git预提交挂钩默认不可执行？](https://xbuba.com/questions/8598639)$_PS: 下面是中文翻译 --></p><blockquote><p>The sample files from a git init are all executable; if it’s copied or renamed to a non-sample file, it will retain the original file’s x flag.<br>New files will be created with current defaults. In your case, view those defaults with umask:<br>默认情况下，u+x除非明确设置为新文件，否则不会。<br><code>$ umask #0022</code><br>解决<br><code>chmod +x</code></p></blockquote><h5 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h5><p>就像附加答案一样，这里是函数，你可以用来初始化一个git存储库，它自动生成钩子可执行文件;<br>您应该将它放入.bashrc或在启动终端时从源文件中找到它。故事在下面:)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  ginit () &#123;</span><br><span class="line">    git init</span><br><span class="line">    gitpath=`git rev-parse --show-superproject-working-tree --show-toplevel | head -1` </span><br><span class="line">    chmod u+x &quot;$gitpath&quot;/.git/hooks/*</span><br><span class="line">    for submodule in &quot;$gitpath&quot;/.git/modules/*; do</span><br><span class="line">      chmod u+x &quot;$submodule&quot;/hooks/*  </span><br><span class="line">    done </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我和你一样生气。我不想记住每次初始化存储库时都必须创建所有挂钩可执行文件。<br>另外，当你使用子模块时，它们的钩子不在.git/hooks，<br>但是在.git/modules/NameOfSubmodule/hooks，并且这些钩子也应该是可执行的。</p><h2 id="示例shell"><a href="#示例shell" class="headerlink" title="示例shell"></a>示例shell</h2><p>$_PS：网上看了pre-commit,commit-msg 。没有一个可以正确执行</p><h2 id="模版目录"><a href="#模版目录" class="headerlink" title="模版目录"></a>模版目录</h2><p>如果我们所有项目都需要一个通用的钩子，那么我们需要在所有的项目中都放置钩子文件。挨个复制显然不是一个可行的方案。<br>在 git init 或者 git clone时，如果指定有模板目录，会使用拷贝模板目录下的文件到 .git/ 目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init --template <span class="string">"path-to-template-dir"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --template <span class="string">"path-to-template-dir"</span></span></span><br></pre></td></tr></table></figure></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>1.创建/usr/local/.git_template/.git_template目录<br>2.将第一步中创建的commit_msg文件拷贝至上方目录<br>3.使用该命令将git全局配置模版重定向到第一步中创建到目录<br><code>git config --global init.templatedit /usr/local/.git_template/.git_template</code><br>4.如上三步完成后即可在创建新的使用git管理的项目的时候自动将全局模版拷贝至项目根目录/.git/目录下，<br>如果完成如上三步后需要对已经存在对git项目使用该模版，可移动至目标项目根目录并执行git init即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义模板目录，模板目录下的钩子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> template_dir=<span class="variable">$HOME</span>/.git-templates</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tempalte_hooks_dir=<span class="variable">$template_dir</span>/hooks</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝全局钩子文件目录到模板目录下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$template_dir</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -rf <span class="variable">$root_dir</span>/sample/git-template/hooks/ <span class="variable">$template_dir</span>/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改模板目录下钩子目录权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod -R a+x <span class="variable">$tempalte_hooks_dir</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置全局模板目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global init.templatedir <span class="variable">$template_dir</span></span></span><br></pre></td></tr></table></figure><h2 id="why-husky"><a href="#why-husky" class="headerlink" title="why husky"></a>why husky</h2><p>.git文件夹不会提交到git，这就导致一个问题，我们在本地配置好 Git Hook 后，怎么分享给其他小伙伴儿呢？copy 吗？<br>那未免太 low 了，都用 Git 了，还 copy，也太不优雅了。这时候，就轮到 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><!-- [GitHook 工具 —— husky介绍及使用](http://www.mamicode.com/info-detail-2916910.html)$_PS: 有每个git hook的中文介绍。及husky[一文带你彻底学会 Git Hooks 配置](https://segmentfault.com/a/1190000022970270?utm_source=tag-newest) --><h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p>github: <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">https://github.com/typicode/husky</a><br>Husky 是一个让配置 Git 钩子变得更简单的工具（题外话：Husky 是哈士奇的意思，我猜可能是作者养了条二哈）<br>下面这些流行的项目都在使用 Husky，可见它确实是一个非常好用的工具：webpack, babel, create-react-app</p><blockquote><p>注意：一定要使用 npm 安装 eslint 和 husky，因为在 windows 操作系统下, 用 yarn 安装依赖，不会触发 husky pre-commit 钩子命令。</p></blockquote><!-- \#1 [【工具推荐】使用 husky 避免糟糕的 git commit](https://zhuanlan.zhihu.com/p/35913229) --><p>package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "lint": "eslint src"</span><br><span class="line"> &#125;,</span><br><span class="line"> "husky": &#123;</span><br><span class="line">   "hooks": &#123;</span><br><span class="line">     "pre-commit": "npm run lint"</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>通过查看源码可以看到，在安装 husky 的时候，husky会根据 package.json里的配置，<br>在.git/hooks 目录生成所有的 hook 脚本（如果你已经自定义了一个hook脚本，husky不会覆盖它）</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>1、husky 使用了自定义的安装过程：node lib/installer/bin install（在node_modules/husky/package.json里）。<br>执行的时会在项目的.git/hooks 目录生成所有 hook 的脚本</p><p>2、每个hook脚本都是一样的<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># husky</span></span><br><span class="line"><span class="comment"># v1.0.0-rc.1 darwin</span></span><br><span class="line"><span class="built_in">export</span> HUSKY_GIT_PARAMS=<span class="string">"$*"</span></span><br><span class="line">node_modules/run-node/run-node ./node_modules/husky/lib/runner/bin `basename <span class="string">"<span class="variable">$0</span>"</span>`</span><br></pre></td></tr></table></figure></p><p>关键的部分是 <code>bashname &quot;$0&quot;</code>，这样可以拿到当前的 hook名，如pre-commit、pre-push 。</p><p>3、最后根据package.json 的配置，执行我们定义相对应的hook脚本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟悉各种工具的暴露的接口，联合起来可以hack出非常方便的自动化工具。<br>Hope you have fun! :)（题图侵删）<br>更新：配合lint-staged，可以只检查 staged 文件，提高效率<br><!-- End: #1 --></p><h1 id="lint-stage"><a href="#lint-stage" class="headerlink" title="lint-stage"></a>lint-stage</h1><p>lint-staged: <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">https://github.com/okonet/lint-staged</a></p><p>用于实现每次提交只检查本次提交所修改的文件。</p><h1 id="yorkie"><a href="#yorkie" class="headerlink" title="yorkie"></a>yorkie</h1><blockquote><p>yorkie fork 自 husky 并且与后者不兼容。<br>Git hooks made easy<br>This is a fork of husky with a few changes:</p></blockquote><h2 id="vue-cli-serve"><a href="#vue-cli-serve" class="headerlink" title="vue-cli-serve"></a>vue-cli-serve</h2><blockquote><p>在安装之后，@vue/cli-service 也会安装 <strong>yorkie</strong> ，它会让你在 package.json 的 gitHooks 字段中方便地指定 Git hook：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">    <span class="attr">"lintcss"</span>: <span class="string">"stylelint src/**/*.&#123;html,vue,css,less,scss&#125; --fix"</span>,</span><br><span class="line">    <span class="attr">"analyz"</span>: <span class="string">"ANALYZ=true vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"project"</span>: <span class="string">"node ./scripts/build/projectInit.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"gitHooks"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="attr">"commit-msg"</span>: <span class="string">"node scripts/git/verify-commit-msg.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"src/**/*.&#123;js,jsx,vue,ts,tsx&#125;"</span>: [</span><br><span class="line">      <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"src/**/*.&#123;vue,less,scss&#125;"</span>: [</span><br><span class="line">      <span class="string">"npm run lintcss"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintIgnore"</span>: [</span><br><span class="line">    <span class="string">"/scripts/git/verify-commit-msg.js"</span>,</span><br><span class="line">    <span class="string">"/scripts/build/projectInit.js"</span>,</span><br><span class="line">    <span class="string">"/dist"</span>,</span><br><span class="line">    <span class="string">"/build"</span>,</span><br><span class="line">    <span class="string">"/vue.config.js"</span>,</span><br><span class="line">    <span class="string">"/tsconfig.json"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"stylelint"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"@xes/stylelint-config-xes"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">      <span class="attr">"value-list-comma-newline-after"</span>: <span class="string">"always-multi-line"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"stylelintIgnore"</span>: [</span><br><span class="line">    <span class="string">"/src/layout/index.html"</span>,</span><br><span class="line">    <span class="string">"src/assets/less/utils"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h1 id="husky-配置"><a href="#husky-配置" class="headerlink" title="husky 配置"></a>husky 配置</h1><!-- \# [GitHook 工具 —— husky 配置](https://blog.csdn.net/huangpb123/article/details/102690412) --><ol><li>安装 husky，lint-staged，@commitlint/cli，@commitlint/config-conventional 依赖<br>lint-staged: 用于实现每次提交只检查本次提交所修改的文件。</li><li><p>创建 .huskyrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 .lintstagedrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"src/**/*.js"</span>: <span class="string">"eslint"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置 fix 可以自动修复错误：</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="attr">"src/**/*.js"</span>: [<span class="string">"eslint --fix"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 或者使用下面的配置，自动格式化代码（谨慎使用）</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">"src/**/*.js"</span>: [<span class="string">"prettier --write"</span>, <span class="string">"git add"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 commitlint.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&apos;@commitlint/config-conventional&apos;],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &apos;type-enum&apos;: [</span><br><span class="line">        2,</span><br><span class="line">        &apos;always&apos;,</span><br><span class="line">        [</span><br><span class="line">        &apos;feat&apos;, // 新功能（feature）</span><br><span class="line">        &apos;fix&apos;, // 修补bug</span><br><span class="line">        &apos;docs&apos;, // 文档（documentation）</span><br><span class="line">        &apos;style&apos;, // 格式（不影响代码运行的变动）</span><br><span class="line">        &apos;refactor&apos;, // 重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">        &apos;test&apos;, // 增加测试</span><br><span class="line">        &apos;revert&apos;, // 回滚</span><br><span class="line">        &apos;config&apos;, // 构建过程或辅助工具的变动</span><br><span class="line">        &apos;chore&apos;, // 其他改动</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    &apos;type-empty&apos;: [2, &apos;never&apos;], // 提交不符合规范时,也可以提交,但是会有警告</span><br><span class="line">    &apos;subject-empty&apos;: [2, &apos;never&apos;], // 提交不符合规范时,也可以提交,但是会有警告</span><br><span class="line">    &apos;subject-full-stop&apos;: [0, &apos;never&apos;],</span><br><span class="line">    &apos;subject-case&apos;: [0, &apos;never&apos;],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>————其他————-</p><h1 id="eslint-prettier-husky"><a href="#eslint-prettier-husky" class="headerlink" title="eslint + prettier + husky"></a>eslint + prettier + husky</h1><!-- [规范开发流程提升效率](https://ttc.zhiyinlou.com/#/articleDetail?id=993)$_PS: 下面内容从上面引出。其他内容：移动端px自动转vw —— 404[[GET STARTED WITH 'eslint + prettier + husky ']](https://ttc.zhiyinlou.com/#/articleDetail?id=600) $_PS: 冯明祥--><p>.eslintrc.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/essential'</span>,</span><br><span class="line">    <span class="string">'@xes/eslint-config-xes'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'html'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    camelcase: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"lint"</span>: <span class="string">"prettier --ignore-path --write './src/**/*.&#123;js,json,css,vue&#125;' &amp;&amp; eslint --ext .js,.vue src"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"husky"</span>: &#123;</span><br><span class="line">        <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">          <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">        <span class="attr">"src/**/*.&#123;js,json,css,vue&#125;"</span>: [</span><br><span class="line">          <span class="string">"npm run lint"</span>,</span><br><span class="line">          <span class="string">"git add"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git hooks文档：&lt;a href=&quot;https://git-scm.com/docs/githooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/docs/githooks&lt;/a&gt;&lt;br&gt;husky: &lt;a
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>移动端H5页面调试</title>
    <link href="http://yoursite.com/sum/jsplus/%E7%A7%BB%E5%8A%A8%E7%AB%AFh5%E9%A1%B5%E9%9D%A2%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/sum/jsplus/移动端h5页面调试/</id>
    <published>2020-09-16T00:00:00.000Z</published>
    <updated>2020-10-05T10:01:51.714Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.16 星期三  11：57 </p><p>移动端（web页面）开发/调试手段</p><h2 id="基本手段"><a href="#基本手段" class="headerlink" title="基本手段"></a>基本手段</h2><h3 id="chrome-（pc）"><a href="#chrome-（pc）" class="headerlink" title="chrome （pc）"></a>chrome （pc）</h3><p>Chrome 控制台 device模拟<br>   调ui，请求等方便</p><h3 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h3><p>1）原始/粗暴：alert<br>2）使用代理工具，抓包请求<br>3）通过数据线连接<br>安卓：Chrome Remote Devices<br>依赖 Chrome 来进行远程调试，适合安卓手机。<br>首先，开启 Android 手机的「开发者选项」，勾选 「USB 调试」。<br>然后，Chrome 中输入：chrome://inspect，进入调试页面。</p><p>iPhone<br>iphone【设置】&gt;【Safari】&gt;【高级】&gt;【Web检查器】<br>打开mac safari ,找到开发。在safafri中看到的iphone打开的连接以及h5内容</p><p>4）调试工具：vConsole；Eruda</p><blockquote><p>看起来很完美，但是有个小缺点：网络请求，需要刷新页面，可是很多内嵌的 H5 页面是没有机会刷新页面的，所以需要客户端童鞋配合增加刷新的功能方便调试。</p></blockquote><p>5) 其他：vorlon （（在Vue多页面工程中，单页面未尝试，但是原理应该一样）<br><!-- [混合开发之H5在移动端如何调试界面](https://www.jianshu.com/p/cc55586dd17c) --><br>1.首先进行全局安装vorlon（cnpm install -g vorlon）;<br>2.然后在index.html（需要监控的界面）添加<script src="http://192.168.1.:/vorlon.js"></script><br>3.打开cmd，输入vorlon执行<br>4.在浏览器中打开<a href="http://192.168.1.:（你配置的监控ip和端口）进行监控" target="_blank" rel="noopener">http://192.168.1.:（你配置的监控ip和端口）进行监控</a></p><h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><p>移动端开发（原生）编辑器可以模拟设备运行<br>可以看到各种信息，包括日志，请求，资源等。可断点</p><p>h5跨端开发</p><p>或者下载安卓模拟器（ios没听说）<br>其余流程就和真机一致</p><h3 id="混合开发"><a href="#混合开发" class="headerlink" title="混合开发"></a>混合开发</h3><p>嵌套在webview的h5页面，可以在原生开发的编辑器中输入日志的信息<br>（监听webview 的console.log/alert等。或者约定debug方式/函数）<br>然后在端上开发老师的编辑器，查看到日志等信息</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不同方式有不同的场景。<br>不同的bug/调试，可能要通过一种或者多种方式。</p><h2 id="终极"><a href="#终极" class="headerlink" title="终极"></a>终极</h2><p>究极，肉眼debug</p><h2 id="调试包"><a href="#调试包" class="headerlink" title="调试包"></a>调试包</h2><h3 id="Eruda"><a href="#Eruda" class="headerlink" title="Eruda"></a>Eruda</h3><p>github: <a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a><br><!-- [Eruda: 手机网页调试利器](https://www.v2ex.com/t/316893) --><br>Eruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版，其主要功能包括：捕获 console 日志、检查元素状态、显示性能指标、捕获 XHR 请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。</p><p>Js 文件对于移动端来说略重（ gzip 后大概 80kb ）。建议通过 url 参数来控制是否加载调试器，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> src = <span class="string">'node_modules/eruda/eruda.min.js'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/eruda=true/</span>.test(<span class="built_in">window</span>.location) &amp;&amp; localStorage.getItem(<span class="string">'active-eruda'</span>) != <span class="string">'true'</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt src="'</span> + src + <span class="string">'"&gt;&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt&gt;eruda.init();&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>);</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><!-- # 实际 --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"//activity.xueersi.com/topic/growth/base/js/debug@0.0.1/debug.min.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">async</span>=<span class="string">"async"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- debug@0.0.1/debug.min.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(<span class="regexp">/debug=xesv5/</span>.test(<span class="built_in">window</span>.location))&#123;<span class="keyword">var</span> n=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);n.src=<span class="string">"https://cdn.bootcss.com/eruda/1.5.4/eruda.min.js"</span>,<span class="built_in">document</span>.body.appendChild(n),n.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;eruda.init()&#125;&#125;&#125;();</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a>vConsole</h3><p>github: <a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">https://github.com/Tencent/vConsole</a><br>一个轻量、可拓展、针对手机网页的前端开发者调试面板。</p><p>打印日志<br>与 PC 端打印 log 一致，可直接使用 console.log() 等方法直接打印日志：<code>console.log(&#39;Hello World&#39;);</code><br>未加载 vConsole 模块时，console.log() 会直接打印到原生控制台中；<br>加载 vConsole 后，日志会打印到页面前端+原生控制台。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>name</th><th>watch</th><th>star</th><th>fork</th><th>issue</th></tr></thead><tbody><tr><td>Eruda</td><td>261</td><td>9.1k</td><td>742</td><td>10/124</td></tr><tr><td>vConsole</td><td>313</td><td>12k</td><td>2.5k</td><td>98/132</td></tr></tbody></table><p>鸡肋：线上（有的灰度）打包的时候，会把console去掉。所以，是看不到log的。<br>开发环境有的。测试环境也可以加<br>可以看看cookie，网络请求；error等</p><p>上面两者都可以在head中引入；或者按需（await/defer），放置body结尾。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.cnblogs.com/wind-alex/p/10374304.html" target="_blank" rel="noopener">[H5 移动调试全攻略]</a><br>$_PS: 内容比较全<br><a href="https://www.zhihu.com/question/24250869" target="_blank" rel="noopener">怎么在移动端调试web前端?</a></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.16 星期三  11：57 &lt;/p&gt;


&lt;p&gt;移动端（web页面）开发/调试手段&lt;/p&gt;
&lt;h2 id=&quot;基本手段&quot;&gt;&lt;a href=&quot;#基本手段&quot; class=&quot;headerlink&quot; title=&quot;基本
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes学习</title>
    <link href="http://yoursite.com/sum/os/kubernetes%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/os/kubernetes学习/</id>
    <published>2020-09-14T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.192Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.14 星期一  21：18 </p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><a href="https://www.cnblogs.com/mengyucloud/p/12601732.html" target="_blank" rel="noopener">k8s入门教程</a></p><h3 id="2-k8s常用概念介绍"><a href="#2-k8s常用概念介绍" class="headerlink" title="2. k8s常用概念介绍"></a>2. k8s常用概念介绍</h3><h4 id="节点-（Master-node-and-Worker-node）"><a href="#节点-（Master-node-and-Worker-node）" class="headerlink" title="节点 （Master node and Worker node）"></a>节点 （Master node and Worker node）</h4><p>节点通常指的就是服务器，在k8s中有两种节点：管理节点（Master Node）和工作节点（Worker Node）<br>管理节点（Master Node）：负责管理整个k8s集群，一般由3个管理节点组成HA的架构。<br>工作节点（Worker Node）：主要负责运行容器。</p><h4 id="命名空间-Namespace"><a href="#命名空间-Namespace" class="headerlink" title="命名空间 (Namespace)"></a>命名空间 (Namespace)</h4><p>k8s命名空间主要用于隔离集群资源、隔离容器等，为集群提供了一种虚拟隔离的策略；默认存在3个名字空间，分别是默认命名空间 default、系统命名空间 kube-system 和 kube-public。</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>k8s 对象(Object)是一种持久化存储并且用于表示集群状态的实体。k8s 对象其实就是k8s自己的配置协议，总之我们可以通过定义一个object让k8s根据object定义执行一些部署任务、监控任务等等。</p><h4 id="POD"><a href="#POD" class="headerlink" title="POD"></a>POD</h4><p>Pod是 Kubernetes 部署应用或服务的最小的基本单位。一个Pod 封装多个应用容器（也可以只有一个容器）、存储资源、一个独立的网络 IP 以及管理控制容器运行方式的策略选项。</p><h4 id="副本集-Replica-Set，RS"><a href="#副本集-Replica-Set，RS" class="headerlink" title="副本集 (Replica Set，RS)"></a>副本集 (Replica Set，RS)</h4><p>是一种控制器，负责监控和维护集群中pod的副本(replicas)数，确保pod的副本数是我们期望的样子。</p><h4 id="部署-Deployment"><a href="#部署-Deployment" class="headerlink" title="部署 (Deployment)"></a>部署 (Deployment)</h4><p>表示对k8s集群的一次更新操作，是k8s集群中最常用的Object，主要用于部署应用。支持滚动升级。</p><h4 id="服务-service"><a href="#服务-service" class="headerlink" title="服务 (service)"></a>服务 (service)</h4><p>是对应用的抽象，也是k8s中的基本操作单元，一个服务背后由多个pod支持，服务通过负载均衡策略将请求转发到容器中。</p><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><p>是一种网关服务，可以将k8s服务通过http协议暴露到外部。<br>无状态应用 &amp; 有状态应用</p><h3 id="3-k8s架构"><a href="#3-k8s架构" class="headerlink" title="3. k8s架构"></a>3. k8s架构</h3><h3 id="4-基于k8s的常见web应用部署架构"><a href="#4-基于k8s的常见web应用部署架构" class="headerlink" title="4. 基于k8s的常见web应用部署架构"></a>4. 基于k8s的常见web应用部署架构</h3><h3 id="5-部署应用"><a href="#5-部署应用" class="headerlink" title="5. 部署应用"></a>5. 部署应用</h3><h3 id="6-容器之间共享文件存储"><a href="#6-容器之间共享文件存储" class="headerlink" title="6. 容器之间共享文件存储"></a>6. 容器之间共享文件存储</h3><p>根据存储方式不同，k8s支持多种持久卷（Persistent Volumes）类型，阿里云也对k8s进行一些扩展支持，目前支持NAS、OSS、云盘三种持久卷类型。</p><p>下面是关于阿里云支持的持久卷类型的介绍：</p><p>NAS  - 阿里云高性能分布式文件系统，支持共享存储。<br>OSS  - 阿里云对象存储, 也是一个分布式文件系统，支持共享存储。<br>云盘 - 阿里云云盘，不支持共享存储。7. k8s配置管理<br>如果希望一个镜像（image）更具有通用性，与环境无关，那么应该将环境相关的配置参数从镜像中分离出来。</p><p>### </p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="https://blog.csdn.net/zhuwentaolove/article/details/93102268" target="_blank" rel="noopener">k8s入门教程</a><br>$_PS: 主安装</p><p><a href="https://www.orchome.com/732" target="_blank" rel="noopener">Kubernetes(k8s)中文教程</a><br>Kubernetes(k8s) 是用于自动部署，扩展和管理容器化应用程序的开源系统。</p><p>它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现，Kubernetes 构建在 Google 15 年生产环境经验基础之上,并结合来自社区的最佳创意和实践。</p><h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><p><a href="https://www.jianshu.com/p/86072a381bec" target="_blank" rel="noopener">K8S Nginx Ingress 介绍</a><br>Kubernetes 暴露服务的方式目前只有三种：LoadBlancer Service、NodePort Service、Ingress；前两种估计都应该很熟悉，具体的可以参考下 这篇文章；下面详细的唠一下这个 Ingress</p><p>Ingress 这个玩意，简单的理解就是 你原来要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yml 创建，每次不要去改 Nginx 了，直接改 yml 然后创建/更新就行了；那么问题来了：”Nginx 咋整？”</p><p>Ingress Controller 这东西就是解决 “Nginx 咋整” 的；Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下，工作流程如下图</p><p>当然在实际应用中，最新版本 Kubernetes 已经将 Nginx 与 Ingress Controller 合并为一个组件，所以 Nginx 无需单独部署，只需要部署 Ingress Controller 即可</p><p><a href="https://www.jianshu.com/p/613967aee68e" target="_blank" rel="noopener">Kubernetes实战：集群中部署NGINX Ingress Controller</a></p><blockquote><p>ingress由两部分组成：ingress controller和ingress服务。<br>ingress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段nginx配置，再写到nginx-ingress-control的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后reload一下使配置生效。以此达到域名分配置和动态更新的问题。</p></blockquote><p><a href="https://www.kubernetes.org.cn/7795.html" target="_blank" rel="noopener">从传统Paas到OAM入门篇</a><br>OAM 全称是 Open Application Model，从名称上来看它所定义的就是一种模型，同时也实现了基于 OAM 的我认为这种模型旨在定义了云原生应用的标准。</p><p><a href="https://www.kubernetes.org.cn/7459.html" target="_blank" rel="noopener">使用 kind 和 Docker 启动本地的 Kubernetes</a><br>这篇文章中，我将向你展示使用 kind 在单个 Docker 容器中启动一个集群的步骤。<br>结论<br>kind 对 minikube 来说是一个好的选择因为它只使用单个 Docker 容器。<br>通过跟集成到 Kubernetes 1.14 的 Kustomze 结合使用，在你本地的机器上尝试使用 Kubernetes 会更加简单。</p><p><a href="https://www.kubernetes.org.cn/7429.html" target="_blank" rel="noopener">【docker容器技术】如何选择存储驱动</a></p><h1 id="Iass、Pass、SasS三种云服务区别"><a href="#Iass、Pass、SasS三种云服务区别" class="headerlink" title="Iass、Pass、SasS三种云服务区别"></a>Iass、Pass、SasS三种云服务区别</h1><p><a href="https://www.sohu.com/a/250891912_100233513" target="_blank" rel="noopener">[Iass、Pass、SasS三种云服务区别]</a></p><p>IaaS：Infrastructure-as-a-Service(基础设施即服务)<br>PaaS：Platform-as-a-Service(平台即服务)<br>SaaS：Software-as-a-Service(软件即服务)</p><p>我们可以把云计算理解成一栋大楼，而这栋楼又可以分为顶楼、中间、低层三大块。<br>那么我们就可以把Iass(基础设施)、Pass(平台)、Sass(软件)理解成这栋楼的三部分。基础设施在最下端，平台在中间，软件在顶端。别的一些“软”的层可以在这些层上面添加。</p><p style="text-align:right">21:27 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.14 星期一  21：18 &lt;/p&gt;

&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 工作流程</title>
    <link href="http://yoursite.com/sum/jsplus/Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/sum/jsplus/Git 工作流程/</id>
    <published>2020-09-13T00:00:00.000Z</published>
    <updated>2020-10-08T07:02:50.702Z</updated>
    
    <content type="html"><![CDATA[<p>git config –system –unset credential.helper</p><p><a href="https://www.bookstack.cn/read/git-doc-zh/README.md" target="_blank" rel="noopener">Git 中文参考</a></p><p style="text-align:right"> 2020.9.13 星期日  22：58 </p><h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><!-- [Git 工作流程](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html) --><p>本文介绍三种广泛使用的工作流程：<br>Git flow, Github flow, Gitlab flow<br>有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。<br>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p><h2 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h2><p>1) 首先，项目存在两个长期分支。<br>主分支master<br>开发分支develop</p><p>2) 其次，项目存在三种短期分支。 一旦完成开发，它们就会被合并进develop或master，然后被删除。<br>功能分支（feature branch）<br>补丁分支（hotfix branch）<br>预发分支（release branch）</p><h3 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><h2 id="Github-flow"><a href="#Github-flow" class="headerlink" title="Github flow"></a>Github flow</h2><p>它只有一个长期分支，就是master，因此用起来非常简单。</p><p>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。<br>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。<br>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。<br>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p><h3 id="3-2-评价-1"><a href="#3-2-评价-1" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><!-- Github flow 的最大优点就是简单，对于"持续发布"的产品，可以说是最合适的流程。 --><p>问题在于它的假设：master分支的更新与产品的发布是一致的。也就是说，master分支的最新代码，默认就是当前的线上代码。</p><h2 id="Gitlab-flow"><a href="#Gitlab-flow" class="headerlink" title="Gitlab flow"></a>Gitlab flow</h2><p>Gitlab flow 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p><p>### 4.1 上游优先<br>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），<br>即只存在一个主分支master，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p><p>Chromium项目就是一个例子，它明确规定，上游分支依次为：<br>Linus Torvalds的分支, 子系统（比如netdev）的分支, 设备厂商（比如三星）的分支</p><p>### 4.2 持续发布<br>Gitlab flow 分成两种情况，适应不同的开发流程。</p><p>对于”持续发布”的项目，它建议在master分支以外，再建立不同的环境分支。比如，”开发环境”的分支是master，”预发环境”的分支是pre-production，”生产环境”的分支是production。</p><p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p><p>### 4.3 版本发布<br>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从master分支拉出一个分支，比如2-3-stable、2-4-stable等等。<br>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p><h2 id="五、一些小技巧"><a href="#五、一些小技巧" class="headerlink" title="五、一些小技巧"></a>五、一些小技巧</h2><h3 id="5-1-Pull-Request"><a href="#5-1-Pull-Request" class="headerlink" title="5.1 Pull Request"></a>5.1 Pull Request</h3><h3 id="5-2-Protected-branch"><a href="#5-2-Protected-branch" class="headerlink" title="5.2 Protected branch"></a>5.2 Protected branch</h3><h3 id="5-3-Issue"><a href="#5-3-Issue" class="headerlink" title="5.3 Issue"></a>5.3 Issue</h3><blockquote><p>开发完成后，在提交说明里面，可以写上”fixes #14”或者”closes #67”。Github规定，只要commit message里面有下面这些动词 + 编号，就会关闭对应的issue。</p></blockquote><h3 id="5-4-Merge节点"><a href="#5-4-Merge节点" class="headerlink" title="5.4 Merge节点"></a>5.4 Merge节点</h3><p>Git有两种合并：一种是”直进式合并”（fast forward），不生成单独的合并节点；<br>另一种是”非直进式合并”（none fast-forword），会生成单独节点。</p><p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用–no-ff参数）。<br>只要发生合并，就要有一个单独的合并节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--squash：使用squash方式合并，把多次分支commit历史压缩为一次</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--no-ff：不使用fast-forward方式合并，保留分支的commit历史</span></span><br><span class="line">git merge --no-ff feature</span><br></pre></td></tr></table></figure><h3 id="5-5-Squash-多个commit"><a href="#5-5-Squash-多个commit" class="headerlink" title="5.5 Squash 多个commit"></a>5.5 Squash 多个commit</h3><p>为了便于他人阅读你的提交，也便于cherry-pick或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。<br>（前提是，<strong>该分支只有你一个人开发，且没有跟master合并过。</strong>）</p><p>这可以采用rebase命令附带的squash操作，具体方法请参考我写的《Git 使用规范流程》。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>3种。<br>git flow：原始/简单；两个分支master，develop<br>github flow: github 社区方式；每个人都可以fork/checkout 分支，提PR，然后merge。最后部署，或和删除<br>gitlab flow: 工作中 多环境，多分支/开发/需求。上线流程</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>master： 主分支，和线上保持一致<br>release： 可以是测试分支<br>stage/gray: 灰度环境<br>develop： 其余分支；多开发人员；不同feature分支；<br>  比如：dev/huyalong/20200919;<br>    dev/mall/huyalong/20200919-feat;<br>    dev_feature_huyalong_20200908_inviteNew_3.2.2<br>0) 多个feature 分支，也可以合并到一个develop分支。再从这一个develop分支push<br>1） release 也可以有个人/自己的分支，然后合并到唯一的release中发布测试<br>2） state/gray 可以没有。直接合并master 打tag（方便回滚等）发布灰度<br>3） 最后master 可以直接发布到线上</p><p>开发新feature分支都需要从master拉取最新线上代码</p><p>切勿把release（不是自己提交的ci）带到线上<br>（有时别人提交了测试导致当前分支落后于release，merge时有冲突，解决冲突时污染了自己的开发分支）可以 checkout一个新分支提交release</p><p>可以通过merge把开发分支合并到master分支，或者 rebase保持提交信息单一<br>同理把最新的master同步到当前的开发分支也一样<br><strong>使用rebase注意，一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作</strong>；</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>cherry-pick<br>rebase命令附带的squash操作</p><h1 id="git-flow"><a href="#git-flow" class="headerlink" title="git-flow"></a>git-flow</h1><p>git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。<br><!-- [Gitflow工作流程](https://www.cnblogs.com/jeffery-zou/p/10280167.html)[A successful Git branching model](https://nvie.com/posts/a-successful-git-branching-model/)[Learn Version Control with Git](https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow)[git-flow 备忘清单](https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html) --></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git config –system –unset credential.helper&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bookstack.cn/read/git-doc-zh/README.md&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Gird布局</title>
    <link href="http://yoursite.com/sum/css/grid%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/sum/css/grid布局/</id>
    <published>2020-09-06T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.126Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.6  星期日  18：42 </p><p><a href="https://www.jianshu.com/p/d183265a8dad" target="_blank" rel="noopener">Grid布局指南</a><br><del><a href="https://blog.csdn.net/weixin_44202459/article/details/88653661" target="_blank" rel="noopener">前端基础知识（grid布局）</a></del><br><!-- $_PS: 内容一样 --><br><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a><br><a href="https://zhuanlan.zhihu.com/p/26757425" target="_blank" rel="noopener">带你入门 CSS Grid 布局</a><br><!-- $_PS: LeviDing --></p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>Grid Container,Grid Item,Grid Line,Grid Track,Grid Cell,Grid Area,</p><p>4.网格轨道（Grid Track）<br>两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。</p><h3 id="Grid-Container-的全部属性"><a href="#Grid-Container-的全部属性" class="headerlink" title="Grid Container 的全部属性"></a>Grid Container 的全部属性</h3><p>display: grid,inline-grid</p><p>grid-template-columns<br>grid-template-rows</p><p>grid-template-areas<br>grid-template</p><p>grid-column-gap<br>grid-row-gap<br>grid-gap</p><p>justify-items<br>align-items<br>justify-content<br>align-content<br>grid-auto-columns<br>grid-auto-rows<br>grid-auto-flow<br>grid</p><ol><li><p>display: grid | inline-grid | subgrid;<br>subgrid: 如果网格容器本身是网格项（嵌套网格容器），此属性用来继承其父网格容器的列、行大小。<br>注：当元素设置了网格布局，column、float、clear、vertical-align属性无效。</p></li><li><p>grid-template-columns: <track-size> … | <line-name> <track-size> … ;<br>track-size: 轨道大小，可以使用css长度，百分比或用分数（用fr单位）。<br>line-name: 网格线名字，你可以选择任何名字。</track-size></line-name></track-size></p></li></ol><h3 id="Grid-Items-的全部属性"><a href="#Grid-Items-的全部属性" class="headerlink" title="Grid Items 的全部属性"></a>Grid Items 的全部属性</h3><pre><code>grid-column-startgrid-column-endgrid-row-startgrid-row-endgrid-columngrid-rowgrid-areajustify-selfalign-self</code></pre><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.6  星期日  18：42 &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d183265a8dad&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;G
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/sum/css/"/>
    
    
  </entry>
  
  <entry>
    <title>Item2 使用</title>
    <link href="http://yoursite.com/sum/others/item2%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/others/item2 使用/</id>
    <published>2020-09-06T00:00:00.000Z</published>
    <updated>2020-10-08T01:18:41.615Z</updated>
    
    <content type="html"><![CDATA[<p>文档：<a href="https://www.iterm2.com/documentation.html" target="_blank" rel="noopener">https://www.iterm2.com/documentation.html</a></p><p style="text-align:right">2020.9 星期 </p><!-- \# [[iTerm2使用技巧]](https://www.jianshu.com/p/a78845c3f476) --><p>启动一个连接到远程server的终端：<br>选择“Preferences-&gt;Profiles”，新增一个profile，并设置启动的快捷键和command命令，如图：</p><p>按”cmd+;”可以弹出自动完成提示。<br>调出复制过的文本历史 “^+cmd+h”。</p><!-- [Mac上iterm2分屏切换](https://www.jianshu.com/p/2caac8139551) --><p>command + d：垂直分屏，<br>command + shift + d：水平分屏。<br>command + ] 和command + [    在最近使用的分屏直接切换.<br>command + alt + 方向键：切换到指定位置的分屏。</p><p>command + t：新建tab<br>command + 数字：切换标签页。<br>command + 方向键：按方向切换标签页。<br>shift + command + s：保存当前窗口快照。</p><p>command + n: 新建窗口</p><p>command + alt + b：快照回放。很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键</p><p>shift + command + s：保存当前窗口快照。<br>$_PS: 不知道干嘛的</p><p>快速打开profile或者切换到指定tab: 快捷键“^+cmd+o”。<br>显示命令执行时间、高亮显示光标所在行<br>标记（mark）</p><h2 id="标题栏显示当前所在路径"><a href="#标题栏显示当前所在路径" class="headerlink" title="标题栏显示当前所在路径"></a>标题栏显示当前所在路径</h2><p>打开~/.bash_profile，添加对PROMPT_COMMAND的配置<br>export PROMPT_COMMAND=’echo -ne “\033]0;$PWD\007”‘</p><p style="text-align:right"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文档：&lt;a href=&quot;https://www.iterm2.com/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iterm2.com/documentation.html&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3新特性</title>
    <link href="http://yoursite.com/sum/jsplus/vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/sum/jsplus/vue3新特性/</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#" target="_blank" rel="noopener">从 Vue 2 迁移</a></p><p style="text-align:right"> 2020.9.27 星期  ： </p><p>composition-api api<br>tree shaking<br>typescript<br>observer<br>编译优化；编辑器/ide支持<br>slot<br>错误排查：那个ref/key 相关/操作</p><p>##<br>    更快<br>    更小<br>    更易于维护<br>    更好的多端渲染支持<br>    新功能<br><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="noopener">Vue Function-based API RFC</a><br>尤雨溪</p><p><a href="https://composition-api.vuejs.org/zh/#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">Vue 组合式 API</a></p><p>其他：<br><a href="https://www.rongsoft.com/article/2020/02/111716074649/" target="_blank" rel="noopener">Vue 3.0 的新特性和设计理念</a><br>时间：2020-02-11<br><a href="https://www.dazhuanlan.com/2019/12/05/5de82dcede734/?__cf_chl_jschl_tk__=1bb44766f90a062e043b4fae4c8a81cf1bf5998f-1601030802-0-AdIPuXKmJP4EsNaihsqf5e58IvQ2gLivUte85SVKrCwy_u54vceQ7TKFhVSfwfvXkbg2kxgFnRhRXxPFWJlXYRvolb7MO44rna-UaP3hgsy-1Td871mLkUl4otdwQCipdMBO8RE97sGJVTqxunZlcAiTJGliqlCFrWjzk6FWBr1zlUTCbt1HQnF-BT1M92O-2LpR4utEcHw18kFFLqLELrfyKgyoGhOsw3lvjLLsn2sNkf7BwXbu_KnGKAGrsP4tWNhT9jEkKMTuoyRNytsBhKUyXZls27oKexxafx5U-zx11mlfyVRUBQjYi7iXVqTHnw" target="_blank" rel="noopener">vue3.0 新特性 </a><br>发表于 2019-12-05 </p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://v3.cn.vuejs.org/guide/migration/introduction.html#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从 Vue 2 迁移&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-ali
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Html2canvas实践</title>
    <link href="http://yoursite.com/sum/jsplus/html2canvas%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/html2canvas实践/</id>
    <published>2020-08-17T00:00:00.000Z</published>
    <updated>2020-10-03T15:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Vant实践</title>
    <link href="http://yoursite.com/sum/jsplus/vant%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/vant实践/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.090Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.8.10 星期一  20：58 </p><h3 id="v-popup"><a href="#v-popup" class="headerlink" title="v-popup"></a>v-popup</h3><ol><li>ios中弹窗出现（居中），页面滚动。跳到第二个页面，然后返回时弹窗位置不居中：在页面的底部<br>可以在页面加载完成后通过js滚动到页面顶部 scrollTo(0,0)。或者弹窗出现后禁止滚动<!-- [vux的popup组件的ios兼容问题](https://blog.csdn.net/shuxians/article/details/83834485) --><!-- $_PS: 不是一个组件库啊vux 和 vant。 --></li></ol><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.8.10 星期一  20：58 &lt;/p&gt;

&lt;h3 id=&quot;v-popup&quot;&gt;&lt;a href=&quot;#v-popup&quot; class=&quot;headerlink&quot; title=&quot;v-popup&quot;&gt;&lt;/a&gt;v-popup&lt;/
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="ui-lib" scheme="http://yoursite.com/tags/ui-lib/"/>
    
  </entry>
  
  <entry>
    <title>微信H5开发实践</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%BE%AE%E4%BF%A1h5%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/微信h5开发实践/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-10-08T01:19:23.075Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">网页授权</a><br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">JS-SDK说明文档</a></p><p>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><p style="text-align:right"> 2020.8.10 星期一  20：34 </p><ol start="0"><li><p>通过config接口注入权限验证配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端接口那会微信jssdk 配置信息，然后初始化</span></span><br><span class="line"> axios.post(<span class="keyword">this</span>.wxShareUrl).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (res.data.sign == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> _config = res.data.msg.wxConf;</span><br><span class="line">         <span class="keyword">let</span> _debug = <span class="keyword">this</span>.wxDebug &amp;&amp; process.env.NODE_ENV == <span class="string">'development'</span>;</span><br><span class="line">         wx.config(&#123;</span><br><span class="line">             debug: _debug,</span><br><span class="line">             appId: _config.appId,</span><br><span class="line">             timestamp: _config.timeStamp,</span><br><span class="line">             nonceStr: _config.nonceStr,</span><br><span class="line">             signature: _config.signature,</span><br><span class="line">             jsApiList: <span class="keyword">this</span>.jsApiList <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="comment">// 判断当前客户端版本是否支持指定JS接口</span></span><br><span class="line">         <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">         wx.checkJsApi(&#123;</span><br><span class="line">             jsApiList: [<span class="string">'updateAppMessageShareData'</span>, <span class="string">'updateTimelineShareData'</span>],</span><br><span class="line">             success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                 <span class="comment">// 以键值对的形式返回，可用的api值true，不可用为false</span></span><br><span class="line">                 <span class="keyword">let</span> result = <span class="built_in">JSON</span>.parse(res.checkResult);</span><br><span class="line">                 <span class="keyword">if</span> (result.updateAppMessageShareData &amp;&amp; result.updateTimelineShareData) &#123;</span><br><span class="line">                     _this.wxUpdateStatus = <span class="literal">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>微信分享设置失败。多个地方引入wx（index.html，xesShare），致使wx undefined</p></li><li>测试环境设置微信分享，需要先关注公众号。是微信api做了安全方面的限制，好比小程序的体验者</li><li><p>微信分享设置（jssdk） ios 失败。<br>新增两个分享的接口，之前的4个即将废弃。<br>updateAppMessageShareData，updateTimelineShareData 这两接口设置是异步的。<br>所以最好提前设置。<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#111" target="_blank" rel="noopener">分享接口</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">wx.updateAppMessageShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>分享链接。虽然没有看到（文档）中对链接长度的限制，但是url有长度限制（有吗？）；<br>通用的分享/裂变能力，链接都比较短。（初期）微博字数限制，短信限制<br>本次分享链接是用的短链接。（听说是链接长的话，生成的二维码模糊。能多长了）</p></li><li>分享小程序。h5 没有这个功能。app中可以通过自家的xesApp jssdk 设置分享类型为小程序<br>微信分享小程序的接口只给原生app提供了。h5没有该接口</li><li>打开小程序。同样也是原生有这个接口<br>h5页面可以通过 wx.config() openTagList 开放标签实现。也就是在微信公众号中可以打开的小程序<br>但是h5页面，直接打开小程序不行。<br>如果是内嵌在小程序里面web-view 则可以通过jssdk 打开小程序。wx.miniProgram.navigateTo<br>（是否需要一些其它配置待实践，比如公众号appid，注入config等）</li><li>挽留弹窗。首次进入的页面无法实现。 在app中可以通过自己xesApp jssdk实现<br> web的beforeunload,unload 在微信环境被阉割了。<br> pageShow 可以监听到。pageHide 怎么监听，页面都关闭了。<br> 市场上的方案，说通过history.pushState。 但是首页的popState 的是监听不到的，<pre><code>1）如果首页跳到第二个页面，第二个页面再回到首页。这时可以监听到popState，而且是两次。2）如果是单页应用，进入其它路由 跳出后也会监听到popState （该路由页是不需要的；实践的hash路由是如此）</code></pre><blockquote><p>请注意，浏览器不会在调用pushState（）之后尝试加载此URL，但可能会稍后尝试加载URL，例如在用户重新启动浏览器之后。<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/pushState" target="_blank" rel="noopener">History.pushState</a><br> $_PS: 也就是上面第一个问题。不只是在微信中</p></blockquote></li><li>关闭当前页面。微信提供了关闭当前页面/浏览器的api。weixinjsbridge.invoke()<br>weixinjsbridge.invoke(‘closeWindow’, {}, function(){})<br> WeixinJSBridge.invoke(‘shareTimeline’,data,callback)<br> wx.closeWindow(); wx.hideShareMenu()</li><li>WeixinJSBridge 和 wx（jssdk）<br>WeixinJSBridge 是老的微信提供的能力，后出了jssdk。以前的一些功能/使用方式可能有区分，变化<br>jssdk 应该能力更强一些，包括其它方面</li></ol><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Video H5相关问题</title>
    <link href="http://yoursite.com/sum/js/video%20h5%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/sum/js/video h5相关问题/</id>
    <published>2020-08-06T00:00:00.000Z</published>
    <updated>2020-10-08T01:17:11.918Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020. 星期  ： </p><p>video标签层级问题<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"myVideo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">loop</span>    </span></span><br><span class="line"><span class="tag">    <span class="attr">objectFit</span>=<span class="string">""</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">"videoParam.videoUrl||''"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:poster</span>=<span class="string">"videoParam.videoLogo||''"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:controls</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">    <span class="attr">x5-video-player-type</span>=<span class="string">'h5'</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">x5-video-player-fullscreen</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x5-playsinline</span>=<span class="string">"true"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">playsinline</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">x-webkit-airplay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"object-fit: fill;object-position:0 100%;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>没啥用。 只需要一个x5-video-player-type=’h5’ 。后面内容多了，反而不生效。上面是以前的解决方案<br>但是在ios手机 自动全屏播放了。<br>最初什么也没有加，在ios 是正常播放，属于页面层级。好像也没出现全屏播放</p><p>webkit-playsinline=”true” 播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族）</p><h3 id="各属性说明"><a href="#各属性说明" class="headerlink" title="各属性说明"></a>各属性说明</h3><!-- \# [微信 HTML5 VIDEO 视频播放解决方案](https://www.jianshu.com/p/e4573acf6564) --><p>webkit-playsinline &amp;&amp; playsinline=”true”</p><p>小窗播放 使视频不脱离文本流，但是需要webview（allowsInlineMediaPlayback = YES webview.allowsInlineMediaPlayback = YES），现在结果是苹果支持，安卓不支持。安卓播放会全屏。</p><p>x-webkit-airplay=”allow”<br>允许<strong>airplay</strong>（通过AirPlay可以把当前的视频投放到支持此技术的其他设备上。）</p><p>x5-video-player-type=”h5”<br>通过video属性“x5-video-player-type”声明启用同层<strong>H5播放器</strong><br>x5-video-player-type支持的值类型：h5<br>这个属性需要在播放前设置好，播放之后设置无效</p><p>x5-video-player-fullscreen=”true”<br>视频播放时将会进入到全屏模式，如果不申明此属性，页面得到视口区域为原始视口大小(视频未播放前)，比如在微信里，会有一个常驻的标题栏，如果不声明此属性，这个标题栏高度不会给页面，播放时会平均分为两块（上下黑块）<br>注： 声明此属性，需要页面自己重新适配新的视口大小变化。可以通过监听resize 事件来实现<br>window.onresize = function(){<br>    test_video.style.width = window.innerWidth + “px”;<br>    test_video.style.height = window.innerHeight + “px”;<br>}</p><p>x5-video-orientation控制横竖屏<br>声明<strong>播放器支持方向</strong><br>可选值： landscape 横屏，portrain竖屏； 默认portrain<br>跟随手机自动旋转</p><p><code>&lt;video x5-video-player-type=&quot;h5&quot; x5-video-orientation=&quot;landscape|portrait&quot;/&gt;</code></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020. 星期  ： &lt;/p&gt;


&lt;p&gt;video标签层级问题&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell基础</title>
    <link href="http://yoursite.com/sum/os/shell%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/sum/os/shell基础/</id>
    <published>2020-08-06T00:00:00.000Z</published>
    <updated>2020-10-08T01:18:24.710Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.8 星期  ： </p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><!-- [Shell - 编程基础](http://fe.xesv5.com/docs/others/shell.html)参考：[shell-book](http://me.52fhy.com/shell-book/)  https://github.com/52fhy/shell-book    01- Shell脚本学习–入门    02- Shell脚本学习–运算符    03- Shell脚本学习–字符串和数组    04- Shell脚本学习–条件控制    05- Shell脚本学习–函数    06- Shell脚本学习–其它[Shell脚本编程30分钟入门](https://github.com/qinjx/30min_guides/blob/master/shell.md)[shell代码提交脚本git](https://www.jianshu.com/p/29235bd63e65) --><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World !"</span></span><br><span class="line"><span class="built_in">echo</span> -e arg <span class="comment">#执行arg里的转义字符。echo加-e默认会换行</span></span><br><span class="line"><span class="built_in">echo</span> arg &gt; myfile <span class="comment">#显示结果重定向至文件，会生成myfile文件</span></span><br><span class="line">your_name=<span class="string">"Qzx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br><span class="line"><span class="comment">### 变量名外加花括号是可选的，主要为了帮助解释器识别变量的边界</span></span><br><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>变量删除：unset variable_name。<br>变量类型：<br>    局部变量：在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问。<br>    环境变量：所有的程序，包括shell启动的程序，都能访问环境变量。<br>    shell变量：shell变量是由shell程序设置的特殊变量。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>单引号字符串限制：<br>    单引号里的任何字符串都会原样输出，单引号字符串中的变量是无效的<br>    单引号字符串中不能出现单引号（对单引号使用转义字符也不行）</p><p>双引号字符串：<br>    双引号可以有变量<br>    双引号可以出现转义字符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 单双引号</span></span><br><span class="line"><span class="comment">### 拼接字符串</span></span><br><span class="line">your_name=<span class="string">"woo"</span></span><br><span class="line">greeting=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment">### 获取字符串长度</span></span><br><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出：4</span></span><br><span class="line"><span class="comment">### 提取子字符串</span></span><br><span class="line">string=<span class="string">"alibaba is a great company"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span>  <span class="comment">#输出：liba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 查找子字符串</span></span><br><span class="line"><span class="comment"># 找出字母i在这句话中的位置，要在linux下运行，mac下会报错</span></span><br><span class="line">string=<span class="string">"alibaba is a great company"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> is`  <span class="comment">#输出：3</span></span><br></pre></td></tr></table></figure></p><h3 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 在Shell中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：</span></span><br><span class="line"><span class="comment"># 数组名=(值1 值2 ... 值n)</span></span><br><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"><span class="comment"># 也可以单独定义数组的各个分量,可使用不连续的下标，且下标范围没有限制</span></span><br><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取数组</span></span><br><span class="line"><span class="comment"># 一般格式 $&#123;数组名[下标]&#125;</span></span><br><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br><span class="line"><span class="comment"># 使用@符号可以获取数组中的所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数组的长度</span></span><br><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Shell基本运算符"><a href="#Shell基本运算符" class="headerlink" title="Shell基本运算符"></a>Shell基本运算符</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">`expr <span class="variable">$a</span> + <span class="variable">$b</span>` 加法 结果为 30。</span><br><span class="line">`expr <span class="variable">$a</span> - <span class="variable">$b</span>` 减法 结果为 -10。</span><br><span class="line">`expr <span class="variable">$a</span> \* <span class="variable">$b</span>` 乘法 结果为 200。</span><br><span class="line">`expr <span class="variable">$b</span> / <span class="variable">$a</span>` 除法 结果为 2。</span><br><span class="line">`expr <span class="variable">$b</span> % <span class="variable">$a</span>` 取余 结果为 0。</span><br><span class="line">`a=<span class="variable">$b</span>`  赋值 将变量b的值赋给 a。</span><br><span class="line">`[<span class="variable">$a</span> == <span class="variable">$b</span>]` 相等 结果返回 <span class="literal">false</span></span><br><span class="line">`[<span class="variable">$a</span> != <span class="variable">$b</span>]` 不相等 结果返回 <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Shell里的流程控制"><a href="#Shell里的流程控制" class="headerlink" title="Shell里的流程控制"></a>Shell里的流程控制</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># if else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">command1</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 写成一行（适用于终端命令提示符）</span></span><br><span class="line"><span class="keyword">if</span> `ps -ef | grep ssh`;  <span class="keyword">then</span> <span class="built_in">echo</span> hello; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for while</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前目录名：</span></span><br><span class="line">basename `<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PWD##*/&#125;</span></span><br><span class="line"><span class="comment"># 获取当前 git 分支名</span></span><br><span class="line">git_name=$(git symbolic-ref --short HEAD)</span><br></pre></td></tr></table></figure><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.8 星期  ： &lt;/p&gt;


&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;!-- [Shell - 编程基础](http
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>别有用心的Ts（关于ts的认识）</title>
    <link href="http://yoursite.com/sum/others/%E5%85%B3%E4%BA%8Ets%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/sum/others/关于ts的认识/</id>
    <published>2020-07-26T00:00:00.000Z</published>
    <updated>2020-10-05T10:11:19.772Z</updated>
    
    <content type="html"><![CDATA[<p>typescript 文档：&lt;&gt;<br><a id="more"></a> </p><p>以下，一个不愿接受，没有接触，也不会使用ts 的 非专业人员 想法。<br>就是喜欢浪，代码已经手动规范。而且也不需要再编译<br><!-- 学不动。在前端高速发展的时候，还得懂点后端接口（不然怎么和后端同学切磋），服务端配置，集成部署。小程序，（快应用），跨端开发。其他新技术现在要求挺高的，还要懂各种计算机，编译，框架 等原理。来不及学 加班，都写不完的需求。还不是bug，项目都没得优化--></p><p style="text-align:right">2020.7.26 星期日 17:13</p><h3 id="什么"><a href="#什么" class="headerlink" title="什么"></a>什么</h3><p>声明或定义 变量类型。<br><del>其实并没有拓展js语法，比如：接口，泛型，等。</del></p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>本质上，并不会成为一个新语言。除非直接编译成c或者二进制。</p><p>js 需要的语法，在ECMA 会慢慢完善。<br>ts 徒增一层编译，最后还是要转成js，编译效率还不错吗？。<br>虽然ECMA 也是经babel 转js，但ECMA 还是js的语法，bable只是兼容。 </p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>java，c 等也需要编译成二进制 才可以被计算机识别。<br>ts 是编译成它原始的语言js，而非二进制。不如webassembly 等。</p><h3 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h3><p>js本是弱类型。ts 要转成强类型，</p><ol><li>代码中变量类型（函数参数，返回）等是明确了，代码的语义是明确了。<br>但是代码量却增加，有时候还需要提前定义/声明复杂的接口。</li></ol><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>js本是在浏览器环境直接执行的，不需要太多框框。<br>ts 写为强类型真的合适吗？</p><p>前端飞快发展，各种框架，应用场景 越来越丰富。<br><!-- 比如：vue，react，angular；各种小程序框架(weex, ~~mpvue~~，uniapp，tora，chamleon)；跨端开发，electron,rn, flutter；快应用；光vue和react 生态就有许多应用以及服务端的浸入：express,koa,egg游戏开发：webassembly, 白鹭还有工程化：webpack，rollup，glup，grunt；ci/cd --></p><p>typescript 也想分一杯羹。觉得js 不如其他高级语言，比如java等没有类型声明，这些强迫者觉得不声明类型，这个语言就是低级语言，bug就会多。</p><p>难道用高级语言，声明了变量类型（也没有多高级）bug 就会减少吗？</p><p>在（前端）开发的基本背景下：<strong>开发时间短；迭代周期快；需求变化快；项目生命短；人员变换多；</strong><br>即使在大公司，也不能确定他们的项目代码是符合开发标准的。<br>尽管后端的接口声明了返回的类型，但是经常是不确认的。一个空值，可能是null，undefined,[],{},0,’’(用不同的json 转换包，返回的不尽相同)。  前端仍然需要做许多判断：!= null，isArray， {}； 接口状态不是 数字，就是字符串（因为要对多个平台接口，每个接口规范不同，写的人的风格也不一样）。</p><p>这时候，根本不能明确定义一个 response 就是 Object 或者number。也有可能是null，或者字符串。<br>为了声明一个想要的变量类型，需要多兼容一下接口可能返回的所有未知的类型。</p><p>我见过的大多数后端接口，不会按照前端想要的格式返回：空对象就是不要返回null，或者了需要吞掉返回的字段，直接返回{}。（我们这接口就是这样的，你们前端自己判断/转一下吧，我这还有其他接口）</p><p>那些接受了强类型的人，非要把js 变成ts。这样可以解决什么问题呢？<br><!-- 写一堆类型声明；然后为了某个兼容，多写一些增加阅读量的代码；经常变更，再在声明里重写。 --></p><p>如果不能完全发挥ts 的优势；或者使用不熟练，只会使项目越来越坨。</p><p>###　解决<br>js语言 相较其他语言是有许多问题。<br>每个语言都会有问题，但都是慢慢在变得完善。</p><p>注解是个好东西。<br>注释更是好东西。可以标注 数据类型，是否可选，变量含义，解释代码逻辑 等。<br>不用类型声明，用注释；或者变量赋值时的默认值，变量名，都可以很好的定义变量类型。</p><p>如果这点约定做不到，即使是强类型声明变量类型。也会写错，照样编译不过。<br>如果能做到，还需要强类型的限制，丢掉语言的灵活性吗。</p><p>如果大家都能照着约定/规范 开发就好了</p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ol><li>强制规范 语言。不同的开发人员，新手 不写错误的代码。</li><li>代码 可读性 更强。</li><li>bug 更少？？</li></ol><p>但愿如此。<br>如果一个新手，看一个number类型；觉得他现在要添加一个string 类型，就会加一个类型声明上去。<br>再来一个人，觉得不好；也要扩展，最后可能 就是any。<br>大抵如此。都any 容易一些。如果只是单一的number 声明类型也不是很重要。</p><p>如果还有人想抽离一个接口出来，那他可能需要更新的地方不止一处了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果你正在开发一个新的项目<br>而且这个项目会持续较长的时间，时间充裕，对稳定性要求比较高<br>成员间都能熟悉使用ts，如果有新人能够接受学习过程，并规范后续新人的开发<br>可以使用ts</p><p>有优点自是不必说的。<br>仍然要注意 规范和 优化。<br>因为本身就是做了一个规范；而且需要编译，项目大当然需要优化了。不可能不编译直接使用吧</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>如果js 中真需要 强类型，它自会支持的。<br>也许可能是新的一种语言，有他自己的适用标准。<br>但觉不会是ts。</p><p>java 的出现，是因为c 复杂。<br>js 就简单多了，为什么要多加一层ts。徒增复杂，实际意义也不大。<br>ts 不比coffe script 强多少（只是坐上了js的快车；也没接触过coffee）<br>为什么会有一种ts 很有必要，和火的感觉呢？</p><p>是不是它别有用心呢？<br>搅乱js的市场。盘子这么大，好搅拌吗</p><p>一切把简单的东西 复杂化，都是作恶；如果它没有解决任何实际性问题，就是十恶不赦。<br>我们总结出的规律，原则/框架，法律 等，都是想要把问题简单化。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>强类型 确实 很好。<br>但在多数前端开发中，可能是鸡肋。不如弃之<br>学习成本/回报率低 </p><p>个人非科班，开始学java 感觉约束性太强。<br>转向js，就喜欢 浪。</p><p>如果你有很好的开发习惯，自然会利用语法的灵活性。而不是肆意而为<br>而没有，强类型也救不了。只会越写越糟</p><p style="text-align:right">19:18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;typescript 文档：&amp;lt;&amp;gt;&lt;br&gt;
    
    </summary>
    
      <category term="thinking" scheme="http://yoursite.com/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端自适应-单位</title>
    <link href="http://yoursite.com/sum/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94-%E5%8D%95%E4%BD%8D/"/>
    <id>http://yoursite.com/sum/css/移动端自适应-单位/</id>
    <published>2020-07-15T00:00:00.000Z</published>
    <updated>2020-07-17T09:10:42.750Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.7.15 星期三  19：34 </p><p>在pc端或者要求不是特别高的情况，可以是百分比，rem/em。或者配合媒体查询。<br>极少用到js。在移动端可能配合js动态修改字体大小的情况比较多。<br>新的单位vw，vh等在移动端布局也可以尝试，是不错的选择。</p><h2 id="移动端单位自适应"><a href="#移动端单位自适应" class="headerlink" title="移动端单位自适应"></a>移动端单位自适应</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>响应式布局的实现依靠媒体查询（ Media Queries ）来实现，选取主流设备宽度尺寸作为断点针对性写额外的样式进行适配，<br>但这样做会比较麻烦，只能在选取的几个主流设备尺寸下呈现完美适配。</p><!-- \#1 [CSS3自适应字体大小(vw vh)](https://www.cnblogs.com/stephenykk/p/4476704.html) --><p>平滑过渡方案。<br>$_PS: 感觉有点华而不实<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>:font-size <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1200px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">39px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1100px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">38px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1000px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">37px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">900px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">36px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">35px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">700px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">34px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">600px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">33px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">32px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">400px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">31px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">300px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">30px</span>; &#125;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>即使是通过 rem 单位来实现适配，也是需要内嵌一段脚本去动态计算根元素大小。</p><p>rem在移动端应用可参考淘宝的页面<a href="http://m.taobao.com" target="_blank" rel="noopener">http://m.taobao.com</a> (html的font-size通过动态计算获取)<br>页面基准320px(20px),html font-size值的计算：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ele=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>],  </span><br><span class="line">     size=<span class="built_in">document</span>.body.clientWidth/<span class="number">320</span>*<span class="number">20</span>;  <span class="comment">// $_PS: 这里系数乘以10，以10做基底/数也是可以的</span></span><br><span class="line">ele.style.fontSize=size+<span class="string">"px"</span></span><br></pre></td></tr></table></figure></p><p>注：需设置meta缩放比1:1<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;</code><br><!-- $_#1 --></p><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw,vh"></a>vw,vh</h3><p>利用视口单位<br>实际可利用less或scss写函数/计算 编译，或者postcss 自动转化。<br>$_PS: css 有表达式，不知道是否可以利用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-px-to-viewport-opt'</span>: &#123;</span><br><span class="line">      viewportWidth: <span class="number">375</span>,</span><br><span class="line">      viewportHeight: <span class="number">667</span>,</span><br><span class="line">      unitPrecision: <span class="number">3</span>,</span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>,</span><br><span class="line">      selectorBlackList: [<span class="string">'.ignore'</span>, <span class="string">'.hairlines'</span>],</span><br><span class="line">      minPixelValue: <span class="number">1</span>,</span><br><span class="line">      mediaQuery: <span class="literal">false</span>,</span><br><span class="line">      exclude: <span class="regexp">/(\/|\\)(node_modules)(\/|\\)/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以iphone7尺寸@2x 750像素宽的视觉稿为例</span></span><br><span class="line"><span class="keyword">@function</span> vw(<span class="variable">$px</span>) &#123;</span><br><span class="line">    <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="number">750</span>) * <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设一个div元素在视觉稿中，宽度为120px，字体大小为12px</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: vw(<span class="number">120</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: vw(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2><p>百分比大小<br>流式布局/栅栏(网格)</p><p>$_PS: 静态布局，响应式布局，自适应布局，流式布局（和响应式布局有点联系），弹性布局（Flex），网格布局（Grid）<br><!-- 响应式布局可以是流式布局，也可以式媒体查询流式布局不一定要在响应式布局中，在静态布局中也有使用 --></p><p style="text-align:right"> 18:44</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.7.15 星期三  19：34 &lt;/p&gt;


&lt;p&gt;在pc端或者要求不是特别高的情况，可以是百分比，rem/em。或者配合媒体查询。&lt;br&gt;极少用到js。在移动端可能配合js动态修改字体大小的情况比较多。&lt;br&gt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/sum/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
