<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-05T10:02:35.465Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨端开发</title>
    <link href="http://yoursite.com/sum/jsplus/%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/sum/jsplus/跨端开发/</id>
    <published>2020-09-29T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.465Z</updated>
    
    <content type="html"><![CDATA[<p>多个框架，调研太累。<br>直接uniapp Hello world.且目前并无上线的大项目需求<br>$_PS：市场自然会做选择</p><p>uni-app, taro, mpvue, wepy, chamelemeon；mpx，Remax; kbone<br>移动端：rn，flutter，weex，</p><p style="text-align:right"> 2020.9.29 星期二  16:06： </p><h2 id="基于uni-app的对比"><a href="#基于uni-app的对比" class="headerlink" title="基于uni-app的对比"></a>基于uni-app的对比</h2><p>身体缺很诚实</p><h3 id="原生痛点"><a href="#原生痛点" class="headerlink" title="原生痛点"></a><del>原生痛点</del></h3><p>$_PS: 见[原生/框架]<br>单独 微信小程序开发，就已经有很多痛点和 现代开发者不合</p><ol><li>微信新语法：wxml,wxss,wjs，.json。 </li><li>??vue ??react ??html。有学习成本</li><li>现代工具/工程化：npm，webpack 打包，less编译，组件（复用）等<br>受平台限制。升级等</li></ol><p>只一端。用原生是最好的。专注<br>可以尝试最新的更新，随时更进最新的变动</p><h4 id="人效"><a href="#人效" class="headerlink" title="人效"></a>人效</h4><p>实际业务中，老板永远不满足。<br>总想要低成本高效益。<br>各个生态圈，平台语言和限制</p><p>小程序只在一端，如果可以运行在多端，或者h5；<br>又或者用现代开发模式：工程化。<br>多端api兼容，服务/数据 同一</p><h3 id="uni-app-卖瓜"><a href="#uni-app-卖瓜" class="headerlink" title="uni-app 卖瓜"></a>uni-app 卖瓜</h3><h4 id="小程序开发：用原生还是选框架"><a href="#小程序开发：用原生还是选框架" class="headerlink" title="小程序开发：用原生还是选框架"></a>小程序开发：用原生还是选框架</h4><p><a href="https://ask.dcloud.net.cn/article/35947" target="_blank" rel="noopener">小程序开发：用原生还是选框架（wepy/mpvue/taro/uni-app）– 第1季 </a><br>小程序跨端框架全面测评： <a href="https://github.com/dcloudio/test-framework" target="_blank" rel="noopener">https://github.com/dcloudio/test-framework</a><br>本项目分别使用微信原生版、wepy版、mpvue版、taro版、uni-app版、chalemeon版，各自开发一个仿微博小程序首页的复杂长列表，支持下拉刷新、上拉翻页、点赞功能。</p><p>该项目主要用于两项测试：<br>1）跨端支持度如何：是否真能实现各框架宣传的那样，一次开发、多端发布？真的不需要二次开发？<br>2）跨端框架性能如何：跨端框架基本都是compiler + runtime模式，引入的runtime是否会降低运行性能？尤其是与原生微信小程序开发相比性能怎么样？</p><h4 id="选型评估"><a href="#选型评估" class="headerlink" title="选型评估"></a>选型评估</h4><p># <a href="https://uniapp.dcloud.io/select" target="_blank" rel="noopener">uni-app选型评估23问</a></p><h3>跨/多端</h3><!-- \# [跨端开发框架深度横评之2020版](https://juejin.im/post/6844904118901817351) --><p># <a href="https://ask.dcloud.net.cn/article/37155" target="_blank" rel="noopener">跨端开发框架深度横评之2020版</a><br>这一年 mpvue 停止更新，Taro开始探索 taro next，uni-app 产品和生态持续完善，微信新推出了支持H5和微信小程序的 kbone 框架…<br>所以，本次评测的对象（按发布时间排序）：<br>微信原生开发<br>taro，京东凹凸实验室出品，官网地址：<a href="https://taro.jd.com/" target="_blank" rel="noopener">https://taro.jd.com/</a><br>uni-app，DCloud出品，官网地址：<a href="https://uniapp.dcloud.net.cn" target="_blank" rel="noopener">https://uniapp.dcloud.net.cn</a><br>kbone，腾讯微信团队出品，官网地址：<a href="https://wechat-miniprogram.github.io/kbone/docs/" target="_blank" rel="noopener">https://wechat-miniprogram.github.io/kbone/docs/</a></p><blockquote><p>taro 和 uni-app 相对比较成熟，支持主流的所有平台。kbone 只支持微信小程序和 Web 端。我们重点比较一下 taro 和 uni-app。</p></blockquote><p>$_PS: 移动端uni-app更强三些。 包括h5，taro 弱些</p><p>不过作为一篇评测文章的结语，我们还是要给出自己的建议：<br>如果你熟悉React，不懂Vue.js，推荐Taro；<br>如果你熟悉Vue.js，则推荐 uni-app；<br>如果你已经有H5代码，只想增加微信小程序平台，并且对性能要求不高，可以考虑kbone；<br>如果你的业务涉及多端，更推荐 uni-app；<br>如果你希望通过 serverless 方案快速上线业务，推荐 uni-app。</p><h3>移动端</h3><p># <a href="https://ask.dcloud.net.cn/article/36083" target="_blank" rel="noopener">flutter、rn、uni-app比较 </a><br>在3大主流渲染引擎里，webview、react native/weex、flutter，复杂度依次降低，渲染性能依次上升。（uni-app是双渲染引擎，webview和weex都内置了，随便开发者使用切换） </p><p>$_PS: 如果要多端都做，尤其是app端，支持的能力 和 开发人效 上也是要考虑一下。</p><h3>跨/多小程序</h3><p># <a href="https://juejin.im/post/6844903800138891278" target="_blank" rel="noopener">小程序多端框架全面测评</a><br>凹凸实验室 2019年03月20日 此时还是期待1.3</p><p># <a href="https://ask.dcloud.net.cn/article/35867" target="_blank" rel="noopener">跨端框架深度评测：微信原生、wepy、mpvue、uni-app、taro、chameleon</a></p><p>1）如果你只开发微信小程序，不做多端，uni-app是更好的选择，<br>除非你有兴趣手动优化原生小程序的代码，<br>或者对react非常熟悉不愿意学习vue也可以使用taro。<br>另外注意，使用微信原生开发，对于webpack、各种预处理器、工程化流程的支持很不好，大公司很少用原生微信开发，还是用框架开发更合适。<br>2）如果你主要为了统一各家小程序，uni-app仍然是最好的选择，taro次之。<br>3）如果你还需要跨端到H5侧，那么uni-app在跨端兼容方面会让你更省心。<br>4）如果你还需要跨端到App侧，那么uni-app是唯一可商用的选择。</p><p></p><h3>原生/框架</h3><br><a href="https://ask.dcloud.net.cn/article/36484" target="_blank" rel="noopener">使用uni-app开发小程序，比直接原生开发小程序好在哪里？</a><p></p><p>$_PS: 所有框架都表述用框架比自己原生性能优，同mpx：setData 优化。好比用vue/react ，自己js 或者操作dom</p><h3 id="DCloud"><a href="#DCloud" class="headerlink" title="DCloud"></a>DCloud</h3><p>上述评测/文章内容分析<br>机制/原理 上比较客观。但涉及对比，难免有些主观情感：<br>夸大成分有些，或者强说优；有的缺陷/不足也没有指出，或者觉得影响不大<br>也有些失实/过时的内容</p><ol><li>未提及自身也有很多问题未修复</li><li>go语言的看法。至少没有那么悲观</li><li>性能测试只是一个例子。不能覆盖所有/线上（真实）案例</li><li>许多小程序自身的问题没解决。或许这不在对比/框架的考虑内。比如：发布审核</li></ol><h4 id="公司加持"><a href="#公司加持" class="headerlink" title="公司加持"></a>公司加持</h4><p>符合国情的多端方案，包容小程序和快应用；极少的可同时支持h5。<br>而其他开源/主流使用的工具，框架等多为国外</p><p>很早就涉足编辑器（H5builder），跨端方案解决<br>面向开发人员开发；与开源项目不同<br>属公司的产品，极少可能丢掉。<br>也有人/同行业者参与进去<br>是（国内）公司的生态，不牵扯多家巨头的纠纷</p><p>行业/业届影响力就不清楚了</p><h2 id="h5Editor-mpx"><a href="#h5Editor-mpx" class="headerlink" title="h5Editor + mpx"></a>h5Editor + mpx</h2><p>小程序动态编译方案 - zhangyan</p><p>优势：</p><ol><li>可视化编辑</li><li>一套代码。支持h5 及小程序。扩展其他小程序也不是不可</li><li>公司项目/自己开发。问题都好解决</li><li>动态编译。没有审核时间问题</li></ol><p>风险：</p><ol><li>是否会被小程序官方禁止掉？<br>概率比较小。使用自定义组件，没有不合规处</li><li>性能方面。多注意，优化方案。<br>也应该不会成为问题。也无太复杂项目，基本都是单一页面<h3 id="kbone对比"><a href="#kbone对比" class="headerlink" title="kbone对比"></a>kbone对比</h3></li></ol><h2 id="各框架说明"><a href="#各框架说明" class="headerlink" title="各框架说明"></a>各框架说明</h2><p>20200929<br>name | star | issue<br>–| –| –<br>taro | 27k | 690/5465<br>uni-app | 25.9.4k | 573/1391<br>kbone | 3.5k | 18/262<br>– | – |<br>mpx | 2.4k | 17/299<br>chameleon | 7.8k | 122/270<br>weex | 17.6k | 535/1310<br>weex-apache | 13.8k | 195/695</p><p>$_PS: chameleon怪不得不温.听闻问题太多</p><h3 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h3><p>uni-app: <a href="https://github.com/dcloudio/uni-app" target="_blank" rel="noopener">https://github.com/dcloudio/uni-app</a></p><h3 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h3><p>Taro: <a href="https://github.com/NervJS/taro" target="_blank" rel="noopener">https://github.com/NervJS/taro</a><br>是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5 等应用。<br>react：jsx 偏好<br>taro3 支持vue<br>目前 Taro 3 可以支持转换到 微信/京东/百度/支付宝/字节跳动/QQ 小程序 以及 H5 端。<br>$_PS: 其他几个端表现并未可知。</p><h3 id="kbone"><a href="#kbone" class="headerlink" title="kbone"></a>kbone</h3><p>kbone: <a href="https://github.com/Tencent/kbone" target="_blank" rel="noopener">https://github.com/Tencent/kbone</a><br>kbone 是一个致力于微信小程序和 Web 端同构的解决方案。</p><h3 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h3><p>mpvue：<a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/mpvue</a><br>mpvue 是一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。<br><!-- Vue.js in mini program --><br>已经无人维护, 心电图直线</p><p>吃瓜easy-react：<a href="https://github.com/Meituan-Dianping/mpvue/issues/1780" target="_blank" rel="noopener">亲爱的美团团队，请问框架还在维护中吗？望告知 #1780</a></p><h3 id="WePY"><a href="#WePY" class="headerlink" title="WePY"></a>WePY</h3><p>WePY: <a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">https://github.com/Tencent/wepy</a><br>  是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。框架的细节优化，Promise，Async Functions 的引入都是为了能让开发小程序项目变得更加简单，高效。<br><!-- 发音: /'wepi/, 估计取自 happy --><br>类Vue<br>同无人维护</p><h3 id="chameleon"><a href="#chameleon" class="headerlink" title="chameleon"></a>chameleon</h3><p>Chameleon: <a href="https://github.com/didi/chameleon" target="_blank" rel="noopener">https://github.com/didi/chameleon</a><br>简写CML，中文名卡梅龙；中文意思变色龙，意味着就像变色龙一样能适应不同环境的跨端整体解决方案。</p><p>支持平台：web、微信小程序、支付宝小程序、百度小程序、android(weex)、ios(weex)、qq 小程序、字节跳动小程序、快应用、持续更新中</p><p><a href="https://github.com/didi/mpx/issues/157" target="_blank" rel="noopener">同样是didi出品的chameleon和mpx具体什么区别？该如何选择？</a></p><h3 id="mpx"><a href="#mpx" class="headerlink" title="mpx"></a>mpx</h3><p>Mpx: <a href="https://github.com/didi/mpx" target="_blank" rel="noopener">https://github.com/didi/mpx</a><br>是一款致力于提高小程序开发体验和开发效率的增强型小程序框架，通过Mpx，我们能够高效优雅地开发出具有极致性能的优质小程序应用，并将其输出到各大小程序平台和web平台中运行。<br>增强型小程序开发框架 区别于其他编译型</p><p>多平台增强 (支持在微信、支付宝、百度、qq、头条小程序平台中进行增强开发)<br>跨平台编译 (支持以微信为base，将一套代码转换输出到支付宝、百度、qq、头条小程序平台和 web平台 中运行)</p><p><a href="https://github.com/didi/mpx/issues/362" target="_blank" rel="noopener">请问怎么支持h5呢?</a><br>$_PS: 看了是小程序增强。如果支持h5改动较大，所以也没有看到支持h5的情形</p><h3 id="Remax"><a href="#Remax" class="headerlink" title="Remax"></a>Remax</h3><h3 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h3><p>Weex: <a href="https://github.com/alibaba/weex" target="_blank" rel="noopener">https://github.com/alibaba/weex</a><br>  <a href="https://github.com/apache/incubator-weex" target="_blank" rel="noopener">https://github.com/apache/incubator-weex</a><br>A framework for building Mobile cross-platform UI.<br><!-- $_PS:迁移至 Apache 基金会 --></p><h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><h3 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h3><p>移动端。<br>语言：dart 。学习成本</p><h3 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h3><p>桌面端</p><h2 id="选品"><a href="#选品" class="headerlink" title="选品"></a>选品</h2><p>业务：当前项目；未来项目<br>  基本5-20年没问题。（黑猫白猫，能抓老鼠就是好猫）<br>成本：学习/开发/维护成本；增强；新手 || 研发人效（研发速度）<br>生态：文档/资源，框架-ui，丰富组件等，开发者，活跃态； 开发工具<br>  所属：维护-有人继承/迭代<br>  跨端圆桌会议–规范 并没有。未来<br>案例：线上成熟方案<br>协议：开源协议<br>安全：包括是否会被限制使用；源码泄露<br>性能/用户体验：越快越好，编译/运行时；体积<br>解决方案/能力：越强越好。限制越少。 比如云开发<br>  只能能力/api 多，且限制少；兼容等已内部处理<br>扩展：或者替换成本较低。迁移</p><!-- \# [前端技术未来三年前瞻性思考](https://mp.weixin.qq.com/s/wYbj9d3bVExfu3owx7sJuQ) --><p>业务场景、用户体验、研发速度、维护成本四个维度来看框架等前端技术，大部分的技术点都能找到合适的位置，<br>解的问题是如何快速上线和维护满足业务的好用的产品。</p><blockquote><p>这部分解如何快速完成研发，并交付上线。<br>产品不仅要开发，还要维护，何况框架和依赖库还在不断升级。</p></blockquote><h3 id="其他因子"><a href="#其他因子" class="headerlink" title="其他因子"></a>其他因子</h3><p>typescrpt 并不在此次的考量范围（个人偏好）<br>$_PS: 有太多不温不火的语言；不乏google加持</p><p>未来变数：<br>vue3 可以支持多种/自定义编译实现<br>taro3 和react的走向可以持续观察<br>react native 已被airbin 抛弃</p><h3 id="是否需要-搭建开源项目"><a href="#是否需要-搭建开源项目" class="headerlink" title="是否需要/搭建开源项目"></a>是否需要/搭建开源项目</h3><p>大型互联网公司发布的开源框架，是不是更有影响力？<br>见 <a href="https://uniapp.dcloud.io/select" target="_blank" rel="noopener">uni-app选型评估23问</a> 结尾</p><p>创新项目可<br>有能力，和精力<br>项目或其他支持<br>可持久；影响力</p><h2 id="不可避免"><a href="#不可避免" class="headerlink" title="不可避免"></a>不可避免</h2><p>同志仍需努力</p><p>webpack 项目构建，优化<br>依赖组件/库 能力/问题<br>小程序审核发布问题。只是编译了<br>多端兼容，虽然差量编译。但是业务/代码少不了了<br>服务端支持，数据问题<br>  虽有云开发，但还是公司后端接入妥当，也是必要<br>原生能力支持。<br>  虽然有h5+，但是公司自有app 能力也可以接入<br>CI/CD 。虽然编辑器操作方便，但是仍然需要CI/CD<br>学习成本。还是需要学习uni-app开发，多端小程序也不可不了解</p><!-- ### 服务/数据共享### CI/CD ### 多端（代码）uni-app是多端写在一个基础项目下，差异使用条件编译来管理。这有个巨大的好处是一套工程代码，升级时可多端同时更新。如果把不同端的项目分开，那么维护升级时非常麻烦，无法方便同步升级。 --><p style="text-align:right">22；02 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多个框架，调研太累。&lt;br&gt;直接uniapp Hello world.且目前并无上线的大项目需求&lt;br&gt;$_PS：市场自然会做选择&lt;/p&gt;
&lt;p&gt;uni-app, taro, mpvue, wepy, chamelemeon；mpx，Remax; kbone&lt;br&gt;移动端：
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Mongo操作</title>
    <link href="http://yoursite.com/sum/ser/mongo%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/sum/ser/mongo操作/</id>
    <published>2020-09-27T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.355Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.27 星期  ： </p><h2 id="安装-mac"><a href="#安装-mac" class="headerlink" title="安装-mac"></a>安装-mac</h2><p>brew （失败）<br>直接下载文件<br>配置环境变量（vim ~/.bash_profile; source ~/.base_profile）<br>启动：mongod –port 27017</p><p>安装位置：<del>/usr/local/lib</del>  || 或者/usr/local/<br>(homebrew安装python也在这个位置.)<br>不放到local下，为了local里面的文件做区分</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建配置文件（下载文件没有找到配置文件）<br>/usr/local/etc/mongo.conf<br>(redis,nginx (homebrew)安装也在这个位置)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">port=27017</span><br><span class="line">dbpath=/usr/local/var/mongodb-db</span><br><span class="line">logpath=/usr/local/var/log/mongodb/mongo.log</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">Auth=true</span><br><span class="line"></span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line"># journal=true</span><br><span class="line"> </span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=false</span><br></pre></td></tr></table></figure></p><p>记得修改文件夹权限<br><code>sudo chmod -R 777 /usr/local/var/mongodb-db/</code><br>sudo chmod -R go+w /data/db    // 取得读写权限</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>作用：在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。<br>不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个”–fork”参数即可，<br>值得注意的是，用到了”–fork”参数就必须启用”–logpath”参数。如下所示</p><h3 id="brew安装区别"><a href="#brew安装区别" class="headerlink" title="brew安装区别"></a>brew安装区别</h3><p>brew安装后文件位置在<br>/usr/local/Cellar/pgk/1.12.3/*</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/<span class="built_in">local</span>/etc/mongo.conf <span class="comment">## mac</span></span><br><span class="line"><span class="comment"># mongod --config D:/program/mongodb/mongo.conf ## windows</span></span><br><span class="line"><span class="comment">## mongod其他参数：--auth, --dbpath, --logpath, --fork，</span></span><br><span class="line">  <span class="comment">## ---master, --slave,-source</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod --master --slave -dbpath=/data/db/master -port=11536 --<span class="built_in">source</span> 127.0.0.1:11537</span><br><span class="line"><span class="comment">## 进入mongo</span></span><br><span class="line">mongo --port <span class="comment"># -u,-p,</span></span><br></pre></td></tr></table></figure><h2 id="添加auth权限"><a href="#添加auth权限" class="headerlink" title="添加auth权限"></a>添加auth权限</h2><p><a href="https://www.cnblogs.com/imgss/p/10274813.html" target="_blank" rel="noopener">MongoDB加auth权限</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 初始化mongo用户</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod -f  /etc/mongod.conf</span><br><span class="line">mongo 127.0.0.1:27017</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user:<span class="string">'admin'</span>,<span class="built_in">pwd</span>:<span class="string">'admin'</span>,roles:[&#123;role:<span class="string">"dbAdminAnyDatabase"</span>,db:<span class="string">"admin"</span>&#125;,&#123;role:<span class="string">"readWriteAnyDatabase"</span>,db:<span class="string">"admin"</span>&#125;,&#123;role:<span class="string">"userAdmin"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"userAdmin"</span>,db:<span class="string">"ares"</span>&#125;,&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"ares"</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">db.system.version.update(&#123;<span class="string">'_id'</span>:<span class="string">'authSchema'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;<span class="string">'currentVersion'</span>:3&#125;&#125;)</span><br><span class="line">db.system.version.find()</span><br><span class="line"></span><br><span class="line"><span class="comment">## auth方式重启mongo并创建xes_fe用户</span></span><br><span class="line">lsof -i:27017 <span class="comment">#// 查询mongod的PID</span></span><br><span class="line"><span class="built_in">kill</span> 9 PID  <span class="comment">#// 终止mongod</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/mongod -f  /etc/mongod.conf --auth  <span class="comment">#// 重启</span></span><br><span class="line"></span><br><span class="line">mongo 127.0.0.1:27017</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">'admin'</span>, <span class="string">'admin'</span>)</span><br><span class="line"></span><br><span class="line">use ares</span><br><span class="line">db.createUser(&#123;user:<span class="string">'root'</span>,<span class="built_in">pwd</span>:<span class="string">'root'</span>,roles:[&#123;role:<span class="string">'readWrite'</span>,db:<span class="string">'ares'</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>后续服务端可以通过root 连接mongo数据库 进行操作</p><!-- db.auth('xes', 'big_root') --><p>lsof -i:27027<br>ps -ef | grep mongo</p><h2 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h2><p><a href="https://www.cnblogs.com/ruizhang3/p/6539730.html" target="_blank" rel="noopener">MongoDB的几种同步方式</a></p><h3 id="1、冷拷贝"><a href="#1、冷拷贝" class="headerlink" title="1、冷拷贝"></a>1、冷拷贝</h3><p>这种方式对数据同步的完整性保持的最好，同时也非常方便，但是会影响服务器的使用。<br>首先关闭源数据库服务，之后使用远程复制命令将数据文件全量拷贝到目标服务器的数据目录下，再启动目标服务器。<br>如果不关闭源数据库，将会导致部分数据没有写到数据文件中，有很大概率目标服务器无法启动。</p><h3 id="2、使用mongodump"><a href="#2、使用mongodump" class="headerlink" title="2、使用mongodump"></a>2、使用mongodump</h3><p>mongodump是mongodb官方提供的导出工具，使用起来非常简单，一个例子如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump <span class="comment">--host example.net --port 37017 -o /opt/backup/mongodump -d dbname -c collectionname</span></span><br></pre></td></tr></table></figure></p><p>通过host port参数指定主机，通过o参数指定输出目录，通过d参数指定数据库，通过c参数指定集合<br>mongodump会自动建立备份目录，并按照数据库，集合划分目录与文件。</p><p>对应的，官方还提供了mongorestore程序来恢复备份，命令类似于mongodump。使用相同的参数指定主机，数据库，集合等信息，最后一个参数默认为用来恢复的数据文件目录即可。</p><p>还有几个需要注意的问题：<br>mognodb不会导出索引数据，所以在恢复后需要重新建立索引。<br>备份过程中所做的修改可能无法写入到备份文件中，如果需要同步这一些数据，可以使用–oplog参数记录过程中的修改日志，同时需要服务器为副本集或主从模式，否则数据库不会产生oplog。</p><h3 id="3、增量备份"><a href="#3、增量备份" class="headerlink" title="3、增量备份"></a>3、增量备份</h3><p>当数据库为副本集的主节点或主从模式的主节点时，将会生成操作日志，mongodb会使用操作日志对各节点中的数据进行增量同步。<br>利用这一点，我们也可以对集群之外的节点做同样的增量同步。</p><p>oplog数据存储在数据库的local数据库下。<br>主要字段如下:</p><p>有了这些信息，我们就可以用代码模拟mongodb的同步模式，对操作日志实现重播，从而实现数据的增量同步。<br>基本代码逻辑如下：</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>带认证 <code>--authenticationDatabase admin</code><br><a href="https://blog.csdn.net/qq_37142346/article/details/82822726" target="_blank" rel="noopener">MongoDB数据备份与恢复以及安全认证</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongorestore <span class="comment">--db ares --host=127.0.0.1 --port=27027 --dir /Users/tal/working/202009231107/ares  --drop</span></span><br><span class="line">mongorestore <span class="comment">--db ares --host=127.0.0.1 --port=27027 --dir /Users/tal/working/202009231107/ares  --drop -u admin -p=admin --authenticationDatabase admin</span></span><br></pre></td></tr></table></figure></p><h3 id="bosn"><a href="#bosn" class="headerlink" title="bosn"></a>bosn</h3><p><a href="https://blog.csdn.net/weixin_45444133/article/details/105099806" target="_blank" rel="noopener">Mongodb开启认证时的备份和恢复（mongodump 和mongorestore ）</a></p><h4 id="bson-和json"><a href="#bson-和json" class="headerlink" title="bson 和json"></a>bson 和json</h4><p>mongodump导出的是bson格式，是二进制形式，不过可以使用mongo自带的bsondump命令查看里面的数据，<br>而mongoexport导出的则是文本，可以是csv、json格式。</p><p>JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。<br>JSON虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。</p><p>在一些mongodb版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能不会成功，具体要看版本之间的兼容性。<br>当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即mongoexport/mongoimport是一个可选项。跨版本的mongodump/mongorestore个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>Studio 3T for MongoDB</p><p># <a href="https://www.jianshu.com/p/038fe91affa2" target="_blank" rel="noopener">mongodb可视化工具 mac版 Studio 3T破解 (永久版)</a><br><code>sudo spctl --master-disable</code></p><p style="text-align:right"> </p><p>mongorestore –db ares –host=127.0.0.1 –port=27027 –dir /Users/wy/Documents/aimee/xesproject/可视化编辑平台/ares  –drop</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.27 星期  ： &lt;/p&gt;


&lt;h2 id=&quot;安装-mac&quot;&gt;&lt;a href=&quot;#安装-mac&quot; class=&quot;headerlink&quot; title=&quot;安装-mac&quot;&gt;&lt;/a&gt;安装-mac&lt;/h2&gt;&lt;p&gt;br
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Uniapp使用</title>
    <link href="http://yoursite.com/sum/jsplus/uniapp%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/sum/jsplus/uniapp使用/</id>
    <published>2020-09-24T00:00:00.000Z</published>
    <updated>2020-10-05T09:58:29.113Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX1+mgVkJl7sZLO1RhqfA/Eq/JuI5SfBx1vHq01fBkjMSQbKEwq+e6GU0SkvCkvftztwiT27cigjGITY8WEnSOKUQlc14ik74AFNKEDgbmdma4Bs0SXewQ4NgrHDqq7O/+VJz29+27XBvCAH76CQJOSJOBerZOG+tdJAap9rb96SRNRCExouF+jP/VgE1ARJbLfPGP8wlS3eaIB70Dwm2gUObfLBj4NIR8QmuHJNzRJ3qM909kdseEfgzRqpl6v8pWLPzg4YU4FtI3wVKHSjlfSCi0tXGXsgWJay9Q371uFbMh4whLWMhWUVR2MyvenhfGphIOgvpYm4LEl16lFmP/TJSqNr6foEpGlau3m+lYI20TqgyzhnLrDPY3E5vpyFWWDq+ySSTf6AH/L5UUohqkeXNrtV/CKaETEP6eJlWSOBeWXwAp4TGhs8EHxSwlIpRFENajRXfUY/rP7YXdkXNYUpUOksR5VXAm4bx2scwNr3z8fsQwsC6tCVovki5vpN3IsU7Q8Jq8QAbPpqp84n3mb3Gda6CoKzDRlliywoOhhOueCLNTCCD04+xskLmXvWEUR5V6ra5ju4SuKHDOh77Fyyu/LDh/R4NjbOSME4vH7L5yZ5N7GcLJyz28GLwmSFcLOGLRgL0OoQA+EDDAlqXe4N6GkPWnYEM5TVLgdlSGSoCb5jjJgiO9lx0kbl/FcJaGt2f8LJaya16VJDF1jWTTPXO8v5y5bBz5vIUz2e4UqSDFAGDrfCvTwdxsbKVF/EHXkyVZoqlnSWHQIAP23GtS5W+1uvv2wrK/vzqt4+w01hp1JmtjnGq222WXyx7dn7T1gQJK0b5Xewt22YGAjUk1nOmkqyuA3EJf2kJBb+ZRJrVEK/zJp+phWSr3fE9rVTw9yURcOKtOBNoEgOO2Gt1mo/tg0xwuh6fLIcjQmwgojzsOEIJrnXrK1BvOqKrd2IQdbpH5j1KfSYhr72GXs7LpZO+osgL1tCAKab4sUAz8H3c7flRMbTuF194jrttw+UygJqsevatF4q/s9CWSVGtqmVfYdWFTVzUzY7eV+k89bYYC1TVub/GoEbBoA42LMWG/yl2/ETTDTkTM/a1mDGKeXo6LIDchYvvqdESEHJB987lzoj9/4FVVue7x0GztXF5mB42F1iKoa/vOZhcil5haZgXvvDLThM1huXq6zvira+QZv4FFaGB7C8eOQ4PqW6PfO3LnGxbHcB9SLS/IWIMHvRa0KH730jEXbIKbuGbS/kuJpMhQtb27C96VGH5kjnzQ64JQX26eto+A4t9Zu46YZY6IWaa48S1N4cqlTDBlc04zSPPr3HA+RLmNQZ0f6Q8mJevttnRC/EkgFb/4jVaIYcccdP1ZDlTkRKdmCenLsOe5raHAwxpNdDPZden1l7tQlrE+dVU6xkSWSr1rYTOFsgHxhrulHwUt4N7Voj2Y0SEvO24Rg4bcqbnOhRiiFHXPg240wfa9CY/ZJ4vEwzPdW1oNSSd7Jc6kdclKQ1lAC7uS9r/e7Cd52kPxdXZYKO0rQbRKxetdwQITO9TjH3cvJ3sr51YL6YZLdIW60Ei3IeLmm+PTccpLQR+wfUu4IoBJVpKOVfGRyD7dycbo49+JHDsVa1M4TgaEE16SfM0277ptku1b1zwbHwMchG/mPFgxAiSpq3lpl/O1ReX3W/QFPDCNmfVtcSpDNzWJAUU5DsV0YwyMvL7SDtzJE3I/nkoaHpuYY2Iwvr9W8P1idGkJiClVajjoSBfIBo8a3qrMyeTvlUTxrLCc9YOuJbGdDRMQwI7wgXTcqloiDIRNaNhEhM+biMlkPcLDkQITOB01ODUOV5ENzwZ5SfHFvmPJgEZJ7aW7mytkVVKNU41yJbyF93ehchNLuJ/0hxF7VCgS1A0cV2MLuuNIL/AmfLQgALPnudaxTJVkwoeB4z4JORWH1+Ehictm5Z1FoVgNRwmLEWO9YTQFoZQEF3Evxn531X3evKMbOX017U1Z07nNm0dTurz20MxVT/CWdlEmBowfRYQICn8UvbQo43Ue+uIqPk0taaQomEopxI3nrphMlG9x+DQI6odbmcLI3wMWN83rw4h2PAx7VCbn8eqnm4EWUA6MfWQ7BmG6kVMonwK+DloIpkmhb9jOELPfYJnCTrxcm62yvgwjXzFDUFCCHX0vTrdKd/wMHSV3BHO4KnRCqzL90OIrC1p3x69L2YBx4zAQb3qCbEJkmpMpp43xIs5BJn6LFt3vQiQOJ4Q5v1J5GowBWD9jhRS/DFi+/kPg+IFVQbA/+/vxy7Zc7oVwmQ6Jxd0CHtWNxnjHDY1c2FMvF4Ghh90Z43p4g5dm5IwgqlzFm0si+mIzama9Ahm23KRqZu3vK/a66EyX6n+4H/1zYddE+3zYoS4uU/TfZnxhZIiwqAP2YCHPyznFJRtlYOG7QcPfTiEFdoYUzT24AHuRsrEYGHFJ9BcFX1NYsDQKVwny0LXx7mXtrH9L/dIbDGgBAdhzpb7WuXACkZ6JtBBODITa/5RXQy/YtBGzWrxjf9zTfpQewMccbuAXvWXihpDOc8QZmz/r1iEkUB04A==</div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>脚手架搭建</title>
    <link href="http://yoursite.com/sum/jsplus/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/sum/jsplus/脚手架搭建/</id>
    <published>2020-09-23T00:00:00.000Z</published>
    <updated>2020-10-05T10:01:47.905Z</updated>
    
    <content type="html"><![CDATA[<p><code>npm i chalk commander download-git-repo inquirer ora request -S</code></p><p>commander: <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">https://github.com/tj/commander.js</a><br>Inquirer: <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">https://github.com/SBoudrias/Inquirer.js</a><br>chalk: <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a><br>Simple Git: <a href="https://github.com/steveukx/git-js#readme" target="_blank" rel="noopener">https://github.com/steveukx/git-js#readme</a></p><p style="text-align:right"> 2020.9.23 星期三  12：51 </p><h1 id="cli-搭建"><a href="#cli-搭建" class="headerlink" title="cli 搭建"></a>cli 搭建</h1><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>我们实现了一个脚手架的基本功能，大致分为三个流程（拉取模板-&gt;创建项目-&gt;收尾清理</p><p>1) commander 创建可执行的node命令<br>2) command:init： 复制模版</p><ol><li>可提交到git，从服务端下载</li><li>本地缓存（和cli一起），不用从服务端下载最新</li><li>模版可以写死然后重写；<br>或者使用模版文件ejs等<br>；可添加其他命令，init,built,publish,test 等。<br>3) 创建bin命令；包括package.json中配置。<br>4) 测试；npm link<br>5) 发布到npm</li></ol><h3 id="使用模版文件"><a href="#使用模版文件" class="headerlink" title="使用模版文件"></a>使用模版文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&lt;%= type.toLowerCase() %&gt;"</span>,</span><br><span class="line">  <span class="attr">"name_cn"</span>: <span class="string">"&lt;%= name %&gt;"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"&lt;%= desc %&gt;"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"&lt;%= type %&gt;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"category"</span>: <span class="string">"&lt;%= category %&gt;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&lt;%= desc %&gt;"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"department"</span>:  <span class="string">"&lt;%= department %&gt;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ### 使用模版文件ejs 创建模版</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">renderDir</span>(<span class="params">dir, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> files = readdir(dir, <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\.(less|css|view|js|json|md)$/gi</span>.test(filename);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(files.map(<span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> filepath = dir + <span class="string">'/'</span> + file;</span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> fs.readFile(filepath, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">await</span> fs.outputFile(filepath, ejs.render(content, data));</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> simpleGit <span class="keyword">from</span> <span class="string">'simple-git'</span>;</span><br><span class="line"><span class="keyword">const</span> git = simpleGit();</span><br></pre></td></tr></table></figure><p>有些提交可能需要用到git权限，比如发布到git，读取开发者信息等。<br>可以申请token，然后做相关操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><!-- [开发一个简单的脚手架cli](https://blog.csdn.net/Headmaster_Tan/article/details/88531978)[开发一个简单的脚手架cli ](https://www.pianshen.com/article/1913275915/) $_PS: 内容相同，简单了解。--><!-- \# [如何自己搭一个脚手架](https://segmentfault.com/a/1190000016996897?utm_source=tag-newest) $_PS: 实践了init；没有尝试list。下载用了downlong-git-repo--><!-- \# [总结一个项目模板，开发一个简单的脚手架](https://www.imooc.com/article/300430) $_PS: 比较完整。react参考/学习。以下内容为摘抄--><p><code>npm i chalk commander download-git-repo inquirer ora request -S</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commander = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> progress = <span class="built_in">require</span>(<span class="string">'request-progress'</span>);</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// 实际</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs-extra'</span>;</span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'underscore.string'</span>;</span><br><span class="line"><span class="keyword">import</span> ejs <span class="keyword">from</span> <span class="string">'ejs'</span>;</span><br><span class="line"><span class="keyword">import</span> readdir <span class="keyword">from</span> <span class="string">'fs-readdir-recursive'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>链接：<a href="https://www.imooc.com/article/300430" target="_blank" rel="noopener">https://www.imooc.com/article/300430</a></p><p>|– bin<br>    |– co<br>    |– co2<br>|– command<br>    |– download.js<br>    |– generator.js<br>|– utils<br>    |– api.js<br>|– template<br>    |– src<br>      |– views/<br>    |– utils/<br>    |– /<br>    |– mainl.js<br>    |– package.json<br>|– index.js<br>|– package.json</p><h3 id="创建bin命令"><a href="#创建bin命令" class="headerlink" title="创建bin命令"></a>创建bin命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line">process.env.NODE_PATH = __dirname + <span class="string">'/../node_modules'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../index'</span>)</span><br></pre></td></tr></table></figure><p>在脚手架的package.json中配置bin</p><p>“bin”: {<br>        “easy-cli-react”: “index.js”<br>}</p><h3 id="模板下载"><a href="#模板下载" class="headerlink" title="模板下载"></a>模板下载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> downloadZipName = <span class="string">'template.zip'</span>;</span><br><span class="line">progress(request(templateUrl))</span><br><span class="line">    .on(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.cyan(<span class="string">`[easy-cli-react]downloading project template (<span class="subst">$&#123;<span class="built_in">Math</span>.floor((state.percent * <span class="number">100</span>) || <span class="number">0</span>)​&#125;</span>%)`</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">`[error]<span class="subst">$&#123;err&#125;</span>`</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'[easy-cli-react]downloading project template (100%)'</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解压并且重命名文件夹</span></span><br><span class="line">        <span class="keyword">const</span> cmdStr = [</span><br><span class="line">            <span class="string">`unzip -o <span class="subst">$&#123;downloadZipName&#125;</span> -d ./`</span>,</span><br><span class="line">            <span class="string">`rm <span class="subst">$&#123;downloadZipName&#125;</span>`</span>,</span><br><span class="line">            <span class="string">`mv easy-template-react-master <span class="subst">$&#123;projectName&#125;</span>`</span></span><br><span class="line">        ].join(<span class="string">' &amp;&amp; '</span>);</span><br><span class="line">  exec(cmdStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(fs.createWriteStream(downloadZipName));</span><br><span class="line"><span class="comment">// 修改package.json内的项目名</span></span><br><span class="line"><span class="keyword">const</span> packageJson = fs.readJsonSync(<span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>);</span><br><span class="line">packageJson.name = projectName;</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;projectName&#125;</span>/package.json`</span>, </span><br><span class="line">    <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(chalk.cyan(<span class="string">'[easy-cli-react]done!!'</span>));</span><br></pre></td></tr></table></figure><h3 id="模板样例"><a href="#模板样例" class="headerlink" title="模板样例"></a>模板样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">|____.babelrc                           # babel配置</span><br><span class="line">|____LICENSE                            # 项目协议</span><br><span class="line">|____dist                               # 打包产出目录</span><br><span class="line">|____README.md </span><br><span class="line">|____.gitignore</span><br><span class="line">|____package-lock.json</span><br><span class="line">|____package.json</span><br><span class="line">|____build </span><br><span class="line">| |____plugins                          # 自定义的webpack插件</span><br><span class="line">| | |____MyPlugin.js                    </span><br><span class="line">| |____server                           # 脚本</span><br><span class="line">| | |____buildServer.js                     # 打包脚本</span><br><span class="line">| | |____devServer.js                       # 本地开发server</span><br><span class="line">| |____webpackConfig                    # webpack配置</span><br><span class="line">| | |____webpack.dev.config.js              # 开发时配置</span><br><span class="line">| | |____webpack.base.config.js             # 基本配置</span><br><span class="line">| | |____webpack.build.config.js            # 打包时配置</span><br><span class="line">| | |____devProxyConfig.js                  # 本地开发代理配置</span><br><span class="line">|____postcss.config.js                  # postcss 配置</span><br><span class="line">|____src # 项目代码</span><br><span class="line">| |____template                         # html模板</span><br><span class="line">| | |____template.html</span><br><span class="line">| |____lib                              # 公用库代码</span><br><span class="line">| | |____tools.js</span><br><span class="line">| |____index.js                         # 入口文件js</span><br><span class="line">| |____index.scss                       # 入口文件css</span><br></pre></td></tr></table></figure><h1 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h1><p>文档：<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md" target="_blank" rel="noopener">https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md</a><br>github: <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">https://github.com/tj/commander.js</a></p><h2 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h2><ol><li><code>program.parse(process.argv)</code>后才可以访问program.args<br>parse一般放在最后</li><li>program监听不到事件，只好在command的action中 注入函数<br>如果每一个命令前都需要，那就。。<ol><li>可以监听不存在的command <code>on(command:*)</code></li><li>可以监听到选项option  <code>on(option:small)</code></li><li>还可以<code>on(&#39;--help&#39;)</code><br>$_PS: Commander 继承自EventEmitter<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3>无法监听到command <del>/#1090</del> /#1197</li></ol></li></ol><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const program = require('commander')</span></span><br><span class="line"><span class="comment">// const &#123; program &#125; = require('commander')</span></span><br><span class="line"><span class="keyword">const</span> &#123; Command &#125; = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> Command();</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* # options */</span></span><br><span class="line">program</span><br><span class="line">  .option(<span class="string">'-d, --debug'</span>, <span class="string">'output extra debugging'</span>)</span><br><span class="line">  .option(<span class="string">'-s, --small'</span>, <span class="string">'small pizza size'</span>)</span><br><span class="line">  .option(<span class="string">'-p, --pizza-type &lt;type&gt;'</span>, <span class="string">'flavour of pizza'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('program', program)</span></span><br><span class="line"><span class="comment">// 未执行parse前没有args属性</span></span><br><span class="line"><span class="comment">// console.log('program.args', program.args) // undefined</span></span><br><span class="line"><span class="comment">// program.parse(process.argv);</span></span><br><span class="line"><span class="comment">// console.log('program: after parase ', program)</span></span><br><span class="line"><span class="comment">// console.log('program.args', program.args) // [init]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(program.opts()); // &#123; debug: true, small: undefined, pizzaType: undefined &#125;</span></span><br><span class="line"><span class="keyword">if</span> (program.debug) <span class="built_in">console</span>.log(program.opts());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'pizza details:'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.small) <span class="built_in">console</span>.log(<span class="string">'- small pizza size'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.pizzaType) <span class="built_in">console</span>.log(<span class="string">`- <span class="subst">$&#123;program.pizzaType&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* # version */</span></span><br><span class="line">program.version(pkg.version)</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options]'</span>)</span><br><span class="line"></span><br><span class="line">program.action(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'haha , here is action'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* # command */</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init'</span>)</span><br><span class="line">  .description(<span class="string">'生成一个新项目'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'command:init'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'init action'</span>)</span><br><span class="line">    <span class="comment">// require('./command/init')()</span></span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* event listener */</span></span><br><span class="line"><span class="comment">// ## --help</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'on help*.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ## command</span></span><br><span class="line"><span class="comment">// ### error on unknown commands</span></span><br><span class="line">program.on(<span class="string">'command:*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">operands</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`hahhn error: unknown command '<span class="subst">$&#123;operands[<span class="number">0</span>]&#125;</span>'`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'operands'</span>,operands, <span class="keyword">this</span>.name())</span><br><span class="line">  <span class="comment">// const availableCommands = program.commands.map(cmd =&gt; cmd.name());</span></span><br><span class="line">  <span class="comment">// mySuggestBestMatch(operands[0], availableCommands);</span></span><br><span class="line">  <span class="comment">// process.exitCode = 1;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* parse */</span></span><br><span class="line"><span class="comment">// 执行parse后才可以通过属性访问</span></span><br><span class="line">program</span><br><span class="line">  .parse(process.argv)</span><br><span class="line"><span class="keyword">if</span>(!program.args.length) &#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="inrequirer"><a href="#inrequirer" class="headerlink" title="inrequirer"></a>inrequirer</h1><p>github: <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">https://github.com/SBoudrias/Inquirer.js</a></p><h2 id="实际-1"><a href="#实际-1" class="headerlink" title="实际"></a>实际</h2><p>返回的Promise，可以通过async/await 同步方式使用。不在回调中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">message = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">await</span> inquirer.prompt([&#123;</span><br><span class="line">      name: <span class="string">'input'</span>,</span><br><span class="line">      message: message,</span><br><span class="line">      validate: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Boolean</span>(name.trim());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;])</span><br><span class="line">  ).input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><!-- \# [inquirer.js —— 一个用户与命令行交互的工具](https://blog.csdn.net/qq_26733915/article/details/80461257) --><p>使用脚手架的时候最明显的就是与命令行的交互，如果想自己做一个脚手架或者在某些时候要与用户进行交互，这个时候就不得不提到inquirer.js了。</p><p>type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">    <span class="comment">// 具体交互内容</span></span><br><span class="line">];</span><br><span class="line">inquirer.prompt(promptList).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers); <span class="comment">// 返回的结果</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ## input</span></span><br><span class="line"><span class="keyword">const</span> promptList = [&#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'设置一个用户名:'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">"test_user"</span> <span class="comment">// 默认值</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'请输入手机号:'</span>,</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    validate: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val.match(<span class="regexp">/\d&#123;11&#125;/g</span>)) &#123; <span class="comment">// 校验位数</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请输入11位数字"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// ## confirm</span></span><br><span class="line"><span class="keyword">const</span> promptList = [&#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">    message: <span class="string">"是否使用监听？"</span>,</span><br><span class="line">    name: <span class="string">"watch"</span>,</span><br><span class="line">    prefix: <span class="string">"前缀"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">    message: <span class="string">"是否进行文件过滤？"</span>,</span><br><span class="line">    name: <span class="string">"filter"</span>,</span><br><span class="line">    suffix: <span class="string">"后缀"</span>,</span><br><span class="line">    when: <span class="function"><span class="keyword">function</span>(<span class="params">answers</span>) </span>&#123; <span class="comment">// 当watch为true的时候才会提问当前问题</span></span><br><span class="line">        <span class="keyword">return</span> answers.watch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><h2 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h2><p># <a href="http://lzw.me/a/nodejs-stdin.html" target="_blank" rel="noopener">nodeJS 中从命令行等待并读入用户输入实现与用户交互的方法</a></p><ol><li>fs.readSync + process.stdin 同步读取用户输入</li><li>readline.question 获取用户输入</li><li>基于 nodejs 模块 readline-sync</li></ol><p>readline-sync: <a href="https://www.npmjs.com/package/readline-sync" target="_blank" rel="noopener">https://www.npmjs.com/package/readline-sync</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ## 1 fs.readSync + process.stdin</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSyncByfs</span>(<span class="params">tips</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    tips = tips || <span class="string">'&gt; '</span>;</span><br><span class="line">    process.stdout.write(tips);</span><br><span class="line">    process.stdin.pause();</span><br><span class="line">    response = fs.readSync(process.stdin.fd, <span class="number">1000</span>, <span class="number">0</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    process.stdin.end();</span><br><span class="line">    <span class="keyword">return</span> response[<span class="number">0</span>].trim();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(readSyncByfs(<span class="string">'请输入任意字符：'</span>));</span><br><span class="line"><span class="comment">// ## 2 readline.question</span></span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSyncByRl</span>(<span class="params">tips</span>) </span>&#123;</span><br><span class="line">    tips = tips || <span class="string">'&gt; '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">            input: process.stdin,</span><br><span class="line">            output: process.stdout</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        rl.question(tips, (answer) =&gt; &#123;</span><br><span class="line">            rl.close();</span><br><span class="line">            resolve(answer.trim());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readSyncByRl(<span class="string">'请输入任意字符：'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ##3 readline-sync</span></span><br><span class="line"><span class="keyword">var</span> readlineSync = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Wait for user's response.</span></span><br><span class="line"><span class="keyword">var</span> userName = readlineSync.question(<span class="string">'May I have your name? '</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi '</span> + userName + <span class="string">'!'</span>);</span><br></pre></td></tr></table></figure></p><h1 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h1><p>chalk: <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a></p><p>Terminal string styling done right<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(chalk.blue(<span class="string">'Hello world!'</span>));</span><br><span class="line">log(chalk.blue(<span class="string">'Hello'</span>) + <span class="string">' World'</span> + chalk.red(<span class="string">'!'</span>));</span><br><span class="line">log(chalk.blue.bgRed.bold(<span class="string">'Hello world!'</span>));</span><br></pre></td></tr></table></figure></p><h1 id="ora"><a href="#ora" class="headerlink" title="ora"></a>ora</h1><p>ora: <a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">https://github.com/sindresorhus/ora</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'Loading unicorns'</span>).start();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">spinner.color = <span class="string">'yellow'</span>;</span><br><span class="line">spinner.text = <span class="string">'Loading rainbows'</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">spinner..stop()</span><br><span class="line"><span class="comment">// .succeed(text?) ,.fail(text?) ,...</span></span><br><span class="line"><span class="comment">/* # color of the text */</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">`Loading <span class="subst">$&#123;chalk.red(<span class="string">'unicorns'</span>)&#125;</span>`</span>).start();</span><br></pre></td></tr></table></figure></p><h1 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h1><p>除了上述方法，我们也可以直接通过大名鼎鼎的Yeoman来创建，不过个人觉得没必要，毕竟这玩意也不难。</p><p>yeman: <a href="https://github.com/yeoman/yeoman" target="_blank" rel="noopener">https://github.com/yeoman/yeoman</a><br>yeoman: <a href="https://yeoman.io/" target="_blank" rel="noopener">https://yeoman.io/</a></p><h1 id="Simple-Git"><a href="#Simple-Git" class="headerlink" title="Simple Git"></a>Simple Git</h1><p>Simple Git: <a href="https://github.com/steveukx/git-js#readme" target="_blank" rel="noopener">https://github.com/steveukx/git-js#readme</a><br>A lightweight interface for running git commands in any node.js application.</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">[npm scripts 使用指南]</a><br><a href="https://juejin.im/post/6844903826344902670" target="_blank" rel="noopener">#!/usr/bin/env node 到底是什么？</a></p><p>shabang,shebang: sharp/hash/mesh;shell.  bang；#!<br>npm link</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;npm i chalk commander download-git-repo inquirer ora request -S&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;commander: &lt;a href=&quot;https://github.com/tj/commander.j
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者和发布订阅</title>
    <link href="http://yoursite.com/sum/js/%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>http://yoursite.com/sum/js/观察者和发布订阅/</id>
    <published>2020-09-21T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.354Z</updated>
    
    <content type="html"><![CDATA[<p>发布订阅和观察者，确和研究vue源码有点关系。<br>之前当作是一个模式学习，细比较之：</p><p style="text-align:right"> 2020.9.21 星期一  13：32 </p><h2 id="vue相关"><a href="#vue相关" class="headerlink" title="vue相关"></a>vue相关</h2><p>vue 中的 observer watcher dep 可以理解为发布订阅者模式吧？<br>应该是观察者模式。 vue的事件通讯机制才是发布订阅模式<br>vue双向绑定过程涉及发布订阅和观察者，setter是观察者，更新的过程是发布订阅</p><h2 id="区别解释"><a href="#区别解释" class="headerlink" title="区别解释"></a>区别解释</h2><!-- \# [JavaScript 观察者模式与发布订阅模式](https://baijiahao.baidu.com/s?id=1649464351438032712&wfr=spider&for=pc) --><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义了对象间一种一对多的依赖关系，当目标对象 Subject 的状态发生改变时，所有依赖它的对象 Observer 都会得到通知。</p><p>模式特征：<br>\<br>一个目标者对象 Subject，拥有方法：添加 / 删除 / 通知 Observer；<br>多个观察者对象 Observer，拥有方法：接收 Subject 状态变更通知并处理；<br>目标对象 Subject 状态变更时，通知所有 Observer。</p><p>Subject 添加一系列 Observer， Subject 负责维护与这些 Observer 之间的联系，“你对我有兴趣，我更新就会通知你”。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>基于一个<strong>事件（主题）</strong>通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p><p>发布订阅模式与观察者模式的不同，“第三者” （事件中心）出现。目标对象并不直接通知观察者，而是通过事件中心来派发通知。</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。</p><p>从上面代码可以看出，观察者模式由具体目标调度，每个被订阅的目标里面都需要有对观察者的处理，会造成代码的冗余。而发布订阅模式则统一由调度中心处理，消除了发布者和订阅者之间的依赖。</p><p>原文：<a href="https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c" target="_blank" rel="noopener">Observer vs Pub-Sub pattern</a><br><!-- \# [观察者模式 vs 发布订阅模式](https://zhuanlan.zhihu.com/p/51357583) --><br><!-- 我脑海中立刻闪现了《Head First设计模式》里讲的： --></p><blockquote><p>Publishers + Subscribers = Observer Pattern</p></blockquote><p>所谓观察者模式，其实就是为了实现松耦合(loosely coupled)。<br>用《Head First设计模式》里的气象站为例子，每当气象测量数据有更新，changed()方法就会被调用，于是我们可以在changed()方法里面，更新气象仪器上的数据，比如温度、气压等等。</p><p>在发布订阅模式里，发布者，并不会直接通知订阅者，换句话说，发布者和订阅者，彼此互不相识。</p><p>从表面上看：<br>    观察者模式里，只有两个角色 —— 观察者 + 被观察者而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— 经纪人Broker</p><p>往更深层次讲：<br>    观察者和被观察者，是松耦合的关系发布者和订阅者，则完全不存在耦合</p><p>从使用层面上讲：<br>    观察者模式，多用于单个应用内部<br>    发布订阅模式，则更多的是一种跨应用的模式(cross-application pattern)，比如我们常用的消息中间件</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><!-- \# [观察者和发布订阅模式的区别](https://www.cnblogs.com/viaiu/p/9939301.html) --><ol><li>在Observer模式中，Observers知道Subject，同时Subject还保留了Observers的记录。<br>然而，在发布者/订阅者中，发布者和订阅者不需要彼此了解。他们只是在消息队列或代理的帮助下进行通信。</li><li>在Publisher / Subscriber模式中，组件是松散耦合的，而不是Observer模式。</li><li>观察者模式主要以同步方式实现，即当某些事件发生时，Subject调用其所有观察者的适当方法。<br>发布者/订阅者在大多情况下是异步方式（使用消息队列）。</li><li>观察者模式需要在单个应用程序地址空间中实现。<br>另一方面，发布者/订阅者模式更像是跨应用程序模式。</li></ol><h2 id="SMTC"><a href="#SMTC" class="headerlink" title="SMTC"></a>SMTC</h2><!-- \# [观察者模式和发布订阅模式的区别](https://blog.flqin.com/357.html) --><p>观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。</p><p>在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。</p><p>发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个 主题 通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = [];</span><br><span class="line">  &#125;</span><br><span class="line">  add(ob) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(ob);</span><br><span class="line">  &#125;</span><br><span class="line">  remove(ob) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.splice(<span class="keyword">this</span>.list.indexOf(<span class="keyword">this</span>.list.find(<span class="function">(<span class="params">item</span>) =&gt;</span> ob.id === item.id)), <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  notfiy() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">      i.update(i.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  update(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;id&#125;</span>,我被通知了！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = <span class="keyword">new</span> Observer(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">let</span> people2 = <span class="keyword">new</span> Observer(<span class="number">9527</span>);</span><br><span class="line"><span class="keyword">let</span> people3 = <span class="keyword">new</span> Observer(<span class="number">89757</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">sub.add(people1);</span><br><span class="line">sub.add(people2);</span><br><span class="line">sub.add(people3);</span><br><span class="line"></span><br><span class="line">sub.notfiy();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sub.remove(people2);</span><br><span class="line">  sub.notfiy();</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布订阅模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pub</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  subscribe(name, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.list[name]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.list[name] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[name].push(cb);</span><br><span class="line">  &#125;</span><br><span class="line">  unSubscribe(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list[name] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  publish(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">Array</span>.from(args).shift();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.list[name] || <span class="keyword">this</span>.list[name].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>主题没有可发布的事件！`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[name].forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item(args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> publisher = <span class="keyword">new</span> Pub();</span><br><span class="line"></span><br><span class="line">publisher.subscribe(<span class="string">'event1'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event1'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event2'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">publisher.subscribe(<span class="string">'event3'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">publisher.publish(<span class="string">'event1'</span>, <span class="string">'额外参数1'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  publisher.unSubscribe(<span class="string">'event2'</span>);</span><br><span class="line">  publisher.publish(<span class="string">'event2'</span>, <span class="string">'额外参数2'</span>);</span><br><span class="line">  publisher.publish(<span class="string">'event3'</span>, <span class="string">'额外参数3'</span>, <span class="string">'额外参数4'</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p><!-- \# [观察者模式和发布订阅模式的区别](https://www.jianshu.com/p/594f018b68e7) --><!-- 之前一直对观察者模式和发布订阅模式的区别理解不深，正好这段时间在看vue源码的分析，vue数据双向绑定也用到了发布订阅模式，于是又把这两者探究了一番，今天做个笔记加强印象。观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 观察者模式 */</span></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    update(val) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察者列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList = []</span><br><span class="line">    &#125;</span><br><span class="line">    add(observer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    remove(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList = <span class="keyword">this</span>.observerList.filter(<span class="function"><span class="params">ob</span> =&gt;</span> ob !== observer);</span><br><span class="line">    &#125;</span><br><span class="line">    count() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span>(index) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observerList[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 目标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">    &#125;</span><br><span class="line">    addObserver(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    removeObserver(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    notify(...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> obCount = <span class="keyword">this</span>.observers.count();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; obCount; index++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.observers.get(i).update(...args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布订阅模式： */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PubSub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribers = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    subscribe(type, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>.subscribers, type)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.subscribers[type] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.subscribers[type].push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    unsubscribe(type, fn) &#123;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="keyword">this</span>.subscribers[type];</span><br><span class="line">        <span class="keyword">if</span> (!listeners || !listeners.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.subscribers[type] = listeners.filter(<span class="function"><span class="params">v</span> =&gt;</span> v !== fn);</span><br><span class="line">    &#125;</span><br><span class="line">    publish(type, ...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="keyword">this</span>.subscribers[type];</span><br><span class="line">        <span class="keyword">if</span> (!listeners || !listeners.length) <span class="keyword">return</span>;</span><br><span class="line">        listeners.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(...args));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob = <span class="keyword">new</span> PubSub();</span><br><span class="line">ob.subscribe(<span class="string">'add'</span>, (val) =&gt; <span class="built_in">console</span>.log(val));</span><br><span class="line">ob.publish(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p> –&gt;</p><h2 id="观察者模式是不是发布订阅模式"><a href="#观察者模式是不是发布订阅模式" class="headerlink" title="观察者模式是不是发布订阅模式"></a>观察者模式是不是发布订阅模式</h2><!-- \# [发布订阅模式与观察者模式](https://blog.csdn.net/hf872914334/article/details/88899326) --><p>网上关于这个问题的回答，出现了两极分化，有认为发布订阅模式就是观察者模式的，也有认为观察者模式和发布订阅模式是真不一样的。</p><p>其实我不知道发布订阅模式是不是观察者模式，就像我不知道辨别模式的关键是设计意图还是设计结构（理念），虽然《JavaScript设计模式与开发实践》一书中说了<strong>分辨模式的关键是意图而不是结构</strong>。</p><p>如果以结构来分辨模式，发布订阅模式相比观察者模式多了一个中间件订阅器，所以发布订阅模式是不同于观察者模式的；如果以意图来分辨模式，他们都是<strong>实现了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</strong>，那么他们就是同一种模式，发布订阅模式是在观察者模式的基础上做的优化升级。</p><p>不过，不管他们是不是同一个设计模式，他们的实现方式确实有差别，我们在使用的时候应该根据场景来判断选择哪个。</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发布订阅和观察者，确和研究vue源码有点关系。&lt;br&gt;之前当作是一个模式学习，细比较之：&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2020.9.21 星期一  13：32 &lt;/p&gt;



&lt;h2 id=&quot;vue相关&quot;&gt;&lt;a href=&quot;#vue相关
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/pdf/js/watch/"/>
    <id>http://yoursite.com/pdf/js/watch/</id>
    <published>2020-09-19T11:28:53.070Z</published>
    <updated>2020-09-20T16:17:29.625Z</updated>
    
    <content type="html"><![CDATA[/* # 观察者模式 observable*/class observer {    constructor() {        this.subs = []    }    add(sub) {        this.subs.push(sub)    }    remove(sub) {    }    notify() {    }}class observable {}/* # 发布订阅 */class eventEmiter {    constructor() {    }}const xiaoMing = {    name: 'xiaoming',    say() {        console.log('my name is', this.name)    },    work() {        console.log('working')        eventEmiter.notify('work')    }}const xiaoWang = {    name: 'xiao wang',}/* # ~~观察者~~ */var blogger = {    subs: [],    addObserver(cb) {        this.subs.push(cb)    },    publish(sth) {        this.subs.forEach(v => {            console.log('blogger', sth)            v(sth)        })    },    write(article) {        console.log('blogger write a bloger')        this.publish(article)    }}var jack = {    read(sth) {        console.log('jack reading')    }}// jack.read('ar1')blogger.addObserver(jack.read);blogger.write('article')/* # 发布订阅 */var event = {    events: {},    trigger(ev) {        this.events[ev].forEach(cb => {            cb(...[...arguments].slice(1))        });    },    add(ev, cb) {        if (!this.events[ev]) this.events[ev] = []        this.events[ev].push(cb)    }}event.add('hello', function(par1, par2) {    console.log('evnet lisnter hello', par1, par2)})var xiao = {    hello() {        console.log('xiao hello')        event.trigger('hello', 'xiaoming', [1,2])    },    jiujiu() {        console.log('xiao jiujiu')        event.trigger('jiujiu', 'xiaoming')    }}xiao.hello()]]></content>
    
    <summary type="html">
    
      
      
        /* # 观察者模式 observable*/
class observer {
    constructor() {
        this.subs = []
    }
    add(sub) {
        this.subs.push(sub)
    }
 
      
    
    </summary>
    
      <category term="pdf" scheme="http://yoursite.com/categories/pdf/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/pdf/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Git Hooks</title>
    <link href="http://yoursite.com/sum/jsplus/git%20hooks/"/>
    <id>http://yoursite.com/sum/jsplus/git hooks/</id>
    <published>2020-09-18T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.167Z</updated>
    
    <content type="html"><![CDATA[<p>git hooks文档：<a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener">https://git-scm.com/docs/githooks</a><br>husky: <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">https://github.com/typicode/husky</a><br>lint-staged: <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">https://github.com/okonet/lint-staged</a></p><p style="text-align:right"> 2020.9.18 星期五  ： </p><p>做一些hooks相关的工作。比如：commit前 检查/格式化代码；规范提交信息/提交信息模版；<br>CI/CD</p><h1 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h1><p>在项目根目录的 .git/hooks 下面配置，配置文件的名称是固定的，使用shell语法编写。<br><!-- \# [一文带你彻底学会 Git Hooks 配置](https://segmentfault.com/a/1190000022970270?utm_source=tag-newest) --></p><h2 id="Git-Hooks-介绍"><a href="#Git-Hooks-介绍" class="headerlink" title="Git Hooks 介绍"></a>Git Hooks 介绍</h2><p>.git/hooks文件下，保存了一些 shell 脚本，然后在对应的钩子中执行这些脚本就行了。<br>一个还没有配置 Git Hooks 的仓库，默认会有很多.sample结尾的文件，这些都是示例文件<br>这个脚本默认是不生效的，如果要生效，把文件名后缀去掉就可以了</p><h3 id="not-set-as-executable"><a href="#not-set-as-executable" class="headerlink" title="not set as executable"></a>not set as executable</h3><p>问题： hint: The ‘.git/hooks/pre-commit’ hook was ignored because it’s not set as executable.<br><!-- [Why is my Git pre-commit hook not executable by default?](https://stackoverflow.com/questions/8598639/why-is-my-git-pre-commit-hook-not-executable-by-default) --><br><!-- [为什么我的Git预提交挂钩默认不可执行？](https://xbuba.com/questions/8598639)$_PS: 下面是中文翻译 --></p><blockquote><p>The sample files from a git init are all executable; if it’s copied or renamed to a non-sample file, it will retain the original file’s x flag.<br>New files will be created with current defaults. In your case, view those defaults with umask:<br>默认情况下，u+x除非明确设置为新文件，否则不会。<br><code>$ umask #0022</code><br>解决<br><code>chmod +x</code></p></blockquote><h5 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h5><p>就像附加答案一样，这里是函数，你可以用来初始化一个git存储库，它自动生成钩子可执行文件;<br>您应该将它放入.bashrc或在启动终端时从源文件中找到它。故事在下面:)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  ginit () &#123;</span><br><span class="line">    git init</span><br><span class="line">    gitpath=`git rev-parse --show-superproject-working-tree --show-toplevel | head -1` </span><br><span class="line">    chmod u+x &quot;$gitpath&quot;/.git/hooks/*</span><br><span class="line">    for submodule in &quot;$gitpath&quot;/.git/modules/*; do</span><br><span class="line">      chmod u+x &quot;$submodule&quot;/hooks/*  </span><br><span class="line">    done </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我和你一样生气。我不想记住每次初始化存储库时都必须创建所有挂钩可执行文件。<br>另外，当你使用子模块时，它们的钩子不在.git/hooks，<br>但是在.git/modules/NameOfSubmodule/hooks，并且这些钩子也应该是可执行的。</p><h2 id="示例shell"><a href="#示例shell" class="headerlink" title="示例shell"></a>示例shell</h2><p>$_PS：网上看了pre-commit,commit-msg 。没有一个可以正确执行</p><h2 id="模版目录"><a href="#模版目录" class="headerlink" title="模版目录"></a>模版目录</h2><p>如果我们所有项目都需要一个通用的钩子，那么我们需要在所有的项目中都放置钩子文件。挨个复制显然不是一个可行的方案。<br>在 git init 或者 git clone时，如果指定有模板目录，会使用拷贝模板目录下的文件到 .git/ 目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init --template "path-to-template-dir"</span><br><span class="line"><span class="meta">$</span> git clone --template "path-to-template-dir"</span><br></pre></td></tr></table></figure></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>1.创建/usr/local/.git_template/.git_template目录<br>2.将第一步中创建的commit_msg文件拷贝至上方目录<br>3.使用该命令将git全局配置模版重定向到第一步中创建到目录<br><code>git config --global init.templatedit /usr/local/.git_template/.git_template</code><br>4.如上三步完成后即可在创建新的使用git管理的项目的时候自动将全局模版拷贝至项目根目录/.git/目录下，<br>如果完成如上三步后需要对已经存在对git项目使用该模版，可移动至目标项目根目录并执行git init即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 定义模板目录，模板目录下的钩子目录</span><br><span class="line"><span class="meta">$</span> template_dir=$HOME/.git-templates</span><br><span class="line"><span class="meta">$</span> tempalte_hooks_dir=$template_dir/hooks</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 拷贝全局钩子文件目录到模板目录下</span><br><span class="line"><span class="meta">$</span> mkdir -p $template_dir</span><br><span class="line"><span class="meta">$</span> cp -rf $root_dir/sample/git-template/hooks/ $template_dir/</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 修改模板目录下钩子目录权限</span><br><span class="line"><span class="meta">$</span> chmod -R a+x $tempalte_hooks_dir</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 设置全局模板目录</span><br><span class="line"><span class="meta">$</span> git config --global init.templatedir $template_dir</span><br></pre></td></tr></table></figure><h2 id="why-husky"><a href="#why-husky" class="headerlink" title="why husky"></a>why husky</h2><p>.git文件夹不会提交到git，这就导致一个问题，我们在本地配置好 Git Hook 后，怎么分享给其他小伙伴儿呢？copy 吗？<br>那未免太 low 了，都用 Git 了，还 copy，也太不优雅了。这时候，就轮到 </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.mamicode.com/info-detail-2916910.html" target="_blank" rel="noopener">GitHook 工具 —— husky介绍及使用</a><br>$_PS: 有每个git hook的中文介绍。及husky<br><a href="https://segmentfault.com/a/1190000022970270?utm_source=tag-newest" target="_blank" rel="noopener">一文带你彻底学会 Git Hooks 配置</a></p><h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p>github: <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">https://github.com/typicode/husky</a><br>Husky 是一个让配置 Git 钩子变得更简单的工具（题外话：Husky 是哈士奇的意思，我猜可能是作者养了条二哈）<br>下面这些流行的项目都在使用 Husky，可见它确实是一个非常好用的工具：webpack, babel, create-react-app</p><blockquote><p>注意：一定要使用 npm 安装 eslint 和 husky，因为在 windows 操作系统下, 用 yarn 安装依赖，不会触发 husky pre-commit 钩子命令。</p></blockquote><!-- \#1 [【工具推荐】使用 husky 避免糟糕的 git commit](https://zhuanlan.zhihu.com/p/35913229) --><p>package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "lint": "eslint src"</span><br><span class="line"> &#125;,</span><br><span class="line"> "husky": &#123;</span><br><span class="line">   "hooks": &#123;</span><br><span class="line">     "pre-commit": "npm run lint"</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>通过查看源码可以看到，在安装 husky 的时候，husky会根据 package.json里的配置，<br>在.git/hooks 目录生成所有的 hook 脚本（如果你已经自定义了一个hook脚本，husky不会覆盖它）</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>1、husky 使用了自定义的安装过程：node lib/installer/bin install（在node_modules/husky/package.json里）。<br>执行的时会在项目的.git/hooks 目录生成所有 hook 的脚本</p><p>2、每个hook脚本都是一样的<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># husky</span></span><br><span class="line"><span class="comment"># v1.0.0-rc.1 darwin</span></span><br><span class="line"><span class="built_in">export</span> HUSKY_GIT_PARAMS=<span class="string">"$*"</span></span><br><span class="line">node_modules/run-node/run-node ./node_modules/husky/lib/runner/bin `basename <span class="string">"<span class="variable">$0</span>"</span>`</span><br></pre></td></tr></table></figure></p><p>关键的部分是 <code>bashname &quot;$0&quot;</code>，这样可以拿到当前的 hook名，如pre-commit、pre-push 。</p><p>3、最后根据package.json 的配置，执行我们定义相对应的hook脚本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟悉各种工具的暴露的接口，联合起来可以hack出非常方便的自动化工具。<br>Hope you have fun! :)（题图侵删）<br>更新：配合lint-staged，可以只检查 staged 文件，提高效率<br><!-- End: #1 --></p><h1 id="lint-stage"><a href="#lint-stage" class="headerlink" title="lint-stage"></a>lint-stage</h1><p>lint-staged: <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">https://github.com/okonet/lint-staged</a></p><p>用于实现每次提交只检查本次提交所修改的文件。</p><h1 id="yorkie"><a href="#yorkie" class="headerlink" title="yorkie"></a>yorkie</h1><blockquote><p>yorkie fork 自 husky 并且与后者不兼容。<br>Git hooks made easy<br>This is a fork of husky with a few changes:</p></blockquote><h2 id="vue-cli-serve"><a href="#vue-cli-serve" class="headerlink" title="vue-cli-serve"></a>vue-cli-serve</h2><blockquote><p>在安装之后，@vue/cli-service 也会安装 <strong>yorkie</strong> ，它会让你在 package.json 的 gitHooks 字段中方便地指定 Git hook：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">    <span class="attr">"lintcss"</span>: <span class="string">"stylelint src/**/*.&#123;html,vue,css,less,scss&#125; --fix"</span>,</span><br><span class="line">    <span class="attr">"analyz"</span>: <span class="string">"ANALYZ=true vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"project"</span>: <span class="string">"node ./scripts/build/projectInit.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"gitHooks"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="attr">"commit-msg"</span>: <span class="string">"node scripts/git/verify-commit-msg.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"src/**/*.&#123;js,jsx,vue,ts,tsx&#125;"</span>: [</span><br><span class="line">      <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"src/**/*.&#123;vue,less,scss&#125;"</span>: [</span><br><span class="line">      <span class="string">"npm run lintcss"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintIgnore"</span>: [</span><br><span class="line">    <span class="string">"/scripts/git/verify-commit-msg.js"</span>,</span><br><span class="line">    <span class="string">"/scripts/build/projectInit.js"</span>,</span><br><span class="line">    <span class="string">"/dist"</span>,</span><br><span class="line">    <span class="string">"/build"</span>,</span><br><span class="line">    <span class="string">"/vue.config.js"</span>,</span><br><span class="line">    <span class="string">"/tsconfig.json"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"stylelint"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"@xes/stylelint-config-xes"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">      <span class="attr">"value-list-comma-newline-after"</span>: <span class="string">"always-multi-line"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"stylelintIgnore"</span>: [</span><br><span class="line">    <span class="string">"/src/layout/index.html"</span>,</span><br><span class="line">    <span class="string">"src/assets/less/utils"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><!-- \# [GitHook 工具 —— husky 配置](https://blog.csdn.net/huangpb123/article/details/102690412) --><ol><li>安装 husky，lint-staged，@commitlint/cli，@commitlint/config-conventional 依赖<br>lint-staged: 用于实现每次提交只检查本次提交所修改的文件。</li><li><p>创建 .huskyrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 .lintstagedrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"src/**/*.js"</span>: <span class="string">"eslint"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置 fix 可以自动修复错误：</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="attr">"src/**/*.js"</span>: [<span class="string">"eslint --fix"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 或者使用下面的配置，自动格式化代码（谨慎使用）</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">"src/**/*.js"</span>: [<span class="string">"prettier --write"</span>, <span class="string">"git add"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 commitlint.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&apos;@commitlint/config-conventional&apos;],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &apos;type-enum&apos;: [</span><br><span class="line">        2,</span><br><span class="line">        &apos;always&apos;,</span><br><span class="line">        [</span><br><span class="line">        &apos;feat&apos;, // 新功能（feature）</span><br><span class="line">        &apos;fix&apos;, // 修补bug</span><br><span class="line">        &apos;docs&apos;, // 文档（documentation）</span><br><span class="line">        &apos;style&apos;, // 格式（不影响代码运行的变动）</span><br><span class="line">        &apos;refactor&apos;, // 重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">        &apos;test&apos;, // 增加测试</span><br><span class="line">        &apos;revert&apos;, // 回滚</span><br><span class="line">        &apos;config&apos;, // 构建过程或辅助工具的变动</span><br><span class="line">        &apos;chore&apos;, // 其他改动</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    &apos;type-empty&apos;: [2, &apos;never&apos;], // 提交不符合规范时,也可以提交,但是会有警告</span><br><span class="line">    &apos;subject-empty&apos;: [2, &apos;never&apos;], // 提交不符合规范时,也可以提交,但是会有警告</span><br><span class="line">    &apos;subject-full-stop&apos;: [0, &apos;never&apos;],</span><br><span class="line">    &apos;subject-case&apos;: [0, &apos;never&apos;],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git hooks文档：&lt;a href=&quot;https://git-scm.com/docs/githooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/docs/githooks&lt;/a&gt;&lt;br&gt;husky: &lt;a
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端H5页面调试</title>
    <link href="http://yoursite.com/sum/jsplus/%E7%A7%BB%E5%8A%A8%E7%AB%AFh5%E9%A1%B5%E9%9D%A2%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/sum/jsplus/移动端h5页面调试/</id>
    <published>2020-09-16T00:00:00.000Z</published>
    <updated>2020-10-05T10:01:51.714Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.16 星期三  11：57 </p><p>移动端（web页面）开发/调试手段</p><h2 id="基本手段"><a href="#基本手段" class="headerlink" title="基本手段"></a>基本手段</h2><h3 id="chrome-（pc）"><a href="#chrome-（pc）" class="headerlink" title="chrome （pc）"></a>chrome （pc）</h3><p>Chrome 控制台 device模拟<br>   调ui，请求等方便</p><h3 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h3><p>1）原始/粗暴：alert<br>2）使用代理工具，抓包请求<br>3）通过数据线连接<br>安卓：Chrome Remote Devices<br>依赖 Chrome 来进行远程调试，适合安卓手机。<br>首先，开启 Android 手机的「开发者选项」，勾选 「USB 调试」。<br>然后，Chrome 中输入：chrome://inspect，进入调试页面。</p><p>iPhone<br>iphone【设置】&gt;【Safari】&gt;【高级】&gt;【Web检查器】<br>打开mac safari ,找到开发。在safafri中看到的iphone打开的连接以及h5内容</p><p>4）调试工具：vConsole；Eruda</p><blockquote><p>看起来很完美，但是有个小缺点：网络请求，需要刷新页面，可是很多内嵌的 H5 页面是没有机会刷新页面的，所以需要客户端童鞋配合增加刷新的功能方便调试。</p></blockquote><p>5) 其他：vorlon （（在Vue多页面工程中，单页面未尝试，但是原理应该一样）<br><!-- [混合开发之H5在移动端如何调试界面](https://www.jianshu.com/p/cc55586dd17c) --><br>1.首先进行全局安装vorlon（cnpm install -g vorlon）;<br>2.然后在index.html（需要监控的界面）添加<script src="http://192.168.1.:/vorlon.js"></script><br>3.打开cmd，输入vorlon执行<br>4.在浏览器中打开<a href="http://192.168.1.:（你配置的监控ip和端口）进行监控" target="_blank" rel="noopener">http://192.168.1.:（你配置的监控ip和端口）进行监控</a></p><h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><p>移动端开发（原生）编辑器可以模拟设备运行<br>可以看到各种信息，包括日志，请求，资源等。可断点</p><p>h5跨端开发</p><p>或者下载安卓模拟器（ios没听说）<br>其余流程就和真机一致</p><h3 id="混合开发"><a href="#混合开发" class="headerlink" title="混合开发"></a>混合开发</h3><p>嵌套在webview的h5页面，可以在原生开发的编辑器中输入日志的信息<br>（监听webview 的console.log/alert等。或者约定debug方式/函数）<br>然后在端上开发老师的编辑器，查看到日志等信息</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不同方式有不同的场景。<br>不同的bug/调试，可能要通过一种或者多种方式。</p><h2 id="终极"><a href="#终极" class="headerlink" title="终极"></a>终极</h2><p>究极，肉眼debug</p><h2 id="调试包"><a href="#调试包" class="headerlink" title="调试包"></a>调试包</h2><h3 id="Eruda"><a href="#Eruda" class="headerlink" title="Eruda"></a>Eruda</h3><p>github: <a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a><br><!-- [Eruda: 手机网页调试利器](https://www.v2ex.com/t/316893) --><br>Eruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版，其主要功能包括：捕获 console 日志、检查元素状态、显示性能指标、捕获 XHR 请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。</p><p>Js 文件对于移动端来说略重（ gzip 后大概 80kb ）。建议通过 url 参数来控制是否加载调试器，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> src = <span class="string">'node_modules/eruda/eruda.min.js'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/eruda=true/</span>.test(<span class="built_in">window</span>.location) &amp;&amp; localStorage.getItem(<span class="string">'active-eruda'</span>) != <span class="string">'true'</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt src="'</span> + src + <span class="string">'"&gt;&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt&gt;eruda.init();&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>);</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><!-- # 实际 --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"//activity.xueersi.com/topic/growth/base/js/debug@0.0.1/debug.min.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">async</span>=<span class="string">"async"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- debug@0.0.1/debug.min.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(<span class="regexp">/debug=xesv5/</span>.test(<span class="built_in">window</span>.location))&#123;<span class="keyword">var</span> n=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);n.src=<span class="string">"https://cdn.bootcss.com/eruda/1.5.4/eruda.min.js"</span>,<span class="built_in">document</span>.body.appendChild(n),n.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;eruda.init()&#125;&#125;&#125;();</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a>vConsole</h3><p>github: <a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">https://github.com/Tencent/vConsole</a><br>一个轻量、可拓展、针对手机网页的前端开发者调试面板。</p><p>打印日志<br>与 PC 端打印 log 一致，可直接使用 console.log() 等方法直接打印日志：<code>console.log(&#39;Hello World&#39;);</code><br>未加载 vConsole 模块时，console.log() 会直接打印到原生控制台中；<br>加载 vConsole 后，日志会打印到页面前端+原生控制台。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>name</th><th>watch</th><th>star</th><th>fork</th><th>issue</th></tr></thead><tbody><tr><td>Eruda</td><td>261</td><td>9.1k</td><td>742</td><td>10/124</td></tr><tr><td>vConsole</td><td>313</td><td>12k</td><td>2.5k</td><td>98/132</td></tr></tbody></table><p>鸡肋：线上（有的灰度）打包的时候，会把console去掉。所以，是看不到log的。<br>开发环境有的。测试环境也可以加<br>可以看看cookie，网络请求；error等</p><p>上面两者都可以在head中引入；或者按需（await/defer），放置body结尾。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.cnblogs.com/wind-alex/p/10374304.html" target="_blank" rel="noopener">[H5 移动调试全攻略]</a><br>$_PS: 内容比较全<br><a href="https://www.zhihu.com/question/24250869" target="_blank" rel="noopener">怎么在移动端调试web前端?</a></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.16 星期三  11：57 &lt;/p&gt;


&lt;p&gt;移动端（web页面）开发/调试手段&lt;/p&gt;
&lt;h2 id=&quot;基本手段&quot;&gt;&lt;a href=&quot;#基本手段&quot; class=&quot;headerlink&quot; title=&quot;基本
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes学习</title>
    <link href="http://yoursite.com/sum/os/kubernetes%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/os/kubernetes学习/</id>
    <published>2020-09-14T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.192Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.14 星期一  21：18 </p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><a href="https://www.cnblogs.com/mengyucloud/p/12601732.html" target="_blank" rel="noopener">k8s入门教程</a></p><h3 id="2-k8s常用概念介绍"><a href="#2-k8s常用概念介绍" class="headerlink" title="2. k8s常用概念介绍"></a>2. k8s常用概念介绍</h3><h4 id="节点-（Master-node-and-Worker-node）"><a href="#节点-（Master-node-and-Worker-node）" class="headerlink" title="节点 （Master node and Worker node）"></a>节点 （Master node and Worker node）</h4><p>节点通常指的就是服务器，在k8s中有两种节点：管理节点（Master Node）和工作节点（Worker Node）<br>管理节点（Master Node）：负责管理整个k8s集群，一般由3个管理节点组成HA的架构。<br>工作节点（Worker Node）：主要负责运行容器。</p><h4 id="命名空间-Namespace"><a href="#命名空间-Namespace" class="headerlink" title="命名空间 (Namespace)"></a>命名空间 (Namespace)</h4><p>k8s命名空间主要用于隔离集群资源、隔离容器等，为集群提供了一种虚拟隔离的策略；默认存在3个名字空间，分别是默认命名空间 default、系统命名空间 kube-system 和 kube-public。</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>k8s 对象(Object)是一种持久化存储并且用于表示集群状态的实体。k8s 对象其实就是k8s自己的配置协议，总之我们可以通过定义一个object让k8s根据object定义执行一些部署任务、监控任务等等。</p><h4 id="POD"><a href="#POD" class="headerlink" title="POD"></a>POD</h4><p>Pod是 Kubernetes 部署应用或服务的最小的基本单位。一个Pod 封装多个应用容器（也可以只有一个容器）、存储资源、一个独立的网络 IP 以及管理控制容器运行方式的策略选项。</p><h4 id="副本集-Replica-Set，RS"><a href="#副本集-Replica-Set，RS" class="headerlink" title="副本集 (Replica Set，RS)"></a>副本集 (Replica Set，RS)</h4><p>是一种控制器，负责监控和维护集群中pod的副本(replicas)数，确保pod的副本数是我们期望的样子。</p><h4 id="部署-Deployment"><a href="#部署-Deployment" class="headerlink" title="部署 (Deployment)"></a>部署 (Deployment)</h4><p>表示对k8s集群的一次更新操作，是k8s集群中最常用的Object，主要用于部署应用。支持滚动升级。</p><h4 id="服务-service"><a href="#服务-service" class="headerlink" title="服务 (service)"></a>服务 (service)</h4><p>是对应用的抽象，也是k8s中的基本操作单元，一个服务背后由多个pod支持，服务通过负载均衡策略将请求转发到容器中。</p><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><p>是一种网关服务，可以将k8s服务通过http协议暴露到外部。<br>无状态应用 &amp; 有状态应用</p><h3 id="3-k8s架构"><a href="#3-k8s架构" class="headerlink" title="3. k8s架构"></a>3. k8s架构</h3><h3 id="4-基于k8s的常见web应用部署架构"><a href="#4-基于k8s的常见web应用部署架构" class="headerlink" title="4. 基于k8s的常见web应用部署架构"></a>4. 基于k8s的常见web应用部署架构</h3><h3 id="5-部署应用"><a href="#5-部署应用" class="headerlink" title="5. 部署应用"></a>5. 部署应用</h3><h3 id="6-容器之间共享文件存储"><a href="#6-容器之间共享文件存储" class="headerlink" title="6. 容器之间共享文件存储"></a>6. 容器之间共享文件存储</h3><p>根据存储方式不同，k8s支持多种持久卷（Persistent Volumes）类型，阿里云也对k8s进行一些扩展支持，目前支持NAS、OSS、云盘三种持久卷类型。</p><p>下面是关于阿里云支持的持久卷类型的介绍：</p><p>NAS  - 阿里云高性能分布式文件系统，支持共享存储。<br>OSS  - 阿里云对象存储, 也是一个分布式文件系统，支持共享存储。<br>云盘 - 阿里云云盘，不支持共享存储。7. k8s配置管理<br>如果希望一个镜像（image）更具有通用性，与环境无关，那么应该将环境相关的配置参数从镜像中分离出来。</p><p>### </p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="https://blog.csdn.net/zhuwentaolove/article/details/93102268" target="_blank" rel="noopener">k8s入门教程</a><br>$_PS: 主安装</p><p><a href="https://www.orchome.com/732" target="_blank" rel="noopener">Kubernetes(k8s)中文教程</a><br>Kubernetes(k8s) 是用于自动部署，扩展和管理容器化应用程序的开源系统。</p><p>它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现，Kubernetes 构建在 Google 15 年生产环境经验基础之上,并结合来自社区的最佳创意和实践。</p><h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><p><a href="https://www.jianshu.com/p/86072a381bec" target="_blank" rel="noopener">K8S Nginx Ingress 介绍</a><br>Kubernetes 暴露服务的方式目前只有三种：LoadBlancer Service、NodePort Service、Ingress；前两种估计都应该很熟悉，具体的可以参考下 这篇文章；下面详细的唠一下这个 Ingress</p><p>Ingress 这个玩意，简单的理解就是 你原来要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yml 创建，每次不要去改 Nginx 了，直接改 yml 然后创建/更新就行了；那么问题来了：”Nginx 咋整？”</p><p>Ingress Controller 这东西就是解决 “Nginx 咋整” 的；Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下，工作流程如下图</p><p>当然在实际应用中，最新版本 Kubernetes 已经将 Nginx 与 Ingress Controller 合并为一个组件，所以 Nginx 无需单独部署，只需要部署 Ingress Controller 即可</p><p><a href="https://www.jianshu.com/p/613967aee68e" target="_blank" rel="noopener">Kubernetes实战：集群中部署NGINX Ingress Controller</a></p><blockquote><p>ingress由两部分组成：ingress controller和ingress服务。<br>ingress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段nginx配置，再写到nginx-ingress-control的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后reload一下使配置生效。以此达到域名分配置和动态更新的问题。</p></blockquote><p><a href="https://www.kubernetes.org.cn/7795.html" target="_blank" rel="noopener">从传统Paas到OAM入门篇</a><br>OAM 全称是 Open Application Model，从名称上来看它所定义的就是一种模型，同时也实现了基于 OAM 的我认为这种模型旨在定义了云原生应用的标准。</p><p><a href="https://www.kubernetes.org.cn/7459.html" target="_blank" rel="noopener">使用 kind 和 Docker 启动本地的 Kubernetes</a><br>这篇文章中，我将向你展示使用 kind 在单个 Docker 容器中启动一个集群的步骤。<br>结论<br>kind 对 minikube 来说是一个好的选择因为它只使用单个 Docker 容器。<br>通过跟集成到 Kubernetes 1.14 的 Kustomze 结合使用，在你本地的机器上尝试使用 Kubernetes 会更加简单。</p><p><a href="https://www.kubernetes.org.cn/7429.html" target="_blank" rel="noopener">【docker容器技术】如何选择存储驱动</a></p><h1 id="Iass、Pass、SasS三种云服务区别"><a href="#Iass、Pass、SasS三种云服务区别" class="headerlink" title="Iass、Pass、SasS三种云服务区别"></a>Iass、Pass、SasS三种云服务区别</h1><p><a href="https://www.sohu.com/a/250891912_100233513" target="_blank" rel="noopener">[Iass、Pass、SasS三种云服务区别]</a></p><p>IaaS：Infrastructure-as-a-Service(基础设施即服务)<br>PaaS：Platform-as-a-Service(平台即服务)<br>SaaS：Software-as-a-Service(软件即服务)</p><p>我们可以把云计算理解成一栋大楼，而这栋楼又可以分为顶楼、中间、低层三大块。<br>那么我们就可以把Iass(基础设施)、Pass(平台)、Sass(软件)理解成这栋楼的三部分。基础设施在最下端，平台在中间，软件在顶端。别的一些“软”的层可以在这些层上面添加。</p><p style="text-align:right">21:27 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.14 星期一  21：18 &lt;/p&gt;

&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="os" scheme="http://yoursite.com/categories/sum/os/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 工作流程</title>
    <link href="http://yoursite.com/sum/jsplus/Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/sum/jsplus/Git 工作流程/</id>
    <published>2020-09-13T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.166Z</updated>
    
    <content type="html"><![CDATA[<p>git config –system –unset credential.helper</p><p><a href="https://www.bookstack.cn/read/git-doc-zh/README.md" target="_blank" rel="noopener">Git 中文参考</a></p><p style="text-align:right"> 2020.9.13 星期日  22：58 </p><h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><!-- [Git 工作流程](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html) --><p>本文介绍三种广泛使用的工作流程：<br>Git flow, Github flow, Gitlab flow<br>有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。<br>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p><h2 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h2><p>1) 首先，项目存在两个长期分支。<br>主分支master<br>开发分支develop</p><p>2) 其次，项目存在三种短期分支。 一旦完成开发，它们就会被合并进develop或master，然后被删除。<br>功能分支（feature branch）<br>补丁分支（hotfix branch）<br>预发分支（release branch）</p><h3 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><h2 id="Github-flow"><a href="#Github-flow" class="headerlink" title="Github flow"></a>Github flow</h2><p>它只有一个长期分支，就是master，因此用起来非常简单。</p><p>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。<br>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。<br>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。<br>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p><h3 id="3-2-评价-1"><a href="#3-2-评价-1" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><!-- Github flow 的最大优点就是简单，对于"持续发布"的产品，可以说是最合适的流程。 --><p>问题在于它的假设：master分支的更新与产品的发布是一致的。也就是说，master分支的最新代码，默认就是当前的线上代码。</p><h2 id="Gitlab-flow"><a href="#Gitlab-flow" class="headerlink" title="Gitlab flow"></a>Gitlab flow</h2><p>Gitlab flow 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p><p>### 4.1 上游优先<br>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），<br>即只存在一个主分支master，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p><p>Chromium项目就是一个例子，它明确规定，上游分支依次为：<br>Linus Torvalds的分支, 子系统（比如netdev）的分支, 设备厂商（比如三星）的分支</p><p>### 4.2 持续发布<br>Gitlab flow 分成两种情况，适应不同的开发流程。</p><p>对于”持续发布”的项目，它建议在master分支以外，再建立不同的环境分支。比如，”开发环境”的分支是master，”预发环境”的分支是pre-production，”生产环境”的分支是production。</p><p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p><p>### 4.3 版本发布<br>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从master分支拉出一个分支，比如2-3-stable、2-4-stable等等。<br>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p><h2 id="五、一些小技巧"><a href="#五、一些小技巧" class="headerlink" title="五、一些小技巧"></a>五、一些小技巧</h2><h3 id="5-1-Pull-Request"><a href="#5-1-Pull-Request" class="headerlink" title="5.1 Pull Request"></a>5.1 Pull Request</h3><h3 id="5-2-Protected-branch"><a href="#5-2-Protected-branch" class="headerlink" title="5.2 Protected branch"></a>5.2 Protected branch</h3><h3 id="5-3-Issue"><a href="#5-3-Issue" class="headerlink" title="5.3 Issue"></a>5.3 Issue</h3><blockquote><p>开发完成后，在提交说明里面，可以写上”fixes #14”或者”closes #67”。Github规定，只要commit message里面有下面这些动词 + 编号，就会关闭对应的issue。</p></blockquote><h3 id="5-4-Merge节点"><a href="#5-4-Merge节点" class="headerlink" title="5.4 Merge节点"></a>5.4 Merge节点</h3><p>Git有两种合并：一种是”直进式合并”（fast forward），不生成单独的合并节点；<br>另一种是”非直进式合并”（none fast-forword），会生成单独节点。</p><p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用–no-ff参数）。<br>只要发生合并，就要有一个单独的合并节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>--squash：使用squash方式合并，把多次分支commit历史压缩为一次</span><br><span class="line"><span class="meta">#</span>--no-ff：不使用fast-forward方式合并，保留分支的commit历史</span><br><span class="line">git merge --no-ff feature</span><br></pre></td></tr></table></figure><h3 id="5-5-Squash-多个commit"><a href="#5-5-Squash-多个commit" class="headerlink" title="5.5 Squash 多个commit"></a>5.5 Squash 多个commit</h3><p>为了便于他人阅读你的提交，也便于cherry-pick或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。<br>（前提是，<strong>该分支只有你一个人开发，且没有跟master合并过。</strong>）</p><p>这可以采用rebase命令附带的squash操作，具体方法请参考我写的《Git 使用规范流程》。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>3种。<br>git flow：原始/简单；两个分支master，develop<br>github flow: github 社区方式；每个人都可以fork/checkout 分支，提PR，然后merge。最后部署，或和删除<br>gitlab flow: 工作中 多环境，多分支/开发/需求。上线流程</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>master： 主分支，和线上保持一致<br>release： 可以是测试分支<br>stage/gray: 灰度环境<br>develop： 其余分支；多开发人员；不同feature分支；<br>  比如：dev/huyalong/20200919;<br>    dev/mall/huyalong/20200919-feat;<br>    dev_feature_huyalong_20200908_inviteNew_3.2.2<br>0) 多个feature 分支，也可以合并到一个develop分支。再从这一个develop分支push<br>1） release 也可以有个人/自己的分支，然后合并到唯一的release中发布测试<br>2） state/gray 可以没有。直接合并master 打tag（方便回滚等）发布灰度<br>3） 最后master 可以直接发布到线上</p><p>开发新feature分支都需要从master拉取最新线上代码</p><p>切勿把release（不是自己提交的ci）带到线上<br>（有时别人提交了测试导致当前分支落后于release，merge时有冲突，解决冲突时污染了自己的开发分支）可以 checkout一个新分支提交release</p><p>可以通过merge把开发分支合并到master分支，或者 rebase保持提交信息单一<br>同理把最新的master同步到当前的开发分支也一样<br><strong>使用rebase注意，一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作</strong>；</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>cherry-pick<br>rebase命令附带的squash操作</p><h1 id="git-flow"><a href="#git-flow" class="headerlink" title="git-flow"></a>git-flow</h1><p>git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。<br><!-- [Gitflow工作流程](https://www.cnblogs.com/jeffery-zou/p/10280167.html)[A successful Git branching model](https://nvie.com/posts/a-successful-git-branching-model/)[Learn Version Control with Git](https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow)[git-flow 备忘清单](https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html) --></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git config –system –unset credential.helper&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bookstack.cn/read/git-doc-zh/README.md&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Gird布局</title>
    <link href="http://yoursite.com/sum/css/grid%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/sum/css/grid布局/</id>
    <published>2020-09-06T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.126Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.9.6  星期日  18：42 </p><p><a href="https://www.jianshu.com/p/d183265a8dad" target="_blank" rel="noopener">Grid布局指南</a><br><del><a href="https://blog.csdn.net/weixin_44202459/article/details/88653661" target="_blank" rel="noopener">前端基础知识（grid布局）</a></del><br><!-- $_PS: 内容一样 --><br><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a><br><a href="https://zhuanlan.zhihu.com/p/26757425" target="_blank" rel="noopener">带你入门 CSS Grid 布局</a><br><!-- $_PS: LeviDing --></p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>Grid Container,Grid Item,Grid Line,Grid Track,Grid Cell,Grid Area,</p><p>4.网格轨道（Grid Track）<br>两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。</p><h3 id="Grid-Container-的全部属性"><a href="#Grid-Container-的全部属性" class="headerlink" title="Grid Container 的全部属性"></a>Grid Container 的全部属性</h3><p>display: grid,inline-grid</p><p>grid-template-columns<br>grid-template-rows</p><p>grid-template-areas<br>grid-template</p><p>grid-column-gap<br>grid-row-gap<br>grid-gap</p><p>justify-items<br>align-items<br>justify-content<br>align-content<br>grid-auto-columns<br>grid-auto-rows<br>grid-auto-flow<br>grid</p><ol><li><p>display: grid | inline-grid | subgrid;<br>subgrid: 如果网格容器本身是网格项（嵌套网格容器），此属性用来继承其父网格容器的列、行大小。<br>注：当元素设置了网格布局，column、float、clear、vertical-align属性无效。</p></li><li><p>grid-template-columns: <track-size> … | <line-name> <track-size> … ;<br>track-size: 轨道大小，可以使用css长度，百分比或用分数（用fr单位）。<br>line-name: 网格线名字，你可以选择任何名字。</track-size></line-name></track-size></p></li></ol><h3 id="Grid-Items-的全部属性"><a href="#Grid-Items-的全部属性" class="headerlink" title="Grid Items 的全部属性"></a>Grid Items 的全部属性</h3><pre><code>grid-column-startgrid-column-endgrid-row-startgrid-row-endgrid-columngrid-rowgrid-areajustify-selfalign-self</code></pre><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.9.6  星期日  18：42 &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d183265a8dad&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;G
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/sum/css/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3新特性</title>
    <link href="http://yoursite.com/sum/jsplus/vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/sum/jsplus/vue3新特性/</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#" target="_blank" rel="noopener">从 Vue 2 迁移</a></p><p style="text-align:right"> 2020.9.27 星期  ： </p><p>composition-api api<br>tree shaking<br>typescript<br>observer<br>编译优化；编辑器/ide支持<br>slot<br>错误排查：那个ref/key 相关/操作</p><p>##<br>    更快<br>    更小<br>    更易于维护<br>    更好的多端渲染支持<br>    新功能<br><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="noopener">Vue Function-based API RFC</a><br>尤雨溪</p><p><a href="https://composition-api.vuejs.org/zh/#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">Vue 组合式 API</a></p><p>其他：<br><a href="https://www.rongsoft.com/article/2020/02/111716074649/" target="_blank" rel="noopener">Vue 3.0 的新特性和设计理念</a><br>时间：2020-02-11<br><a href="https://www.dazhuanlan.com/2019/12/05/5de82dcede734/?__cf_chl_jschl_tk__=1bb44766f90a062e043b4fae4c8a81cf1bf5998f-1601030802-0-AdIPuXKmJP4EsNaihsqf5e58IvQ2gLivUte85SVKrCwy_u54vceQ7TKFhVSfwfvXkbg2kxgFnRhRXxPFWJlXYRvolb7MO44rna-UaP3hgsy-1Td871mLkUl4otdwQCipdMBO8RE97sGJVTqxunZlcAiTJGliqlCFrWjzk6FWBr1zlUTCbt1HQnF-BT1M92O-2LpR4utEcHw18kFFLqLELrfyKgyoGhOsw3lvjLLsn2sNkf7BwXbu_KnGKAGrsP4tWNhT9jEkKMTuoyRNytsBhKUyXZls27oKexxafx5U-zx11mlfyVRUBQjYi7iXVqTHnw" target="_blank" rel="noopener">vue3.0 新特性 </a><br>发表于 2019-12-05 </p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://v3.cn.vuejs.org/guide/migration/introduction.html#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从 Vue 2 迁移&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-ali
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Html2canvas实践</title>
    <link href="http://yoursite.com/sum/jsplus/html2canvas%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/html2canvas实践/</id>
    <published>2020-08-17T00:00:00.000Z</published>
    <updated>2020-10-03T15:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Vant实践</title>
    <link href="http://yoursite.com/sum/jsplus/vant%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/sum/jsplus/vant实践/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.090Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.8.10 星期一  20：58 </p><h3 id="v-popup"><a href="#v-popup" class="headerlink" title="v-popup"></a>v-popup</h3><ol><li>ios中弹窗出现（居中），页面滚动。跳到第二个页面，然后返回时弹窗位置不居中：在页面的底部<br>可以在页面加载完成后通过js滚动到页面顶部 scrollTo(0,0)。或者弹窗出现后禁止滚动<!-- [vux的popup组件的ios兼容问题](https://blog.csdn.net/shuxians/article/details/83834485) --><!-- $_PS: 不是一个组件库啊vux 和 vant。 --></li></ol><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.8.10 星期一  20：58 &lt;/p&gt;

&lt;h3 id=&quot;v-popup&quot;&gt;&lt;a href=&quot;#v-popup&quot; class=&quot;headerlink&quot; title=&quot;v-popup&quot;&gt;&lt;/a&gt;v-popup&lt;/
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="ui-lib" scheme="http://yoursite.com/tags/ui-lib/"/>
    
  </entry>
  
  <entry>
    <title>别有用心的Ts（关于ts的认识）</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%85%B3%E4%BA%8Ets%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/sum/jsplus/关于ts的认识/</id>
    <published>2020-07-26T00:00:00.000Z</published>
    <updated>2020-10-05T10:11:19.772Z</updated>
    
    <content type="html"><![CDATA[<p>typescript 文档：&lt;&gt;<br><a id="more"></a> </p><p>以下，一个不愿接受，没有接触，也不会使用ts 的 非专业人员 想法。<br>就是喜欢浪，代码已经手动规范。而且也不需要再编译<br><!-- 学不动。在前端高速发展的时候，还得懂点后端接口（不然怎么和后端同学切磋），服务端配置，集成部署。小程序，（快应用），跨端开发。其他新技术现在要求挺高的，还要懂各种计算机，编译，框架 等原理。来不及学 加班，都写不完的需求。还不是bug，项目都没得优化--></p><p style="text-align:right">2020.7.26 星期日 17:13</p><h3 id="什么"><a href="#什么" class="headerlink" title="什么"></a>什么</h3><p>声明或定义 变量类型。<br><del>其实并没有拓展js语法，比如：接口，泛型，等。</del></p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>本质上，并不会成为一个新语言。除非直接编译成c或者二进制。</p><p>js 需要的语法，在ECMA 会慢慢完善。<br>ts 徒增一层编译，最后还是要转成js，编译效率还不错吗？。<br>虽然ECMA 也是经babel 转js，但ECMA 还是js的语法，bable只是兼容。 </p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>java，c 等也需要编译成二进制 才可以被计算机识别。<br>ts 是编译成它原始的语言js，而非二进制。不如webassembly 等。</p><h3 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h3><p>js本是弱类型。ts 要转成强类型，</p><ol><li>代码中变量类型（函数参数，返回）等是明确了，代码的语义是明确了。<br>但是代码量却增加，有时候还需要提前定义/声明复杂的接口。</li></ol><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>js本是在浏览器环境直接执行的，不需要太多框框。<br>ts 写为强类型真的合适吗？</p><p>前端飞快发展，各种框架，应用场景 越来越丰富。<br><!-- 比如：vue，react，angular；各种小程序框架(weex, ~~mpvue~~，uniapp，tora，chamleon)；跨端开发，electron,rn, flutter；快应用；光vue和react 生态就有许多应用以及服务端的浸入：express,koa,egg游戏开发：webassembly, 白鹭还有工程化：webpack，rollup，glup，grunt；ci/cd --></p><p>typescript 也想分一杯羹。觉得js 不如其他高级语言，比如java等没有类型声明，这些强迫者觉得不声明类型，这个语言就是低级语言，bug就会多。</p><p>难道用高级语言，声明了变量类型（也没有多高级）bug 就会减少吗？</p><p>在（前端）开发的基本背景下：<strong>开发时间短；迭代周期快；需求变化快；项目生命短；人员变换多；</strong><br>即使在大公司，也不能确定他们的项目代码是符合开发标准的。<br>尽管后端的接口声明了返回的类型，但是经常是不确认的。一个空值，可能是null，undefined,[],{},0,’’(用不同的json 转换包，返回的不尽相同)。  前端仍然需要做许多判断：!= null，isArray， {}； 接口状态不是 数字，就是字符串（因为要对多个平台接口，每个接口规范不同，写的人的风格也不一样）。</p><p>这时候，根本不能明确定义一个 response 就是 Object 或者number。也有可能是null，或者字符串。<br>为了声明一个想要的变量类型，需要多兼容一下接口可能返回的所有未知的类型。</p><p>我见过的大多数后端接口，不会按照前端想要的格式返回：空对象就是不要返回null，或者了需要吞掉返回的字段，直接返回{}。（我们这接口就是这样的，你们前端自己判断/转一下吧，我这还有其他接口）</p><p>那些接受了强类型的人，非要把js 变成ts。这样可以解决什么问题呢？<br><!-- 写一堆类型声明；然后为了某个兼容，多写一些增加阅读量的代码；经常变更，再在声明里重写。 --></p><p>如果不能完全发挥ts 的优势；或者使用不熟练，只会使项目越来越坨。</p><p>###　解决<br>js语言 相较其他语言是有许多问题。<br>每个语言都会有问题，但都是慢慢在变得完善。</p><p>注解是个好东西。<br>注释更是好东西。可以标注 数据类型，是否可选，变量含义，解释代码逻辑 等。<br>不用类型声明，用注释；或者变量赋值时的默认值，变量名，都可以很好的定义变量类型。</p><p>如果这点约定做不到，即使是强类型声明变量类型。也会写错，照样编译不过。<br>如果能做到，还需要强类型的限制，丢掉语言的灵活性吗。</p><p>如果大家都能照着约定/规范 开发就好了</p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ol><li>强制规范 语言。不同的开发人员，新手 不写错误的代码。</li><li>代码 可读性 更强。</li><li>bug 更少？？</li></ol><p>但愿如此。<br>如果一个新手，看一个number类型；觉得他现在要添加一个string 类型，就会加一个类型声明上去。<br>再来一个人，觉得不好；也要扩展，最后可能 就是any。<br>大抵如此。都any 容易一些。如果只是单一的number 声明类型也不是很重要。</p><p>如果还有人想抽离一个接口出来，那他可能需要更新的地方不止一处了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果你正在开发一个新的项目<br>而且这个项目会持续较长的时间，时间充裕，对稳定性要求比较高<br>成员间都能熟悉使用ts，如果有新人能够接受学习过程，并规范后续新人的开发<br>可以使用ts</p><p>有优点自是不必说的。<br>仍然要注意 规范和 优化。<br>因为本身就是做了一个规范；而且需要编译，项目大当然需要优化了。不可能不编译直接使用吧</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>如果js 中真需要 强类型，它自会支持的。<br>也许可能是新的一种语言，有他自己的适用标准。<br>但觉不会是ts。</p><p>java 的出现，是因为c 复杂。<br>js 就简单多了，为什么要多加一层ts。徒增复杂，实际意义也不大。<br>ts 不比coffe script 强多少（只是坐上了js的快车；也没接触过coffee）<br>为什么会有一种ts 很有必要，和火的感觉呢？</p><p>是不是它别有用心呢？<br>搅乱js的市场。盘子这么大，好搅拌吗</p><p>一切把简单的东西 复杂化，都是作恶；如果它没有解决任何实际性问题，就是十恶不赦。<br>我们总结出的规律，原则/框架，法律 等，都是想要把问题简单化。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>强类型 确实 很好。<br>但在多数前端开发中，可能是鸡肋。不如弃之<br>学习成本/回报率低 </p><p>个人非科班，开始学java 感觉约束性太强。<br>转向js，就喜欢 浪。</p><p>如果你有很好的开发习惯，自然会利用语法的灵活性。而不是肆意而为<br>而没有，强类型也救不了。只会越写越糟</p><p style="text-align:right">19:18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;typescript 文档：&amp;lt;&amp;gt;&lt;br&gt;
    
    </summary>
    
      <category term="thinking" scheme="http://yoursite.com/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>Css单位(大小)</title>
    <link href="http://yoursite.com/sum/css/css%E5%8D%95%E4%BD%8D/"/>
    <id>http://yoursite.com/sum/css/css单位/</id>
    <published>2020-07-15T00:00:00.000Z</published>
    <updated>2020-07-15T13:14:46.750Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.7.15 星期三  19：34 </p><h1 id="单位-大小"><a href="#单位-大小" class="headerlink" title="单位-大小"></a>单位-大小</h1><h2 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2><p>padding 百分比是相对于元素的宽度.(对于需要保持高宽比的图，应改用 padding-top== 实现)</p><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>相对于根元素 html。</p><h3 id="62-5-问题"><a href="#62-5-问题" class="headerlink" title="62.5% 问题"></a>62.5% 问题</h3><!-- 1. html 默认设置font-size: 16px（chrome，其它未确定，不够可以手动设置为16px）2. body 设置 font-size: 62.5%;  这样body下的元素通过em。 20em === 200px  --><ol><li>html 设置font-size: 10px 或者62.5% </li><li>页面所有元素 可直接使用。  20rem === 200px<br>此时，html页面字体并不会显示/计算属性 12px（chrome默认最小显示字体大小12px）。<br>不过，通过html 10px或者62.5 计算 页面内元素的rem 的font-size值仍然是正确的。即 2rem === 20px</li><li>只有body会继承html 的10px。此时可以在body中重新设置页面的默认字体大小，比如14px。  body{font-size: 1.4rem;}</li></ol><p>#### 为什么是62.5%<br>10/16 = .625 。以10为基数，方便计算。即1rem = 10px</p><h3 id="移动端使用"><a href="#移动端使用" class="headerlink" title="移动端使用"></a>移动端使用</h3><p>移动端自适应分辨率，通过js 动态设置html的fontSize值。<br>ui 设计图是320px。则 html{font-size: clentWidth/320 * 10 }</p><h2 id="vw和vh"><a href="#vw和vh" class="headerlink" title="vw和vh"></a>vw和vh</h2><p>认识视口单位（ Viewport units )<br>而视口单位中的“视口”，在桌面端，毫无疑问指的就是浏览器的可视区域；但是在移动端，它指的则是三个 Viewport 中的 Layout Viewport 。</p><p>根据CSS3规范，视口单位主要包括以下4个：<br>vw : 1vw 等于视口宽度的1%<br>vh : 1vh 等于视口高度的1%<br>vmin : 选取 vw 和 vh 中最小的那个<br>vmax : 选取 vw 和 vh 中最大的那</p><p>例如，在桌面端浏览器视口尺寸为650px，那么 1vw = 650 * 1% = 6.5px（这是理论推算的出，如果浏览器不支持0.5px，那么实际渲染结果可能是7px）。</p><p>包括字体也可以设置.<br>移动端单位，浏览器也可以用</p><h3 id="vw单位和百分比-单位对比"><a href="#vw单位和百分比-单位对比" class="headerlink" title="vw单位和百分比%单位对比"></a>vw单位和百分比%单位对比</h3><p>那么100vw和我们平时用的width:100%有什么区别呢？</p><ol><li>百分比%是根据父元素宽度或者高度进行计算，而vw vh固定按照viewport来计算，不会受父元素宽高度影响。</li><li>100vw包括了页面滚动条宽度（页面滚动条属于viewport范围内，100vw当然包括了页面滚动条宽度）。<br>但把body或者html设置为width:100%时，是不包括页面滚动条的宽度的。也就是说100vw在有纵向滚动条的情况下，会比100%宽。 那么就会引发一个问题：pc端使用vw单位时，如果页面内容超出一屏长度，出现了纵向滚动条，同时有元素width:100vw， 则会导致出现条横向滚动条，因为元素（100vw + 滚动条宽度）超出了viewport宽度。（移动端滚动条不占位，所以不会有这个问题）不过pc端一般不需要弹性布局，还是尽量使用width:100%更保险。<!-- ——————【移动端布局】抛弃rem，使用vw——————————版权声明：本文为CSDN博主「huangm黄敏」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/huangmin1012/java/article/details/80090245 --><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3>在移动端 ios 8 以上以及 Android 4.4 以上获得支持，并且在微信 x5 内核中也得到完美的全面支持。<br>相较之下，vw单位兼容性比rem稍差，ios8、安卓4.4及以上才完全支持。这也是为什么之前rem布局一直更流行的原因。</li></ol><h2 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h2><p>微信小程序像素/大小单位</p><h2 id="其它单位"><a href="#其它单位" class="headerlink" title="其它单位"></a>其它单位</h2><p>%:百分比<br>in:寸<br>cm:厘米<br>mm:毫米<br>pt:point，大约1/72寸</p><p>pc:pica，大约6pt，1/6寸</p><p>ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)</p><p>ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><!-- [css3新单位vw、vh、vmin、vmax的使用详解](https://blog.csdn.net/ZNYSYS520/article/details/76053961)[纯CSS3使用vw和vh视口单位实现自适应](http://caibaojian.com/vw-vh.html)[视区相关单位vw, vh..简介以及可实际应用场景](https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/)[【移动端布局】抛弃rem，使用vw](https://blog.csdn.net/huangmin1012/article/details/80090245)[CSS3自适应字体大小(vw vh)](https://www.cnblogs.com/stephenykk/p/4476704.html) --><p style="text-align:right"> 18:44</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.7.15 星期三  19：34 &lt;/p&gt;


&lt;h1 id=&quot;单位-大小&quot;&gt;&lt;a href=&quot;#单位-大小&quot; class=&quot;headerlink&quot; title=&quot;单位-大小&quot;&gt;&lt;/a&gt;单位-大小&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/sum/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>移动端自适应-单位</title>
    <link href="http://yoursite.com/sum/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94-%E5%8D%95%E4%BD%8D/"/>
    <id>http://yoursite.com/sum/css/移动端自适应-单位/</id>
    <published>2020-07-15T00:00:00.000Z</published>
    <updated>2020-07-17T09:10:42.750Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.7.15 星期三  19：34 </p><p>在pc端或者要求不是特别高的情况，可以是百分比，rem/em。或者配合媒体查询。<br>极少用到js。在移动端可能配合js动态修改字体大小的情况比较多。<br>新的单位vw，vh等在移动端布局也可以尝试，是不错的选择。</p><h2 id="移动端单位自适应"><a href="#移动端单位自适应" class="headerlink" title="移动端单位自适应"></a>移动端单位自适应</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>响应式布局的实现依靠媒体查询（ Media Queries ）来实现，选取主流设备宽度尺寸作为断点针对性写额外的样式进行适配，<br>但这样做会比较麻烦，只能在选取的几个主流设备尺寸下呈现完美适配。</p><!-- \#1 [CSS3自适应字体大小(vw vh)](https://www.cnblogs.com/stephenykk/p/4476704.html) --><p>平滑过渡方案。<br>$_PS: 感觉有点华而不实<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>:font-size <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1200px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">39px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1100px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">38px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1000px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">37px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">900px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">36px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">35px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">700px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">34px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">600px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">33px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">32px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">400px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">31px</span>; &#125;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">300px</span>) &#123; <span class="selector-tag">div</span>&#123; <span class="attribute">font-size</span>: <span class="number">30px</span>; &#125;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>即使是通过 rem 单位来实现适配，也是需要内嵌一段脚本去动态计算根元素大小。</p><p>rem在移动端应用可参考淘宝的页面<a href="http://m.taobao.com" target="_blank" rel="noopener">http://m.taobao.com</a> (html的font-size通过动态计算获取)<br>页面基准320px(20px),html font-size值的计算：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ele=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>],  </span><br><span class="line">     size=<span class="built_in">document</span>.body.clientWidth/<span class="number">320</span>*<span class="number">20</span>;  <span class="comment">// $_PS: 这里系数乘以10，以10做基底/数也是可以的</span></span><br><span class="line">ele.style.fontSize=size+<span class="string">"px"</span></span><br></pre></td></tr></table></figure></p><p>注：需设置meta缩放比1:1<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;</code><br><!-- $_#1 --></p><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw,vh"></a>vw,vh</h3><p>利用视口单位<br>实际可利用less或scss写函数/计算 编译，或者postcss 自动转化。<br>$_PS: css 有表达式，不知道是否可以利用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-px-to-viewport-opt'</span>: &#123;</span><br><span class="line">      viewportWidth: <span class="number">375</span>,</span><br><span class="line">      viewportHeight: <span class="number">667</span>,</span><br><span class="line">      unitPrecision: <span class="number">3</span>,</span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>,</span><br><span class="line">      selectorBlackList: [<span class="string">'.ignore'</span>, <span class="string">'.hairlines'</span>],</span><br><span class="line">      minPixelValue: <span class="number">1</span>,</span><br><span class="line">      mediaQuery: <span class="literal">false</span>,</span><br><span class="line">      exclude: <span class="regexp">/(\/|\\)(node_modules)(\/|\\)/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以iphone7尺寸@2x 750像素宽的视觉稿为例</span></span><br><span class="line"><span class="keyword">@function</span> vw(<span class="variable">$px</span>) &#123;</span><br><span class="line">    <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="number">750</span>) * <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设一个div元素在视觉稿中，宽度为120px，字体大小为12px</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: vw(<span class="number">120</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: vw(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2><p>百分比大小<br>流式布局/栅栏(网格)</p><p>$_PS: 静态布局，响应式布局，自适应布局，流式布局（和响应式布局有点联系），弹性布局（Flex），网格布局（Grid）<br><!-- 响应式布局可以是流式布局，也可以式媒体查询流式布局不一定要在响应式布局中，在静态布局中也有使用 --></p><p style="text-align:right"> 18:44</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2020.7.15 星期三  19：34 &lt;/p&gt;


&lt;p&gt;在pc端或者要求不是特别高的情况，可以是百分比，rem/em。或者配合媒体查询。&lt;br&gt;极少用到js。在移动端可能配合js动态修改字体大小的情况比较多。&lt;br&gt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/sum/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Lottie了解</title>
    <link href="http://yoursite.com/sum/jsplus/lottie%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/sum/jsplus/lottie了解/</id>
    <published>2020-07-13T00:00:00.000Z</published>
    <updated>2020-10-05T10:02:35.126Z</updated>
    
    <content type="html"><![CDATA[<p>github: <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">https://github.com/airbnb/lottie-android</a><br>文档：<a href="http://airbnb.io/lottie/#/web" target="_blank" rel="noopener">http://airbnb.io/lottie/#/web</a></p><p style="text-align:right">2020.7.13 星期一 23:49</p><p>LottieFiles：<a href="http://www.lottiefiles.com/" target="_blank" rel="noopener">www.lottiefiles.com/</a><br>Lottie-editor：<a href="https://github.com/sonaye/lottie-editor" target="_blank" rel="noopener">https://github.com/sonaye/lottie-editor</a></p><p>对ue老师的要求也是有的。包括性能/文件大小优化，性能支持/复杂度实现。<br>有的特效放到工程中可能不生效，需要其它方式来实现。</p><h2 id="前端-web使用"><a href="#前端-web使用" class="headerlink" title="前端/web使用"></a>前端/web使用</h2><p>多种引入方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animation = lottie.loadAnimation(&#123;</span><br><span class="line">    container: element,</span><br><span class="line">    renderer: <span class="string">'svg'</span>, <span class="comment">// svg,canvas,html</span></span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: ture,</span><br><span class="line">    animationData: <span class="string">'wave.json'</span>,</span><br><span class="line">    path: <span class="string">''</span>, <span class="comment">// json文件路径</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>实例多个api可以调用：play,stop,pause,setSpeed,goToAndPlay,…,destroy<br>多事件监听/回调</p><h2 id="实际-vue"><a href="#实际-vue" class="headerlink" title="实际/vue"></a>实际/vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import lottie from 'lottie-web'</span><br><span class="line">import animationData from '../assets/lottie/wave.json' // 直播条动效数据</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        lottieOptions: &#123;</span><br><span class="line"><span class="javascript">          loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          autoplay: <span class="literal">true</span>,</span></span><br><span class="line">          animationData: animationData,</span><br><span class="line"><span class="javascript">          assetsPath: <span class="string">'https://activity.xueersi.com/topic/growth/lottie/scholarShip/images/'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="以往方案"><a href="#以往方案" class="headerlink" title="以往方案"></a>以往方案</h3><p>前端实现svg动画（实现成本较高、维护成本高、容易有买家秀/卖家秀区别、客户端不能复用）；<br>设计师切gif（文件较大、容易有锯齿）；<br>png序列帧（文件较大、容易有锯齿）；</p><p>帧动画的缺点和局限性比较明显，合成的雪碧图文件大，且在不同屏幕分辨率下可能会失真。  </p><h3 id="lottie"><a href="#lottie" class="headerlink" title="lottie"></a>lottie</h3><p>Lottie的缺点在于若在AE动画制作的过程不注意规范，会导致数据文件大、耗内存和性能的问题；<br>Lottie-web的官方文档不够详尽，例如assetsPath参数是在看源码的时候发现的；<br>开放的API不够齐全，无法很灵活地控制动画层。</p><p>而优点也很明显，Lottie能帮助提高开发效率，精简代码，易于调试和维护；资源文件小，输出动画效果保真；跨平台——Android, iOS, Web和Windows通用。</p><p>总的来说，Lottie的引用可以替代传统的GIF和帧动画，灵活利用好提供的属性和方法可以控制动画的播放，但需注意规范设计和开发的流程，才可以更高效地完成动画的制作与调试。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><!-- [[Lottie - 轻松实现复杂的动画效果]](https://juejin.im/post/5b62e2bae51d4534c34a65e3) --><p>Lottie动画Json结构分为4层：</p><p>结构层：可以读取到动画画布的宽高，帧数，背景色，时间，起始关键帧，结束帧等信息。<br>asset：图片资源信息集合，这里放置的是 制作动画时引用的图片资源。<br>layers：图层集合，这里可以获取到多少图层，每个图层的开始帧 结束帧等。<br>shapes：元素集合，可以获取到每个图层都包含多个动画元素。</p><p>3.2 Lottie 分层渲染原理</p><h2 id="ui-ue"><a href="#ui-ue" class="headerlink" title="ui/ue"></a>ui/ue</h2><p>4.1 下载安装 After Effects<br>4.2 下载安装 Bodymovin</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><!-- [[lottie系列文章(一)：lottie介绍]](https://imweb.io/topic/5b23a745d4c96b9b1b4c4efc)[[Lottie - 轻松实现复杂的动画效果]](https://juejin.im/post/5b62e2bae51d4534c34a65e3)[想用 Lottie 做动画？先收下这份常见错误和解决方法总结](https://www.uisdc.com/lottie-common-errors-and-solutions)其它：[想用 Lottie 做动画？先收下这份常见错误和解决方法总结](https://www.uisdc.com/lottie-common-errors-and-solutions)以下3篇内容重复[Lottie-前端实现AE动效](https://zhuanlan.zhihu.com/p/67869546)[Lottie-前端实现AE动效](https://www.ucloud.cn/yun/60822.html)[前端 - Lottie 实现 AE 动效（Bodymovin）](https://blog.csdn.net/dream_weave/article/details/102925514) --><p style="text-align:right">00:00</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;github: &lt;a href=&quot;https://github.com/airbnb/lottie-android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/airbnb/lottie-android&lt;/a&gt;&lt;br
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="ui-lib" scheme="http://yoursite.com/tags/ui-lib/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序文档</title>
    <link href="http://yoursite.com/w3/minapp/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/w3/minapp/微信小程序文档/</id>
    <published>2020-07-06T00:00:00.000Z</published>
    <updated>2020-07-13T15:08:27.073Z</updated>
    
    <content type="html"><![CDATA[<p>分9大块：<br>指南, 框架, 组件, API, 服务端, 工具, 云开发, 扩展能力, 更新日志<br><a id="more"></a> </p><p style="text-align:right">2020.7.6 星期一 00:46</p><h1 id="SUM-API"><a href="#SUM-API" class="headerlink" title="SUM-API"></a>SUM-API</h1><p style="text-align:right">2020.7.6 星期一 00:46 #1</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h2 id="一-基础"><a href="#一-基础" class="headerlink" title="一 基础"></a>一 基础</h2><ol><li>wx.canIUse(‘button.open-type.contact’)： 组件属性<br>$_PS: 有何实际意义</li><li>调试<ol><li>调试-wx.setEnableDebug： 调试面板 (??v-Console)</li><li>调试-LogManager：用户反馈 在后台管理 展示情况</li><li>如何收集用户信息，有用的。logManager并不可以，报错有上限。<br>  任需自己上传。可以封装一层logManaer:可以打印日志，收集数据到自己服务器，包括上报异常</li><li>RealtimeLogManager.setFilterMsg：怎么用了</li></ol></li><li>环境变量<br> env.USER_DATA_PATH<ol><li>可否设置其他变量，比如开发模式等，根据环境变量区分代码，上报异常等<h2 id="二-路由"><a href="#二-路由" class="headerlink" title="二 路由"></a>二 路由</h2></li></ol></li><li>wx.navigateTo VS history/navigatory.<blockquote><p>小程序中页面栈最多十层。    （$_PS: 什么原理）</p></blockquote></li><li>EventChannel 和 EventEmitter(javasccrpt)<p style="text-align:right">#1 01:04 </p><br><p style="text-align:right">2020.7.13 星期一 22:54 #2</p></li></ol><h2 id="三-界面"><a href="#三-界面" class="headerlink" title="三 界面"></a>三 界面</h2><p>交互，导航栏，背景，Tab Bar，字体，<br>下拉刷新，滚动，动画，置顶，自定义组件(wx.nextTick),<br>菜单（wx.getMenuButtonBoundingClientRect), 窗口，键盘</p><ol><li>一组动画 Animation.step 是前面的所用动画都执行完。然后再执行下一个step前面的animation吗</li><li></li></ol><h2 id="四-网络"><a href="#四-网络" class="headerlink" title="四 网络"></a>四 网络</h2><p>wx.request 不分method。<br>如何封装http 请求？</p><ol><li>返回Promise </li><li>每次http都应该是一个新的wx.request 不能使用上次的，否则abort会变成上一个</li></ol><p>RequestTask,DownloadTask,UploadTask<br>http请求和 上传/下载文件是分开的。<br>上传/下载进度监听，进度条可能是不准确的</p><p>websocket,mDNS,UDP通信</p><h2 id="五-数据缓存"><a href="#五-数据缓存" class="headerlink" title="五 数据缓存"></a>五 数据缓存</h2><p>周期性更新:setBackgroundFetchToken 是个什么鬼？</p><h2 id="六-媒体"><a href="#六-媒体" class="headerlink" title="六 媒体"></a>六 媒体</h2><p>地图，图片，视频，音频，背景音频，实时音视频/语音，录音，相机，富文本，</p><p>功能还比较复杂/丰富：选文件/图片（然后上传），预览图片/多张，压缩</p><h2 id="七-位置"><a href="#七-位置" class="headerlink" title="七 位置"></a>七 位置</h2><h2 id="八-转发"><a href="#八-转发" class="headerlink" title="八 转发"></a>八 转发</h2><h2 id="九-画布"><a href="#九-画布" class="headerlink" title="九 画布"></a>九 画布</h2><h2 id="零-文件"><a href="#零-文件" class="headerlink" title="零 文件"></a>零 文件</h2><h2 id="一-开发接口"><a href="#一-开发接口" class="headerlink" title="一 开发接口"></a>一 开发接口</h2><p>登录，小程序跳转，账号信息，用户信息，数据上报/分析，<br>支付，授权，设置，收获地址，卡券，发票，生物认证，微信运动，<br>性能，订阅消息，微信红包</p><p>后面这些api都怎么实用啊.<br>比如：数据上报/分析。wx.reportMonitor, wx.reportAnalytics</p><h2 id="二-设备"><a href="#二-设备" class="headerlink" title="二 设备"></a>二 设备</h2><h2 id="三-Worker"><a href="#三-Worker" class="headerlink" title="三 Worker"></a>三 Worker</h2><h2 id="四-第三方平台"><a href="#四-第三方平台" class="headerlink" title="四 第三方平台"></a>四 第三方平台</h2><h2 id="五-WXML"><a href="#五-WXML" class="headerlink" title="五 WXML"></a>五 WXML</h2><h2 id="六-广告"><a href="#六-广告" class="headerlink" title="六 广告"></a>六 广告</h2><p style="text-align:right">#1 23:08 </p><hr><h1 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h1><h2 id="一-基础-1"><a href="#一-基础-1" class="headerlink" title="一 基础"></a>一 基础</h2><h2 id="二-路由-1"><a href="#二-路由-1" class="headerlink" title="二 路由"></a>二 路由</h2><h2 id="三-界面-1"><a href="#三-界面-1" class="headerlink" title="三 界面"></a>三 界面</h2><h2 id="四-网络-1"><a href="#四-网络-1" class="headerlink" title="四 网络"></a>四 网络</h2><h2 id="五-数据缓存-1"><a href="#五-数据缓存-1" class="headerlink" title="五 数据缓存"></a>五 数据缓存</h2><h2 id="六-媒体-1"><a href="#六-媒体-1" class="headerlink" title="六 媒体"></a>六 媒体</h2><h2 id="七-位置-1"><a href="#七-位置-1" class="headerlink" title="七 位置"></a>七 位置</h2><h2 id="八-转发-1"><a href="#八-转发-1" class="headerlink" title="八 转发"></a>八 转发</h2><h2 id="九-画布-1"><a href="#九-画布-1" class="headerlink" title="九 画布"></a>九 画布</h2><h2 id="零-文件-1"><a href="#零-文件-1" class="headerlink" title="零 文件"></a>零 文件</h2><h2 id="一-开发接口-1"><a href="#一-开发接口-1" class="headerlink" title="一 开发接口"></a>一 开发接口</h2><h2 id="二-设备-1"><a href="#二-设备-1" class="headerlink" title="二 设备"></a>二 设备</h2><h2 id="三-Worker-1"><a href="#三-Worker-1" class="headerlink" title="三 Worker"></a>三 Worker</h2><h2 id="四-第三方平台-1"><a href="#四-第三方平台-1" class="headerlink" title="四 第三方平台"></a>四 第三方平台</h2><h2 id="五-WXML-1"><a href="#五-WXML-1" class="headerlink" title="五 WXML"></a>五 WXML</h2><h2 id="六-广告-1"><a href="#六-广告-1" class="headerlink" title="六 广告"></a>六 广告</h2><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h3><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><h3 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h3><h3 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h3><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><h3 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h3><h3 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h3><h3 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h3><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><h3 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h3><h3 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h3><h3 id="6-3"><a href="#6-3" class="headerlink" title="6.3"></a>6.3</h3><h3 id="6-4"><a href="#6-4" class="headerlink" title="6.4"></a>6.4</h3><h3 id="6-5"><a href="#6-5" class="headerlink" title="6.5"></a>6.5</h3><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><h3 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h3><h3 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h3><h3 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h3><h3 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h3><h3 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h3><h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><h2 id="八"><a href="#八" class="headerlink" title="八"></a>八</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h3><h3 id="8-2"><a href="#8-2" class="headerlink" title="8.2"></a>8.2</h3><h3 id="8-3"><a href="#8-3" class="headerlink" title="8.3"></a>8.3</h3><h3 id="8-4"><a href="#8-4" class="headerlink" title="8.4"></a>8.4</h3><h3 id="8-5"><a href="#8-5" class="headerlink" title="8.5"></a>8.5</h3><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><h2 id="九"><a href="#九" class="headerlink" title="九"></a>九</h2><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><h3 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h3><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h3><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h3><h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><h3 id="0-1"><a href="#0-1" class="headerlink" title="0.1"></a>0.1</h3><h3 id="0-2"><a href="#0-2" class="headerlink" title="0.2"></a>0.2</h3><h3 id="0-3"><a href="#0-3" class="headerlink" title="0.3"></a>0.3</h3><h3 id="0-4"><a href="#0-4" class="headerlink" title="0.4"></a>0.4</h3><h3 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h3><p style="text-align:right"> </p><h4 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h4><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><h4 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h4><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><h4 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h4><p>#### </p><h2 id="一-1"><a href="#一-1" class="headerlink" title="一"></a>一</h2><h2 id="二-1"><a href="#二-1" class="headerlink" title="二"></a>二</h2><h2 id="三-1"><a href="#三-1" class="headerlink" title="三"></a>三</h2><h2 id="四-1"><a href="#四-1" class="headerlink" title="四"></a>四</h2><h2 id="五-1"><a href="#五-1" class="headerlink" title="五"></a>五</h2><h2 id="六-1"><a href="#六-1" class="headerlink" title="六"></a>六</h2><h2 id="七-1"><a href="#七-1" class="headerlink" title="七"></a>七</h2><h2 id="八-1"><a href="#八-1" class="headerlink" title="八"></a>八</h2><h2 id="九-1"><a href="#九-1" class="headerlink" title="九"></a>九</h2><h2 id="零-1"><a href="#零-1" class="headerlink" title="零"></a>零</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分9大块：&lt;br&gt;指南, 框架, 组件, API, 服务端, 工具, 云开发, 扩展能力, 更新日志&lt;br&gt;
    
    </summary>
    
      <category term="w3" scheme="http://yoursite.com/categories/w3/"/>
    
      <category term="minapp" scheme="http://yoursite.com/categories/w3/minapp/"/>
    
    
      <category term="minapp" scheme="http://yoursite.com/tags/minapp/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序文档</title>
    <link href="http://yoursite.com/w3/minapp/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3-API/"/>
    <id>http://yoursite.com/w3/minapp/微信小程序文档-API/</id>
    <published>2020-07-06T00:00:00.000Z</published>
    <updated>2020-07-13T15:17:58.929Z</updated>
    
    <content type="html"><![CDATA[<p>分9大块：<br>指南, 框架, 组件, API, 服务端, 工具, 云开发, 扩展能力, 更新日志<br><a id="more"></a> </p><p style="text-align:right">2020.7.6 星期一 00:46</p><h1 id="SUM-API"><a href="#SUM-API" class="headerlink" title="SUM-API"></a>SUM-API</h1><p style="text-align:right">2020.7.6 星期一 00:46 #1</p><p>api 挺丰富。又有点复杂。<br>虽然划分了模块，但是每个模块/api 感觉使用起来不顺手。<br><del>有原生js不能实现的一些系统级别的操作</del>，不单单是微信的能力。<br>基本还是js，但是没有js 简单灵活。<br>api基本是通过函数参数/对象，函数回调实现。<br>没有现代ES Promise，async/await 可能回调嵌套。<br>虽然有些个api 支持同步调用。<br>还有api支持的版本也不尽相同，极少可能抛弃了。需要做兼容</p><p>社区问题挺多，基本都是那些个问题。<br>官方修复问题的能力有待商榷。基本上哪里都会有那么一点问题。</p><p>总：需要用的时候，具体再查文档吧。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h2 id="一-基础"><a href="#一-基础" class="headerlink" title="一 基础"></a>一 基础</h2><ol><li>wx.canIUse(‘button.open-type.contact’)： 组件属性<br>$_PS: 有何实际意义</li><li>调试<ol><li>调试-wx.setEnableDebug： 调试面板 (??v-Console)</li><li>调试-LogManager：用户反馈 在后台管理 展示情况</li><li>如何收集用户信息，有用的。logManager并不可以，报错有上限。<br>  任需自己上传。可以封装一层logManaer:可以打印日志，收集数据到自己服务器，包括上报异常</li><li>RealtimeLogManager.setFilterMsg：怎么用了</li></ol></li><li>环境变量<br> env.USER_DATA_PATH<ol><li>可否设置其他变量，比如开发模式等，根据环境变量区分代码，上报异常等<h2 id="二-路由"><a href="#二-路由" class="headerlink" title="二 路由"></a>二 路由</h2></li></ol></li><li>wx.navigateTo VS history/navigatory.<blockquote><p>小程序中页面栈最多十层。    （$_PS: 什么原理）</p></blockquote></li><li>EventChannel 和 EventEmitter(javasccrpt)<p style="text-align:right">#1 01:04 </p><br><p style="text-align:right">2020.7.13 星期一 22:54 #2</p></li></ol><h2 id="三-界面"><a href="#三-界面" class="headerlink" title="三 界面"></a>三 界面</h2><p>交互，导航栏，背景，Tab Bar，字体，<br>下拉刷新，滚动，动画，置顶，自定义组件(wx.nextTick),<br>菜单（wx.getMenuButtonBoundingClientRect), 窗口，键盘</p><ol><li>一组动画 Animation.step 是前面的所用动画都执行完。然后再执行下一个step前面的animation吗</li><li></li></ol><h2 id="四-网络"><a href="#四-网络" class="headerlink" title="四 网络"></a>四 网络</h2><p>wx.request 不分method。<br>如何封装http 请求？</p><ol><li>返回Promise </li><li>每次http都应该是一个新的wx.request 不能使用上次的，否则abort会变成上一个</li></ol><p>RequestTask,DownloadTask,UploadTask<br>http请求和 上传/下载文件是分开的。<br>上传/下载进度监听，进度条可能是不准确的</p><p>websocket,mDNS,UDP通信</p><h2 id="五-数据缓存"><a href="#五-数据缓存" class="headerlink" title="五 数据缓存"></a>五 数据缓存</h2><p>周期性更新:setBackgroundFetchToken 是个什么鬼？</p><h2 id="六-媒体"><a href="#六-媒体" class="headerlink" title="六 媒体"></a>六 媒体</h2><p>地图，图片，视频，音频，背景音频，实时音视频/语音，录音，相机，富文本，</p><p>功能还比较复杂/丰富：选文件/图片（然后上传），预览图片/多张，压缩</p><h2 id="七-位置"><a href="#七-位置" class="headerlink" title="七 位置"></a>七 位置</h2><h2 id="八-转发"><a href="#八-转发" class="headerlink" title="八 转发"></a>八 转发</h2><h2 id="九-画布"><a href="#九-画布" class="headerlink" title="九 画布"></a>九 画布</h2><h2 id="零-文件"><a href="#零-文件" class="headerlink" title="零 文件"></a>零 文件</h2><h2 id="一-开发接口"><a href="#一-开发接口" class="headerlink" title="一 开发接口"></a>一 开发接口</h2><p>登录，小程序跳转，账号信息，用户信息，数据上报/分析，<br>支付，授权，设置，收获地址，卡券，发票，生物认证，微信运动，<br>性能，订阅消息，微信红包</p><p>后面这些api都怎么实用啊.<br>比如：数据上报/分析。wx.reportMonitor, wx.reportAnalytics</p><h2 id="二-设备"><a href="#二-设备" class="headerlink" title="二 设备"></a>二 设备</h2><h2 id="三-Worker"><a href="#三-Worker" class="headerlink" title="三 Worker"></a>三 Worker</h2><h2 id="四-第三方平台"><a href="#四-第三方平台" class="headerlink" title="四 第三方平台"></a>四 第三方平台</h2><h2 id="五-WXML"><a href="#五-WXML" class="headerlink" title="五 WXML"></a>五 WXML</h2><h2 id="六-广告"><a href="#六-广告" class="headerlink" title="六 广告"></a>六 广告</h2><p style="text-align:right">#1 23:08 </p><h1 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h1><h2 id="一-基础-1"><a href="#一-基础-1" class="headerlink" title="一 基础"></a>一 基础</h2><h2 id="二-路由-1"><a href="#二-路由-1" class="headerlink" title="二 路由"></a>二 路由</h2><h2 id="三-界面-1"><a href="#三-界面-1" class="headerlink" title="三 界面"></a>三 界面</h2><h2 id="四-网络-1"><a href="#四-网络-1" class="headerlink" title="四 网络"></a>四 网络</h2><h2 id="五-数据缓存-1"><a href="#五-数据缓存-1" class="headerlink" title="五 数据缓存"></a>五 数据缓存</h2><h2 id="六-媒体-1"><a href="#六-媒体-1" class="headerlink" title="六 媒体"></a>六 媒体</h2><h2 id="七-位置-1"><a href="#七-位置-1" class="headerlink" title="七 位置"></a>七 位置</h2><h2 id="八-转发-1"><a href="#八-转发-1" class="headerlink" title="八 转发"></a>八 转发</h2><h2 id="九-画布-1"><a href="#九-画布-1" class="headerlink" title="九 画布"></a>九 画布</h2><h2 id="零-文件-1"><a href="#零-文件-1" class="headerlink" title="零 文件"></a>零 文件</h2><h2 id="一-开发接口-1"><a href="#一-开发接口-1" class="headerlink" title="一 开发接口"></a>一 开发接口</h2><h2 id="二-设备-1"><a href="#二-设备-1" class="headerlink" title="二 设备"></a>二 设备</h2><h2 id="三-Worker-1"><a href="#三-Worker-1" class="headerlink" title="三 Worker"></a>三 Worker</h2><h2 id="四-第三方平台-1"><a href="#四-第三方平台-1" class="headerlink" title="四 第三方平台"></a>四 第三方平台</h2><h2 id="五-WXML-1"><a href="#五-WXML-1" class="headerlink" title="五 WXML"></a>五 WXML</h2><h2 id="六-广告-1"><a href="#六-广告-1" class="headerlink" title="六 广告"></a>六 广告</h2><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分9大块：&lt;br&gt;指南, 框架, 组件, API, 服务端, 工具, 云开发, 扩展能力, 更新日志&lt;br&gt;
    
    </summary>
    
      <category term="w3" scheme="http://yoursite.com/categories/w3/"/>
    
      <category term="minapp" scheme="http://yoursite.com/categories/w3/minapp/"/>
    
    
      <category term="minapp" scheme="http://yoursite.com/tags/minapp/"/>
    
  </entry>
  
</feed>
