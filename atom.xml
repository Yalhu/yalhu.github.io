<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yalhu</title>
  
  <subtitle>yalhu&#39;s blob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-10T04:06:12.117Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yalhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome插件整理</title>
    <link href="http://yoursite.com/sum/others/chrome%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/sum/others/chrome插件整理/</id>
    <published>2021-04-09T00:00:00.000Z</published>
    <updated>2021-04-10T04:06:12.117Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input type="text" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;">   <input type="submit" value="decrypt" onclick="decrypt()" style=" width: 58px; height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "password error!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  console.log(passwd);  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>H5动画调研</title>
    <link href="http://yoursite.com/sum/jsplus/h5%E5%8A%A8%E7%94%BB%E8%B0%83%E7%A0%94/"/>
    <id>http://yoursite.com/sum/jsplus/h5动画调研/</id>
    <published>2021-04-07T00:00:00.000Z</published>
    <updated>2021-04-10T03:40:12.979Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.7 星期三  11：00 </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><!-- 完全凭第一印象 --><p>strong： Three.js，GreenSockJS<br>easy：hover.css, cssShake, wickedCSS,animate.css, Magic,Tuesday<br>  Waves,<br>  wow.js, scrollReveal.js,<br>easy+: anime.js, mo.js, Animate Plus, move.js，Velocity.js;, Bounce.js Lottie<br>spec: Vivus(svg路径)，parallax.js；Spinkit (加载)；PACE.js（加载进度条）<br>others: Popmotion.js,Dynamics.js，ParticlesJS<br>游戏相关：CreateJS，PixiJS，COCOS2DX-JS,</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>业务没确定。根据ui/ux 选择。<br>包括依赖大小，性能，成本，成熟度等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="round-1"><a href="#round-1" class="headerlink" title="round 1"></a>round 1</h3><p><a href="https://zhuanlan.zhihu.com/p/112110089" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a><br><a href="http://blog.itpub.net/69940844/viewspace-2679405/" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a><br><a href="http://blog.itpub.net/69940844/viewspace-2679405/" target="_blank" rel="noopener">前端人最值得关注的JS动画库来了</a></p><p>01 Three.js<br>该库提供<code>&lt;canvas&gt;，&lt;svg&gt;</code>，CSS3D和WebGL渲染器，使我们能够在设备和浏览器之间创建丰富的交互体验。该库于2010年4月首次引入，目前仍由近1,000名贡献者开发。<br><!-- 项目地址：https://github.com/mrdoob/three.js/ --><br>02 Anime.js<br>Anime.js是一个轻量级JavaScript动画库，具有简单但功能强大的API。</p><p>它适用于CSS属性，SVG，DOM属性和JavaScript对象。它可以通过对时间轴的回调实现对动画的控制。通过关键帧实现对动画补充与饱满，在上面几乎可以实现基本动画需要的工作。最关键的是，Anime.js适用于所有网页，你可以使用html，css，js，svg等制作动画。<br><!-- Github上的项目地址：https://github.com/juliangarnier/anime --></p><p>03 ParticlesJS<br>ParticlesJS由VincentGarreau创建，是一款特定动画的JavaScript库，用于创建点和线组成的精彩动画。如上所述，该库用于创建看起来像粒子的动画。因此，它允许开发人员切换诸如粒子的密度，颜色，不透明度，形状和大小之类的东西。但是，由于它仅适用于粒子背景，因此不适合用来创建其他类型的动画。</p><p>04 Mo.js<br>Mo.js是一个用于Web的动态图形工具带，具有简单的声明API，跨设备兼容性和超过1500个单元测试。你可以在DOME或SVGDOME周围移动东西或创建唯一的mo.js对象。虽然文档有些稀缺，但是示例很丰富。</p><p>Mo.js是一个”简洁、高效”的图形动画库，拥有流畅的动画和惊人的用户体验，在任何设备上，屏幕密度独立的效果都很好，你可以绘制内置的形状或者自定义形状，随便，只要你喜欢，你还可以绘制多个动画，再让它们串联在一起。<br><!-- Github上的项目地址：https://github.com/legomushroom/mojs --></p><p>05 ScrollReveal<br>与前面讨论的ParticlesJS一样，这也是一款特定动画的JavaScript库。<br>ScrollRevealJS用于创建十分酷炫的滚动特效，是一个轻量级的工具（没有任何依赖），而且非常容易使用，因为它使用自然语言来发送创建动画的指令。</p><p>ScrollRevealJS适用于DOM节点，多个容器，异步内容，并且支持3D旋转。ScrollRevealJS可能是创建滚动特效最好用的工具，它支持大量的浏览器，只要这些浏览器支持CSSTransform和CSSTransition特性。</p><p>06 Popmotion<br>Popmotion是一个只有12KB的JavaScript运动引擎，可以用来实现动画，物理效果和输入跟踪。</p><p>它允许开发人员从动作创建动画和交互，这些动作是可以启动和停止，可以使用CSS、SVG、React、three创建，js和任何接受数字作为输入的API。<br><!-- 在Github上的项目地址：https://github.com/Popmotion/popmotion --></p><p>07 Vivus<br>Vivus是一款可以执行SVG路径动画的轻量级Javascript库，如果你在寻找一个使用SVG的优秀库，那么VivusJS是最佳之选，尤其适合初学者。<br>这个库也很快、很轻量级，因为它没有任何依赖。除了使用SVG之外，VivusJS还可用于创建漂亮的按钮，也有其他令人惊叹的动画可供使用。<br><!-- https://github.com/maxwellito/vivus --></p><p>08 GreenSockJS<br>GSAP是一个JavaScript库，用于创建高性能，零依赖的跨浏览器动画，该动画库据称已在超过400万个网站中使用。<br>GSAP非常灵活，可以与React，Vue，Angular和VanillaJS 一起使用。GSDevtools还可以帮助调试使用GSAP构建的动画。<br><!-- 在Github上的地址为：https://github.com/greensock/GreenSock-JS --></p><p>09 Hover(CSS)<br>Hover.CSS是一个有用的CSS3悬停效果集合，可用于动作调用，按钮，商标，特性图片等，提供CSS，Sass和LESS支持。<br><!-- Github上的项目地址为：https://github.com/IanLunn/Hover --></p><p>10 Spinkit<br>Spinkit是一个酷炫的加载动画CSS集合。Spinkit使用CSS动画来创建吸引人的易于自定义的动画。<br><!-- 该集合目标不是提供所有浏览器的解决方案--如果你需要支持哪些还没实现CSS动画属性(像是IE9及之前的版本)的浏览器，你需要检测下这些动画属性并实现一个变通方案。 --></p><h3 id="round-1-2"><a href="#round-1-2" class="headerlink" title="round 1-2"></a>round 1-2</h3><p><a href="https://blog.csdn.net/u012118993/article/details/94777846" target="_blank" rel="noopener">2019年值得推荐的11款JavaScript动画库</a></p><p>Kute.js<br>成熟的原生javascript动画引擎，具有跨浏览器动画的基本功能。重点是代码质量、灵活性、性能和大小(核心引擎最小17K，gzip为5.5K)。库也是可扩展的，因此您可以添加自己的功能。<br><!-- 在Github上的项目地址：https://github.com/thednp/kute.js/ --></p><p>Typed.js<br>这个6K星的库基本上允许您以选定的速度为字符串来创建输入打字动画。您还可以在页面上放置一个HTML DIV并从中读取，以允许对禁用javascript的搜索引擎和用户进行访问。<br><!-- 在Github上的地址：https://github.com/mattboldt/typed.js --></p><p>Lottie<br>lottie是一个用于的移动端类库，在Android和iOS端渲染Adobe After Effects的动画，并以本地方式呈现。同样适用于Web、ReactNative和Windows平台。由AirBnb公司出品。<br><!-- 在Github上的地址为：https://github.com/airbnb/lottie-web --></p><h3 id="round-2"><a href="#round-2" class="headerlink" title="round 2"></a>round 2</h3><p><a href="https://www.uisdc.com/10-best-free-animation-libraries" target="_blank" rel="noopener">前端福利！10个免费好用功能强大的网页动画效果库</a><br><a href="https://www.jianshu.com/p/1e4267912e1b" target="_blank" rel="noopener">10款好用的前端动画插件</a><br><a href="https://www.toutiao.com/a6573538825295888903" target="_blank" rel="noopener">10个免费好用功能强大的网页动画效果库</a></p><ol><li>GSAP<br>10个免费好用功能强大的网页动画效果库<br>GSAP 可能目前最炫酷的免费动画库之一了。它运行于纯粹的 JavaScript 之上，是目前最强健的动画资源库之一。</li></ol><p>它符合 HTML5 的规范，并且和几乎所有的现代浏览器都能良好的协同，可以SVG、画布元素甚至 jQuery 对象良好地协同，诸如 EaselJS 这样的库也可以和 GSAP 联动。</p><p>如果你需要一个强大的网页动画库的话，GSAP绝对值得一看。</p><ol start="2"><li>Anime.js<br>我第一次看到Anime.js 这个库的时候，彻底被它迷住了。这玩意非常强大，功能并不仅限于UI/UX动画的制作。</li></ol><p>你可以借助 Anime.js 将动画加持在LOGO、按钮、图像等各种各样的元素上。它支持各种常见的触发机制，比如点击、悬停、滑动，你可以借助它定义一系列的动画。</p><ol start="3"><li>Wicked CSS<br>Wicked CSS 是一个相对更新一些的动效库，它主要是基于CSS代码的。Wicked CSS 借助 CSS3的特性，提供了一些堪称不可思议的特效。</li></ol><p>在它的首页上，你会看到许多实时演示，你可以通过这些范例学会如何让对象进行旋转、翻转、划入等不同类型的动画效果。</p><p>有些动画效果很简单，但是它同样可以实现许多复杂而有趣的动画，这也是Wicked CSS 有意思的地方。</p><ol start="4"><li>Animate CSS</li><li>Tuesday<br>Tuesday 所提供的动画最令人着迷的地方，是其中动画都非常的简单、有用。借助这个库，你可以有效的控制页面中元素的出现和消失的方式。</li></ol><p>这些动画并不是那种炫酷屌炸天的，相反它们是非常微妙的，真正从美学和用户体验的层面提升整个页面的设计。</p><p>Tuesday 是纯粹的CSS代码，几乎可以和任何网站无缝地衔接起来。</p><ol start="6"><li>CSShake<br>坦率的讲，我从来没有见过比 CSShake 更加奇怪或者有趣的 CSS库了。它所带来的动画效果非常的疯狂、独特，它并不一定适合每个网站。</li></ol><p>换句话来说，就是 CSShake 所提供的动效其实是独一无二的，这也是为什么它会存在于这个列表当中。</p><ol start="7"><li>Mo.js<br>通过细节仔细对比了诸多的 JavaScript 库之后，不得不说 Mo.js 是最好的动效库之一。Mo.JS 非常的庞大，而且它是完全为UI/UX设计而生的动效库。</li></ol><p>关于 Mo.js 有大量的文档和教程，它的代码操作并不复杂，了解之后就可以轻松掌握。</p><p>它有着许多令人惊叹的功能，无论是导航栏，还是LOGO或者其他复杂的元素，它都能够将他们合理的动画化。</p><ol start="8"><li>Animate Plus<br>Animate Plus 是一个轻量级的动效库，它只有2KB，但是它有着自定义 JavaScript 动画所需的全部基本功能。</li></ol><p>使用npm你可以轻松地将 Animate Plus 安装好，你只需要按照Github 上的代码进行设置即可。其中所包含的绝大多数都是基本的Demo，所以你不会碰到复杂的问题，不过通过Github，你会找到所有你需要的选项和方法。</p><ol start="9"><li>Bounce.js<br>只需要点击几下，你就可以借助Bounce.js创造出强大的CSS3 和 JS动画了。<br>在主页上，你会找到一个模块化的自定义动画生成器，通过这种方式，Bounce.js 会帮你将特定的功能添加到你的页面上，无需添加额外的代码。</li></ol><p>和其他的同类工具不同的地方在于，它不仅仅是一个库，而是有这用户可以直接操作的实际功能，它带有一个完整的网页构建器。Bounce.js 是为数不多的可以直接在浏览器中进行设计和设置的动画库之一。</p><ol start="10"><li>Magic<br>Magic 可能是最有趣的动效库之一。它集合了许多基于CSS3的动画效果，并且带有许多在别的地方根本找不到的自定义样式。这是一个非常大的CSS3代码库合集，你也会在这里学会许多巧妙的动画设计技巧。</li></ol><h3 id="round-x"><a href="#round-x" class="headerlink" title="round x"></a>round x</h3><p><a href="https://blog.csdn.net/qq_40028324/article/details/84779573" target="_blank" rel="noopener">前端几个常用的动画库汇总</a><br><!-- $_PS: 有链接地址。比下面的多出10以后的库 --><br><a href="https://zhuanlan.zhihu.com/p/85726670" target="_blank" rel="noopener">前端开发动画效果常用的几种动画库</a><br>1、AniJS.js<br> 基于 CSS3 的动画库</p><p>2、Velocity.js<br>Velocity 是一个简单易用、高性能、功能丰富的轻量级 JS 动画库。它能和 jQuery 完美协作，并和 $.animate() 有相同的 API， 但它不依赖 jQuery，可单独使用</p><p>3、vivus.js<br>Vivus 是一款可以执行 SVG 路径动画的轻量级 Javascript 库</p><p>4、snabbt.js<br>snabbt.js 是一款轻量级的、功能强大的、简单易用的 jQuery 动画库插件</p><p>5、PACE.js<br>网页自动加载进度条插件</p><p>6、Popmotion.js<br>Popmotion 是一个只有 12KB 的 JavaScript 运动引擎，可以用来实现动画，物理效果和输入跟踪</p><p>7、Bounce.js<br>Bounce.js 是一个漂亮的关键帧动画生成工具和类库，基于 CSS3 实现</p><p>8、Dynamics.js<br>Dynamics.js 是一款可以创建物理运动动画效果的 js 库插件</p><p>9、cta.js<br>一款轻量级 Modal 模态框插件</p><p>10、 Rocket</p><p>11、html5tooltips.js<br>html5tooltips.js 是一个轻量级和简洁的 Tooltips。采用纯 JavaScript 开发，拥有 CSS 动画，不依赖任何框架</p><p>12、ScrollReveal.js<br>ScrollReveal.js 用于创建和管理元素进入可视区域时的动画效果，帮助你的网站增加吸引力</p><p>13、WOW.js<br>WOW.js 是一款帮助你实现滚动页面时触发 CSS 动画效果的插件 收费的</p><p>14、Transit</p><p>15、parallax.js<br>Parallax.js 是一款功能非常强大的 JavaScript 视觉差特效引擎插件。通过这个视觉差插件可以制作出非常炫酷的视觉差特效，可以检测智能设备的方向。</p><p>6、CreateJS<br>CreateJS 库是一款 HTML5 游戏开发的引擎，是一套可以构建丰富交互体验的 HTML5 游戏的开源工具包<a href="https://createjs.com/" target="_blank" rel="noopener">https://createjs.com/</a></p><h3 id="round-0"><a href="#round-0" class="headerlink" title="round 0"></a>round 0</h3><p><a href="https://www.cnblogs.com/mq0036/p/11726150.html" target="_blank" rel="noopener">前端常用动画库</a><br>Anime.js<br>一个强大的、轻量级的用来制作动画的javascript库。它适用于任何CSS属性，单个CSS转换，SVG或任何DOM属性以及JavaScript对象。</p><p>Hover.css<br>CSS hover 悬停效果，可以应用于链接、按钮、图片等等，提供CSS，Sass和LESS。</p><p>Animate.css<br>目前最通用的动画库，是一个CSS3动画库，内置了很多典型的css3动画，兼容性好使用方便。</p><p>wow.js<br>滚动展示动画，依赖 animate.css，所以它支持 animate.css 多达 60 多种的动画效果</p><p>scrollReveal.js<br>和 WOW.js 一样，scrollReveal.js 也是一款页面滚动显示动画的 JavaScript，能让页面更加有趣，更吸引用户眼球。不同的是 WOW.js 的动画只播放一次，而 scrollReveal.js 的动画可以播放一次或无限次。WOW.js 依赖 animate.css，而 scrollReveal.js 不依赖其他任何文件。</p><p>Magic.css<br>一款独特的CSS3动画特效包，你可以自由地使用在您的网页中。只需简单的在页面上引入 CSS 文件: magic.css 或者压缩版本 magic.min.css 就可以使用了。</p><p>Waves<br>点击水波纹动画效果</p><p>move.js<br>Move.js是一个小型的JavaScript库，通过JS来控制一系列的CSS动画顺序执行，使CSS3动画变得非常简单和优雅。</p><p>Velocity.js<br>Velocity 是一个简单易用、高性能、功能丰富的轻量级JS动画库。它能和 jQuery 完美协作，并和.animate()有相同的API，但它不依赖jQuery，可单独使用。Velocity不仅包含了.animate()有相同的API，但它不依赖jQuery，可单独使用。Velocity不仅包含了<br> .animate() 的全部功能， 还拥有：颜色动画、转换动画(transforms)、循环、 缓动、SVG 动画、和 滚动动画 等特色功能。</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>并没有需求。自取</p><h3 id="PixiJS"><a href="#PixiJS" class="headerlink" title="PixiJS"></a>PixiJS</h3><p>PixiJS: <a href="https://www.pixijs.com" target="_blank" rel="noopener">https://www.pixijs.com</a><br>github: <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener">https://github.com/pixijs/pixi.js</a><br><a href="https://www.zhihu.com/question/267933307" target="_blank" rel="noopener">前端的canvas动画框架Pixi.js为什么火不起来？</a><br>首先pixi.js的定位是一个渲染框架，渲染速度非常快的前端渲染框架了。<br>但是pixi.js挺适合写游戏的。<br>我觉得CreateJS也很好用，也没火。当然不能和COCOS 这种引擎相提并论<br>关键的是现在官方已经放弃这个项目了，bug也不修复了，专弄cocos creator了。</p><p>createJS没火因为Adobe自己不上心，半成品没法用。</p><h3 id="Cocos"><a href="#Cocos" class="headerlink" title="Cocos"></a>Cocos</h3><p>Cocos Creator： <a href="https://docs.cocos.com/creator/manual/zh/getting-started/introduction.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/getting-started/introduction.html</a><br>Q：Cocos Creator 是游戏引擎吗？<br>A：它是一个完整的游戏开发解决方案，包含了轻量高效的跨平台游戏引擎，以及能让你更快速开发游戏所需要的各种图形界面工具。</p><p>关于 Cocos Creator:<br>Cocos Creator 是以内容创作为核心的游戏开发工具，在 Cocos2d-x 基础上实现了彻底脚本化、组件化和数据驱动等特点。</p><h3 id="Egret"><a href="#Egret" class="headerlink" title="Egret"></a>Egret</h3><p>egret: <a href="https://www.egret.com" target="_blank" rel="noopener">https://www.egret.com</a><br>Egret是一套HTML5游戏开发解决方案，产品包含Egret Engine，Egret Wing，EgretVS，Res Depot，Texture Merger，TS Conversion，Egret Feather，Egret Inspector，DragonBones，Lakeshore等。<br>而核心产品是Egret Engine，是一个基于TypeScript语言开发的一个HTML5游戏引擎，其余的大多是开发和辅助工具。</p><p>EgretPro： <a href="https://docs.egret.com/egretpro/docs/guide/getting-started-introduction" target="_blank" rel="noopener">https://docs.egret.com/egretpro/docs/guide/getting-started-introduction</a><br>目前 EgretPro 支持通过命令行的方式发布到 Web 平台。</p><h3 id="create-js"><a href="#create-js" class="headerlink" title="create.js"></a>create.js</h3><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.7 星期三  11：00 &lt;/p&gt;


&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;!-- 完全凭第一印象 --&gt;

      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Mongo数据库设计</title>
    <link href="http://yoursite.com/sum/ser/monogo%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/sum/ser/monogo数据库设计/</id>
    <published>2021-04-07T00:00:00.000Z</published>
    <updated>2021-04-10T13:20:38.406Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.7 星期三  14：37 </p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><!-- \#1 [MongoDB设计方法及技巧](https://www.cnblogs.com/zimug/p/13175156.html) --><p>二、数据库设计技巧和窍门<br>2.1.规范化存储与非规范化存储<br>所以在两种存储数据方式之间进行选择之前，先评估一下你的应用数据库的使用方式。</p><p>如果您有一个不需要频繁更新的数据，更新的即时一致性不是很重要，但是在读取时需要良好的性能，那么非规范化可能是明智的选择。（比如：我们博客的博文，作者一旦保存之后，几乎就不在进行频繁的修改，但是面临着读者频繁的读取阅读操作）</p><p>如果数据库中的文档数据需要不断的更新，并且您希望在写入时具有良好的性能，那么您可能需要考虑规范化存储。（比如：需要频繁修改数据的业务类系统）</p><p>2.2. 一对多关系<br>与RDBMS相比，在MongoDB中对“一对多”关系建模需要进行更细粒度的设计。许多初学者陷入将文档数组嵌入父文档中的陷阱。正如我们在上文中介绍的，知道何时进行规范化存储或非规范化存储是非常重要的。因此设计者需要考虑关系的基数是<strong>“一个对少数几个”还是“一个对多个”</strong>？每种关系将具有不同的建模方法。</p><p>2.3.设计模式可视化<br>尽管MongoDB是schemaless“无模式的”，但仍然存在将集合collections可视化为图表的方法。能够查看设计图，将对您理解和设计MongoDB的方式上产生重大影响。</p><p>DbSchema是可以很好地完成可视化设计工作的一个工具。<br>2.4.智能索引<br>为了保持数据库的良好性能，有必要建立智能索引，这将简化写入和读取操作。知道MongoDB的索引优势和局限性非常重要，MongoDB保留用于排序操作的内存限制为32MB。如果你不使用索引，则排序时数据库将被迫将所有排序文档hold在内存里面，如果达到32M的限制，则数据库将返回错误或空集。<br><!-- \#1 end --></p><h3 id="内嵌-vs-引用"><a href="#内嵌-vs-引用" class="headerlink" title="内嵌 vs 引用"></a>内嵌 vs 引用</h3><!-- \#2 [聊聊 MongoDB 数据库的设计](https://www.codesky.me/archives/talk-about-mongodb-collection-design.wind) --><p>各种垃圾设定，包括但不仅限于：<br>没有事务<br>没有表连接（新版支持了，但估摸着性能堪忧）</p><!-- 前两天无聊接着看《MongoDB 权威指南》的时候看到一些观点， --><p>在 SQL 中，我们经常会提起：一对一，一对多，多对多，而在 MongoDB 这样的数据库中，<strong>我们可以分为新的类型：少和多</strong>，之后我们会根据少和多进行一些数据库设计的详细分析，先来简单根据之前的介绍引用一下《MongoDB 权威指南》中的表格：</p><table><thead><tr><th>更适合内嵌</th><th>更适合引用</th></tr></thead><tbody><tr><td>子文档较小</td><td>子文档较大</td></tr><tr><td>数据不会定期改变</td><td>数据经常改变</td></tr><tr><td>最终数据一致即可</td><td>中间阶段的数据必须一致</td></tr><tr><td>文档数据小幅增加</td><td>文档数据大幅增加</td></tr><tr><td>数据通常需要执行二次查询才能获得</td><td>数据通常不包含在结果中</td></tr><tr><td>快速读取</td><td>快速写入</td></tr></tbody></table><p>由于 MongoDB 的文档会自动扩充大小，如果太过频繁的让 MongoDB 产生文档移动，将会造成性能问题，在设计阶段，可以预留足够的空间，提高写入速度。</p><!-- \#2 end --><!-- [MongoDb数据库设计](https://blog.csdn.net/wangyongxuyan/article/details/84132857) --><!-- 储存在MongoDB中的文档是一种类JSON格式，为了得到更高的效率，使用了一种二进制表现形式且被称为BSON的格式。目标是使数据更紧凑和合理以便于扫描。 客户端序列化数据成BSON传送至数据库中，数据是以BSON格式被存储的。因此，读取数据的时候，数据库只需做很小的解析处理就可以传送出去，更加高效。然后客户端在反序列化BSON格式为当前语言使用的格式。 --><h3 id="几个好处"><a href="#几个好处" class="headerlink" title="几个好处"></a>几个好处</h3><p>1、一次数据库查询可以得到整条记录。。<br>2、一条记录的所有信息都书存储在硬盘的的同一片区域，所以一次检索可以可以得到所有数据。<br>3、插入或更新单条属性时：<br>4、插入一条新属性不需要在硬盘上移动整条记录，Mongo有一个预留机制，预留出了一部分空间以适应数据对象的增长。也可以预防索引的增长等问题。 </p><p>Embed vs. Reference<br>在Mongo数据库设计中关键的一句话是“比起嵌入到其他Collection中做一个子对象，每个对象值得拥有自己的Collection吗？”。在关系数据库中。每个有兴趣的子项目通常都会分离出来单独设计一张表（除非为了性能的考虑）。而在Mongo中，是不建议使用这种设计的，嵌入式的对象更高效。(这句不是很确定Data is then colocated on disk; client-server turnarounds to the database are eliminated)数据是即时同步到硬盘上的，客户端与服务器不必要在数据库上做周转。所以通常来说问题就是“为什么不使用嵌入式对象呢？”  </p><h3 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h3><p>1、顶级对象，一般都有自己的Collection<br>2、线性细节对象，一般作为嵌入式的<br>3、一个对象和另一个对象是包含关系时通常采用嵌入式设计<br>4、多对多的关系通常采取引用设计<br>5、只含有几个简单对象的可以单独作为一个Collection，因为整个Collection可以很快的被缓存在应用程序服务器内存中。<br>6、在Collection中嵌入式对象比顶级对象更难引用。as you cannot have a DBRef to an embedded object (at least not yet).<br>7、It is more difficult to get a system-level view for embedded objects. For example, it would be easier to query the top 100 scores across all students if Scores were not embedded.<br>8、如果将要嵌入的数据量很大（很多M），你可以限制单个对象的大小<br>9、如果性能存在问题，请使用嵌入式设计<br><!-- #3 end --></p><!-- ## 其他[MongoDB 数据库的命名、设计规范详解](https://www.jb51.net/article/179928.htm)[MongoDB数据库的设计规范](https://www.cnblogs.com/xuliuzai/p/9884178.html)1. 数据库设计规范2. 2. 集合设计规范3. 文档设计规范4. 连接规范5. 操作规范 不是需要的设计规范。是一种命名、操作上的规范。--><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.7 星期三  14：37 &lt;/p&gt;


&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;!-- \#1 [MongoDB
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="monogo" scheme="http://yoursite.com/tags/monogo/"/>
    
  </entry>
  
  <entry>
    <title>indexedDB学习</title>
    <link href="http://yoursite.com/sum/jsplus/indexedDB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/sum/jsplus/indexedDB学习/</id>
    <published>2021-04-06T00:00:00.000Z</published>
    <updated>2021-04-09T09:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>IndexedDB: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API</a><br>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索。</p><p style="text-align:right"> 2021.4.6 星期二  14：20 </p><blockquote><p>此特性在 Web Worker 中可用。<br>注意： 正如大多数的 web 储存解决方案一样，IndexedDB 也遵守同源策略。</p></blockquote><h2 id="关键概念和用法"><a href="#关键概念和用法" class="headerlink" title="关键概念和用法"></a>关键概念和用法</h2><p>IndexedDB 是一个事务型数据库系统，类似于基于 SQL 的 RDBMS。 然而，不像 RDBMS 使用固定列表，IndexedDB 是一个基于 JavaScript 的面向对象数据库。</p><h3 id="同步和异步（Synchronous、asynchronous）"><a href="#同步和异步（Synchronous、asynchronous）" class="headerlink" title="同步和异步（Synchronous、asynchronous）"></a>同步和异步（Synchronous、asynchronous）</h3><p>使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。<!-- IndexedDB 最初包括同步和异步 API。同步 API 仅用于 Web Workers，且已从规范中移除，因为尚不清晰是否需要。但如果 Web 开发人员有足够的需求，可以重新引入同步 API。 --></p><h3 id="储存限制和回收标准"><a href="#储存限制和回收标准" class="headerlink" title="储存限制和回收标准"></a>储存限制和回收标准</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria" target="_blank" rel="noopener">IndexedDB 浏览器存储限制和清理标准</a></p><h4 id="储存限制"><a href="#储存限制" class="headerlink" title="储存限制"></a>储存限制</h4><p>浏览器的最大存储空间是动态的——它取决于您的硬盘大小。 全局限制为可用磁盘空间的50％。<br>还有另一个限制称为组限制——这被定义为全局限制的20％，但它至少有10 MB，最大为2GB。</p><h4 id="LRU策略"><a href="#LRU策略" class="headerlink" title="LRU策略"></a>LRU策略</h4><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>localForage：一个简单的 Polyfill，提供了简单的客户端数据存储的值语法。它在后台使用 IndexedDB，并在不支持 IndexedDB 的浏览器中回退到   WebSQL 或 localStorage。<br>Dexie.js：IndexedDB 的包装，通过简单的语法，可以更快地进行代码开发。<br>ZangoDB：类似 MongoDB 的 IndexedDB 接口，支持 MongoDB 的大多数熟悉的过滤、投影、排序、更新和聚合功能。<br>JsStore：一个带有 SQL 语法的 IndexedDB 包装器。<br>MiniMongo：由 localstorage 支持的客户端内存中的 mongodb，通过 http 进行服务器同步。MeteorJS 使用 MiniMongo。<br>PouchDB：使用 IndexedDB 在浏览器中实现 CouchDB 的客户端。<br>idb：一个微小的（〜1.15k）库，大多 API 与 IndexedDB 类似，但做了一些小的改进，让数据库的可用性得到了大大的提升。<br>idb-keyval：使用 IndexedDB 实现的超级简单且小巧的（~600B）基于 Promise 的键值对存储。<br>sifrr-storage：一个非常小的（~2kB）基于 Promise 的客户端键值数据库。基于 IndexedDB、localStorage、WebSQL 和 Cookies 实现。它可以自动选择上述支持的数据库，并按照优先顺序使用。<br>lovefield：Lovefield 是一个用于 Web App 的关系型数据库，使用 JavaScript 编写，可以在不同的浏览器环境中运行，提供了类似 SQL 的 API，速度快、安全且易用。</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">浏览器数据库 IndexedDB 入门教程</a><br><!-- [IndexedDB 教程](https://www.jianshu.com/p/ca838ff7e4d8) --><br><!-- 现有的浏览器数据储存方案，都不适合储存大量数据：Cookie 的大小不超过4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景。 --></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>IndexedDB 具有以下特点。<br>（1）键值对储存。<!--  IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以"键值对"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。 --><br>（2）异步。<!--  IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。 --><br>（3）支持事务。 <!-- IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。 --><br>（4）同源限制 <!-- IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库 -->。<br>（5）储存空间大 <!-- IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限 -->。<br>（6）支持二进制储存。<!-- IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。 --></p><p>（8）能够为数据建立索引，以此提高查询数据的各方面性能。<br>  <a href="https://blog.csdn.net/qq_34874034/article/details/104907704" target="_blank" rel="noopener">indexedDB概述</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>IDBFactory：数据库工厂，负责打开或者创建数据库<br><!-- IDBFactory.open 方法发送一个打开或者创建一个数据库的请求IDBFactory.deleteDatabase 方法： 发送一个删除数据库的请求 --></p><p>IDBDatabase: 数据库<br><!-- IDBDatabase.close 方法关闭数据库。 --><br><!-- IDBDatabase.createObjectStore 方法创建  -->store，相当于表<br><!-- IDBDatabase.transaction 开启一个事务。 --></p><p>IDBIndex：数据库表的索引<br>IDBObjectStore：数据库表<br>IDBTransaction：事务<br>IDBRequest：机会是所有 indexedDB 操作的返回值，indexedDB 操作请求<br><!-- IDBRequest.result 结果IDBRequest.onerror 异常事件IDBRequest.onsuccess 成功的事件 --></p><p>操作请求：IDBRequest 对象<br>指针： IDBCursor 对象<br>主键集合：IDBKeyRange 对象</p><!-- [JS-indexedDB和应用](https://blog.csdn.net/u013362192/article/details/115443766) --><!-- 索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值） --><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>区块链项目，服务端只存储加密字符串：客户端(electron)需要下载大量的加密数据，然后批量解密，并且提供排序和数据流转。所以前端没数据库是不行的<br>配合Electron做一个桌面应用<br>需要存储大量数据的应用，比如图书管理系统这类的需要存储大量数据的应用，完全可以将图书信息存储在IndexedDB中<br>配和service worker构建pwa应用，用来缓存网络请求<br>离线日志：Tent-reflow</p><h1 id="扩展须知"><a href="#扩展须知" class="headerlink" title="扩展须知"></a>扩展须知</h1><h2 id="大小限制"><a href="#大小限制" class="headerlink" title="大小限制"></a>大小限制</h2><!-- [前端大容量缓存方案-IndexedDB](https://zhuanlan.zhihu.com/p/104536473) --><p>在 Chrome 正常模式下<br>如果命中了should remain available的值 的配额将为零，对临时存储的其他写操作将失败<!-- ，但是临时存储中的现有数据将不会被删除 -->。如果尚未达到should remain available值，则配额将为共享池的20％。<br><!-- should remain available值与在大容量存储上保持空闲的空间有关。从Chrome 67开始，它是2 GB和大容量存储总容量的10％中的较低值。一旦达到此限制，对临时存储的其他写操作将失败，但是临时存储中的现有数据将不会被删除。 --></p><p>在 Chrome 隐身模式下<br>固定 100MB 的大小</p><p>IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象），所以我们可以把图片或者 3D 模型文件转化成 Blob 格式的文件，存在 IndexedDB 中，就可以解决免去二次加载时网络请求的时间。</p><!-- [IndexedDB使用与出坑指南](https://segmentfault.com/a/1190000006924681) --><p>取值相关<br>key值能够接受的数据类型<br>key path能够接受的数据类型<br>value能够接受的数据类型</p><p>清空缓存<br>用户在清除浏览器缓存时，可能会清除IndexedDB中相关的数据。</p><p>访问权限<br>部分浏览器如Safari手机版隐私模式在访问IndexedDB时，可能会出现由于没有权限而导致的异常（LocalStorage也会），需要进行异常处理。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><!-- [浏览器里的本地数据库：IndexedDB](https://www.infoq.cn/article/jglgydX0S0OMRlANvzXP) --><p>从上面的例子中可以看出，每一次操作需要至少三行代码才能完成，而且需要一直维护 DB 的对象引用，避免它被回收，这样子开发代码膨胀得太厉害，所以我们在业务中引入其他类库来减少代码量</p><p>LocalForage<br>可以指定数据存储方案，默认依次为 IndexedDB、WebSQL、LocalStorage，意味着当前 IndexedDB 失效可以有兜底措施。<br>API 简化为 CRUD ( getItem、removeItem、setItem、clear )<br>库大小为 475b</p><p>Pouchdb<br>API 简化为 put、get、remove，基于 promise 来检查回收错误<br>有较好的错误日志机制， 如失败，冲突等等，方便调试<br>库大小为 255b</p><h2 id="Web-SQL"><a href="#Web-SQL" class="headerlink" title="Web SQL"></a>Web SQL</h2><!--   [新一代的前端存储方案--indexedDB](https://my.oschina.net/jamesview/blog/1819938)IndexedDB 是 WebSQL 数据库的取代品, W3C组织在2010年11月18日废弃了webSql. IndexedDB 和WebSQL的不同点在于WebSQL 是关系型数据库（复杂）IndexedDB 是key-value型数据库（简单好使）. --><!-- [IndexedDB 实践](http://www.alloyteam.com/2019/09/13969/) --><p>由于 Web SQL 的规范已经废弃，官方说法是因为无法走标准化的流程，大概意思是你都用 SQL 了，本身就是一个标准化的东西，每个浏览器实现几乎一样，没有多样性了，没法进行标准的演进，所以废弃了。<br><!-- Web SQL Database: <https://dev.w3.org/html5/webdatabase/> --></p><blockquote><p>This document was on the W3C Recommendation track but specification work has stopped. The specification reached an impasse: all interested implementors have used the same SQL backend (Sqlite), but we need multiple independent implementations to proceed along a standardisation path.</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><!-- IndexedDB API: <https://wangdoc.com/javascript/bom/indexeddb.html>IndexedDB: <https://lavas-project.github.io/pwa-book/chapter03/5-indexeddb.html#indexeddb>[IndexedDB](https://www.cnblogs.com/l-y-h/p/11688035.html)  $_PS: 有一个vue的案例  --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IndexedDB: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozi
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器插件开发</title>
    <link href="http://yoursite.com/sum/others/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/sum/others/浏览器插件开发/</id>
    <published>2021-04-06T00:00:00.000Z</published>
    <updated>2021-04-10T13:38:52.202Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.4.6 星期二 </p><h2 id="chrome-extendtion-开发"><a href="#chrome-extendtion-开发" class="headerlink" title="chrome extendtion 开发"></a>chrome extendtion 开发</h2><p><a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="noopener">https://developer.chrome.com/extensions/manifest</a><br><a href="http://open.chrome.360.cn/extension_dev/bookmarks.html" target="_blank" rel="noopener">360开发文档-书签</a><br><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="noopener">[【干货】Chrome插件(扩展)开发全攻略]</a></p><!-- [Chrome 扩展(插件) 开发教程](https://dev.crxhome.org/guide/user_interface.html#设计交互界面)vue-doc 文档方式。更友好。 推荐入门[Chrome Extension插件开发概述](https://blog.csdn.net/haoaiqian/article/details/86749728)【干货】部分内容[Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/index.html)来源360 网页ui更简洁  --><p>manifest.json: name, icons, manifest_version, version, description<br>browser_action<br>page_action<br>options_page/ options_ui<br>chrome_url_overrides<br>devtools_page</p><p>background<br>content_scripts<br>web_accessible_resources</p><p>permissions</p><p>omnibox</p><p>injected-script, event-page,</p><h3 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h3><p>Chrome插件提供了很多实用API供我们使用，包括但不限于：<br>书签控制；<br>下载控制；<br>窗口控制；<br>标签控制；<br>网络请求控制，各类事件监听；<br>自定义原生菜单；<br>完善的通信机制；<br>等等；</p><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><!-- [浏览器插件开发-常用API](https://blog.csdn.net/mjzhang1993/article/details/84848985) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs</span><br><span class="line">chrome.runtime</span><br><span class="line">chrome.webRequest</span><br><span class="line">chrome.window</span><br><span class="line">chrome.storage</span><br><span class="line">chrome.contextMenus</span><br><span class="line">chrome.devtools</span><br><span class="line">chrome.extension</span><br></pre></td></tr></table></figure><p>chrome.runtime.getBackgroundPage(background: Window =&gt; {…}) 返回当前扩展的 background 对象<br>chrome.runtime.ma 返回清单文件<br>chrome.runtime.getURL 返回扩展中文件相对于安装位置的路径<br>chrome.runtime.setUninstallURL 设置卸载时要访问的 URL<br>chrome.runtime.reload 重新加载扩展</p><p>chrome.tabs.create(params, callback) 创建一个新的标签，以下是 params 参数<br>windowId 创建新标签的目标窗口，默认当前窗口<br>index 标签在窗口中的位置<br>url 标签导航的初始页面<br>selected 是否为选中的 默认是true<br>pinned 标签是否为固定<br>callback(tab) tab 是创建后的标签的细节，包括id<br>chrome.tabs.executeScript(tabId, details, callback) 向标签页注入脚本<br>tabId 标签页ID，默认为当前选中窗口<br>details.code 直接注入的脚本代码<br>details.file 也可以指定注入的脚本文件，与 details.code 二选一<br>chrome.tabs.get(tabId, callback) 获取指定标签页的细节<br>chrome.tabs.getSelected(windowId, callback) 获取特定窗口（windowId 默认为当前窗口） 的选中的标签<br>chrome.tabs.insertCSS(tabId, details, callback) 向页面注入样式<br>chrome.tabs.remove(tabId, callback) 移除标签</p><p>chrome.extension</p><blockquote><p>主要被用于通信支持，提供 扩展与 content_script 之间， 扩展与扩展之间，与大多数 chrome.* API 不同，chrome.extension 部分功能可以直接在 content_script 中使用<br>注意 chrome.extension 与 chrome.runtime 由很多重叠的 api , chrome.extension 比较老旧，尽量使用 chrome.runtime</p></blockquote><p>chrome.extension.connect<br>chrome.extension.onConnect<br>chrome.extension.sendMessage<br>chrome.extension.onMessage<br>chrome.extension.getURL</p><p>chrome.cookies<br><!-- [Chrome浏览器扩展开发系列之八：Chrome扩展的数据存储](https://www.cnblogs.com/champagne/p/4826611.html) --><br>chrome.cookies.onChanged.addListener(({removed, cookie}) =&gt; {…}) removed=true 表示的是cookie被删除的情况，否则表示被添加或者设置，cookie 表示操作的cookie<br>常规方法 get | remove | set | getAll 等除外，以下是可能会用到的 api</p><!-- [14-chrome 扩展开发 - chrome.storage 本地存储](http://www.ptbird.cn/chrome-extensions-storage.html) --><p>chrome.storage<br>Chrome 存储 API 提供了 2 种储存区域，分别是 sync 和 local。两种储存区域的区别在于，sync 储存的区域会根据用户当前在 Chrome 上登陆的 Google 账户自动同步数据，当无可用网络连接可用时，sync 区域对数据的读写和 local 区域对数据的读写行为一致。</p><p>对于每种储存区域，Chrome 又提供了 5 个方法，分别是 get、getBytesInUse、set、remove 和 clear。</p><!-- 其他[谷歌(Chrome)浏览器插件开发教程](https://www.jianshu.com/p/51c650f98d9c)极简demo --><h2 id="跨浏览器"><a href="#跨浏览器" class="headerlink" title="跨浏览器"></a>跨浏览器</h2><!-- [[苹果：你甚至可以在 Safari 中使用 Chrome 的插件]](https://www.infoq.cn/article/TdS104Q68yk3oLONlk9x) --><!-- 2020 年 9 月 11 日 --><p>为了让开发者不需要写多套代码，Mozilla 发布了 WebExtensions API。WebExtensions API 主要基于 JavaScript、HTML 和 CSS，可以重新打包并在 Chrome、Firefox 和 Edge 等其他浏览器中使用。</p><p>6月27日消息，在WWDC2020，苹果宣布<br>近日，苹果宣布 Safari 也可以使用 WebExtensions API 了。苹果此前所使用的 Safari App Extensions 虽然在 macOS 应用程序和 Safari 之间共享代码很便捷，但无法将组件移植到其他浏览器，也无法将其他浏览器的组件移植到 Safari 中。</p><p>值得注意的是，Safari Web 扩展需要在 macOS 11 及更高版本或者安装了 Safari 14 的 macOS 10.14.6 或 10.15.6 中使用。</p><!-- [safari浏览器开发app插件_苹果新动作：Chrome插件可以移植到Safari浏览器了](https://blog.csdn.net/weixin_32446485/article/details/113581451) --><h2 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h2><!-- [[利用Firefox开发者网站，转换Chrome插件为Firefox插件]](https://zhuanlan.zhihu.com/p/163535578)  发布于 2020-07-24--><p>1、提前准备好Chrome插件。<br>3、打开Firefox开发者网址<br><a href="https://addons.mozilla.org/zh-CN/firefox/" target="_blank" rel="noopener">https://addons.mozilla.org/zh-CN/firefox/</a><br>6、登录后，点击页面右上角“开发者中心”<br>7、点击右下角“提交新附加组件”<br>8、选择如何分发此版本。<br>因为我们上传的是别人开发的东西，只是用此方法来转换，所以一定请选“我自己托管”。不这样选，插件会出现在插件库中，全网可以搜索到。当然，大概率是你上传后根本审核不通过……<br>9、点击“选择文件”，选择刚才你准备好的插件文件。<br>10、选定你准备好的插件后，插件会自动上传并进行验证，<br>11、出现让你提交源代码的页面<br>13、找到你刚才提交的附加组件并点击</p><!-- How to develop firefox extentionsfirefox插件开发教程1.Development Overviewhttp://www.rietta.com/firefox/Tutorial/overview.pdf2.Environment Setuphttp://www.rietta.com/firefox/Tutorial/env.pdf3.Configuration Fileshttp://www.rietta.com/firefox/Tutorial/conf.pdf4.Creating GUIshttp://www.rietta.com/firefox/Tutorial/guis.pdf5.The Backendhttp://www.rietta.com/firefox/Tutorial/backend.pdf6.Preferenceshttp://www.rietta.com/firefox/Tutorial/prefs.pdf7.Localizationhttp://www.rietta.com/firefox/Tutorial/locale.pdf8.Distributionhttp://www.rietta.com/firefox/Tutorial/dist.pdf9.Securityhttp://www.rietta.com/firefox/Tutorial/security.pdf Safari: http://develop.apple.com   (打不开)firefox: http://developer.mozilla.org/en/docs/Plugins--><h2 id="safari"><a href="#safari" class="headerlink" title="safari"></a>safari</h2><p><a href="https://blog.csdn.net/mjzhang1993/article/details/106897673" target="_blank" rel="noopener">Safari 浏览器插件（扩展）开发</a><br><!--  2020-06-22 11:14:33 --></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.4.6 星期二 &lt;/p&gt;


&lt;h2 id=&quot;chrome-extendtion-开发&quot;&gt;&lt;a href=&quot;#chrome-extendtion-开发&quot; class=&quot;headerlink&quot; title=&quot;chr
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Monorepo</title>
    <link href="http://yoursite.com/sum/others/monorepo/"/>
    <id>http://yoursite.com/sum/others/monorepo/</id>
    <published>2021-04-05T00:00:00.000Z</published>
    <updated>2021-04-10T13:19:21.421Z</updated>
    
    <content type="html"><![CDATA[<p>Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。<br>monorepo 最主要的好处是统一的工作流和Code Sharing。<!-- 比如我想看一个 pacakge 的代码、了解某段逻辑，不需要找它的 repo，直接就在当前 repo；当某个需求要修改多个 pacakge 时，不需要分别到各自的 repo 进行修改、测试、发版或者 npm link，直接在当前 repo 修改，统一测试、统一发版。只要搭建一套脚手架，就能管理（构建、测试、发布）多个 package。 --><br><!-- u[Monorepo——大型前端项目的代码管理方式](https://segmentfault.com/a/1190000019309820) --></p><a id="more"></a><p style="text-align:right"> 2021.4.5 星期一  15：32 </p><p>Google 宁愿把所有的代码都放在一个 Monorepo 工程下面，<br>Vue 3、Yarn、Npm7，vue-router, babel, 等等知名开源项目的源码也是采用 Monorepo 的方式来进行管理的。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>Visibility<br>Simpler dependency management<br>Single source of truth<br>Consistency<br>Shared timeline<br>Atomic commits<br>Implicit CI<br>Unified CI/CD<br>Unified build process</p><p>Bad performance<br>Broken main/master<br>Learning curve<br>Large volumes of data<br>Ownership<br>Code reviews<br><!--  u[What is monorepo? (and should you use it?)](https://semaphoreci.com/blog/what-is-monorepo) --></p><!-- Multirepo 缺点：repo不好找，如果你有很多子项目repo、仓库又很分散、相关负责人又请假了....呵呵；Issue 不知道往哪里提，项目管理混乱。版本管理的日常开销大.... --><p>Monorepo 优点：<br>单个的lint，build，test和release流程。<br>统一的地方处理issue。<br>不用到处找项目的repo。<br>方便管理版本和依赖管理。<br>跨项目的操作和修改很容易。<br>方便统一生成 ChangeLog。</p><p>Monorepo 缺点：<br>repo 体积变大。<br>需要额外的工具实现项目间的联合调试（例如：Jest 的 watch.js，监听子项目中文件的变化，动态编译）。<br>由于项目间的依赖通过符号链接（快捷方式）实现，对打包工具有比较高的要求。<br>多个项目集中到一起后，常用的 IDE 可能会遇到麻烦</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>目前最常见的 monorepo 解决方案是 Lerna 和 yarn 的 workspaces 特性。其中，lerna 是一个独立的包，其官网的介绍是：</p><blockquote><p>a tool that optimizes the workflow around managing multi-package repositories with git and npm.</p></blockquote><h4 id="yarn-workspace-VS-lerna"><a href="#yarn-workspace-VS-lerna" class="headerlink" title="yarn workspace VS lerna"></a>yarn workspace VS lerna</h4><p>对比了 lerna 和 yarn workspace 之后，最后放弃了 lerna 的方式，改用 yarn workspace。主要的原因是 lerna 默认情况下重复安装的依赖包太多，而 yarn workspace 则避免了这个问题。<br>  <!-- [关于 monorepo 的一些尝试](https://zhuanlan.zhihu.com/p/70782864) --></p><p>对于node_modules包重复安装的问题，lerna提供了–hoist选项，相同的依赖，会「提升」到 repo 根目录下安装，但……太鸡肋了，lerna 直接以字符串对比 dependency 的版本号，完全相同才提升，semver 约定在这并不起作用。<br>yarn作为包管理器很好的解决了这个问题，只需要在根package.json中以 workspaces 字段声明 packages目录和”private”: true,yarn 就会以 monorepo 的方式管理 packages。<br>  <!-- [大型前端项目管理 - Monorepo](https://www.jianshu.com/p/1caeeb409bff) --></p><h4 id="yarn-workspace-lerna"><a href="#yarn-workspace-lerna" class="headerlink" title="yarn workspace + lerna"></a>yarn workspace + lerna</h4><p>目前业界最佳实践是采用yarn workspace + lerna 来实现，vue3.0也是采用两者结合的方式来实现。<br>yarn workspace可以实现在一个项目中实现多个模块的依赖新增和共用，而lerna的功能则更完善，不仅可以管理多个模块，还有清除模块node_modules，发布模块到npm，自动更新模块间版本依赖，并支持全量发布和根据改动单独发布等功能。<br>yarn官方推荐用yarn来处理依赖安装，用lerna来处理依赖更新和发布问题。<br>  <!-- [Vue3.0中的monorepo管理模式的实现](https://www.jb51.net/article/171866.htm) --></p><h3 id="multirepo-VS-monorepo"><a href="#multirepo-VS-monorepo" class="headerlink" title="multirepo VS monorepo"></a>multirepo VS monorepo</h3><p>代码分散在不同的参考中，容易导致大量重复的内容，这个问题通过 ​monorepo​ 容易避免<br>Dev environments<br>Build configurations<br>Dependencies<br>Test configuration<br>Pull request templates<br>ESLint<br>Prettier<br>CI/CD<br>  <!-- [关于 monorepo 的一些尝试](https://zhuanlan.zhihu.com/p/70782864) --></p><!-- 小结 --><p>对于我们的项目而言，由于项目处在快速的迭代周期内，multirepo 的问题是致命的，所以选择了更复杂的 monorepo 的管理模式，也随之设计了一套复杂的版本管理方案。但是猜测在项目较为稳定的阶段，是会迁移到 multirepo 的模式的(已离职，做个猜想哈)。</p><p>monorepo 需要开发人员对代码熟悉，对 git 熟悉，否则几十人的团队去维护同一个 monorepo 仓库是玩不转的。著名开源项目采用这种模式，并且玩的有声有色，也许是因为他们都是非常优秀的程序员吧。对于上面提到的一系列问题，业务未来会找到好的解决方案，在两种模式间采用一种更为平衡的方式吧。到时再重写一篇文章做思考。<br>  <!-- u[monorepo 项目改造反思](https://rainylog.com/post/monorepo-think/) --><br>monorepo 的问题在于，各个模块都在同一仓库，不好进行模块的版本管理<br>出于代码安全层面考虑，monorepo 不能很好的控制各个模块的代码权限<br>出于代码的分支管理考虑，monorepo 不得不采用一套复杂的分支管理机制<br>  <!-- u[monorepo 项目改造反思](https://rainylog.com/post/monorepo-think/) --></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>主要以 Monorepo 的概念、MultiRepo的弊端、Monorepo 的收益以及Monorepo 的落地<br><!-- [现代前端工程为什么越来越离不开 Monorepo?](https://jishuin.proginn.com/p/763bfbd54283) --><br><!-- [大型前端项目管理 - Monorepo](https://www.jianshu.com/p/1caeeb409bff) --><br><!-- [All in one：项目级 monorepo 策略最佳实践](https://www.qiyuandi.com/zhanzhang/zonghe/12066.html) --><br>3.3.2 Eslint<br>3.3.3 Babel<br>3.4 统一命令脚本：scripty<br>3.5 统一包管理：Lerna<br>3.5.2 npm 包本地发布：Verdaccio<br>3.6 格式化 commit 信息<br>\4. ? 如何从 multirepo 迁移至使用 monorepo 策略？</p><h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><p>有的公司对一些核心代码需要有读权限的限制，开源的代码仓库管理软件比如 Git 和 Mercurial 对此是不支持的。这时候把那部分代码移到一个 git-submodule 或者 subrepository 里面也是可以的解决方案。submodule / subrepository 大家捏着鼻子也是可以用的。</p><p>因为所有人的 commit 在 monorepo 里都在一个线性历史里面，所以很嘈杂。比如要二分找一个导致网页出错的 bug 需要搜索的版本可能就不必要的多。这种时候用 Buck / Bazel 的优势就体现出来了，可以很方便的确定某个 commit 对于某个功能是不是真的有影响，不是的话可以直接跳过。<br><!-- [Monorepo 是什么，为什么大家都在用？](https://zhuanlan.zhihu.com/p/77577415) --></p><!-- git-submodule通过 Git 子模块，可以在当前 repo 中包含其它 repos、作为当前 repo 的子目录使用，同时能够保持 repos 之间的独立。可以在 .gitmodule文件中看到当前 repo 有哪些 submodule，分别的 name, branch 等。 --><p><a href="https://semaphoreci.com/blog/what-is-monorepo" target="_blank" rel="noopener">What is monorepo? (and should you use it?)</a><br><a href="https://www.infoq.cn/article/8Q6PaRIsPV_ovJuelTsr" target="_blank" rel="noopener">npm 官宣：未来将支持 monorepo 特性，带来源码管理新姿势！</a><br><!-- [精读《Monorepo 的优势》](https://blog.csdn.net/li123128/article/details/90166795) --></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。&lt;br&gt;monorepo 最主要的好处是统一的工作流和Code Sharing。&lt;!-- 比如我想看一个 pacakge 的代码、了解某段逻辑，不需要找它的 repo，直接就在当前 repo；当某个需求要修改多个 pacakge 时，不需要分别到各自的 repo 进行修改、测试、发版或者 npm link，直接在当前 repo 修改，统一测试、统一发版。只要搭建一套脚手架，就能管理（构建、测试、发布）多个 package。 --&gt;&lt;br&gt;&lt;!-- u[Monorepo——大型前端项目的代码管理方式](https://segmentfault.com/a/1190000019309820) --&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 原理-Keep-Alive</title>
    <link href="http://yoursite.com/sum/jsplus/vue%E5%8E%9F%E7%90%86/vue%E5%8E%9F%E7%90%86-keep/"/>
    <id>http://yoursite.com/sum/jsplus/vue原理/vue原理-keep/</id>
    <published>2021-03-23T00:00:00.000Z</published>
    <updated>2021-04-10T11:21:59.769Z</updated>
    
    <content type="html"><![CDATA[<p>正确打开方式：动态组件<br>缓存实现 和 更新<br>生命周期处理：<br>props: include/exclude, max 处理<br>max属性，结合LRU算法来控制最大缓存数量</p><!-- > 内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。 --><p style="text-align:right"> 2021.3.23  星期二</p><p><a href="http://caibaojian.com/vue-analysis/extend/keep-alive.html#内置组件" target="_blank" rel="noopener">Vue.js 技术揭秘</a><br><!-- [keep-alive实现原理](https://www.jianshu.com/p/9523bb439950) $_PS: 下面为同一篇[彻底揭秘keep-alive原理](https://cloud.tencent.com/developer/article/1605603)[彻底揭秘keep-alive原理(小结)](https://www.jb51.net/article/160705.htm)--></p><blockquote><p>keep-alive是一个抽象组件：它自身不会渲染一个DOM元素，也不会出现在父组件链中；使用keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<br><!-- 它提供了include与exclude两个属性，允许组件有条件地进行缓存。 --></p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span> <span class="attr">v-if</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comb</span> <span class="attr">v-else</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">comb</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test = !this.test;"</span>&gt;</span>请点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"whiteList"</span> <span class="attr">:exclude</span>=<span class="string">"blackList"</span> <span class="attr">:max</span>=<span class="string">"amount"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"whiteList"</span> <span class="attr">:exclude</span>=<span class="string">"blackList"</span> <span class="attr">:max</span>=<span class="string">"amount"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>src/core/components/keep-alive.js</p><h3 id="SMTC"><a href="#SMTC" class="headerlink" title="SMTC"></a>SMTC</h3><p>生命周期： created， destroyed， mounted<br>render。<code>&lt;keep-alive&gt;</code> 直接实现了 render 函数，而不是我们常规模板的方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'keep-alive'</span>,</span><br><span class="line">  abstract: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    include: patternTypes,</span><br><span class="line">    exclude: patternTypes,</span><br><span class="line">    max: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>.keys = []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.cache) &#123;</span><br><span class="line">      pruneCacheEntry(<span class="keyword">this</span>.cache, key, <span class="keyword">this</span>.keys)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$watch(<span class="string">'include'</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, name =&gt; matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.$watch(<span class="string">'exclude'</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, name =&gt; !matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = <span class="keyword">this</span>.$slots.default</span><br><span class="line">    <span class="keyword">const</span> vnode: VNode = getFirstComponentChild(slot)</span><br><span class="line">    <span class="keyword">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">// check pattern</span></span><br><span class="line">      <span class="keyword">const</span> name: ?string = getComponentName(componentOptions)</span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="comment">// not included</span></span><br><span class="line">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class="line">        <span class="comment">// excluded</span></span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">const</span> key: ?string = vnode.key == <span class="literal">null</span></span><br><span class="line">        <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">        <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">        : vnode.key</span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        vnode.componentInstance = cache[key].componentInstance</span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        remove(keys, key)</span><br><span class="line">        keys.push(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cache[key] = vnode</span><br><span class="line">        keys.push(key)</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.max &amp;&amp; keys.length &gt; <span class="built_in">parseInt</span>(<span class="keyword">this</span>.max)) &#123;</span><br><span class="line">          pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, <span class="keyword">this</span>._vnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      vnode.data.keepAlive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 逻辑很简单，观测他们的变化执行 pruneCache 函数，其实就是对 cache 做遍历，发现缓存的节点名称和新的规则没有匹配上的时候，就把这个缓存节点从缓存中摘除。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCache</span> (<span class="params">keepAliveInstance: any, filter: Function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedNode: ?VNode = cache[key]</span><br><span class="line">    <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">      <span class="keyword">const</span> name: ?string = getComponentName(cachedNode.componentOptions)</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">        pruneCacheEntry(cache, key, keys, _vnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了从缓存中删除外，还要判断如果要删除的缓存并的组件 tag 不是当前渲染组件 tag，也执行删除缓存的组件实例的 $destroy 方法。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCacheEntry</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  cache: VNodeCache,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  keys: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  current?: VNode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cached = cache[key]</span><br><span class="line">  <span class="keyword">if</span> (cached &amp;&amp; (!current || cached.tag !== current.tag)) &#123;</span><br><span class="line">    cached.componentInstance.$destroy()</span><br><span class="line">  &#125;</span><br><span class="line">  cache[key] = <span class="literal">null</span> </span><br><span class="line">  remove(keys, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h3><p>关注 2 个方面，首次渲染和缓存渲染。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>在渲染的最后一步，会执行 invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch) 函数执行 vnode 的 insert 钩子函数，<!-- 它的定义在 src/core/vdom/create-component.js 中： --><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> componentVNodeHooks = &#123;</span><br><span class="line">  insert (vnode: MountedComponentVNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class="line">    <span class="keyword">if</span> (!componentInstance._isMounted) &#123;</span><br><span class="line">      componentInstance._isMounted = <span class="literal">true</span></span><br><span class="line">      callHook(componentInstance, <span class="string">'mounted'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vnode.data.keepAlive) &#123;</span><br><span class="line">      <span class="keyword">if</span> (context._isMounted) &#123;</span><br><span class="line">        <span class="comment">// vue-router#1212</span></span><br><span class="line">        <span class="comment">// During updates, a kept-alive component's child components may</span></span><br><span class="line">        <span class="comment">// change, so directly walking the tree here may call activated hooks</span></span><br><span class="line">        <span class="comment">// on incorrect children. Instead we push them into a queue which will</span></span><br><span class="line">        <span class="comment">// be processed after the whole patch process ended.</span></span><br><span class="line">        queueActivatedComponent(componentInstance)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        activateChildComponent(componentInstance, <span class="literal">true</span> <span class="comment">/* direct */</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  destroy (vnode: MountedComponentVNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; componentInstance &#125; = vnode</span><br><span class="line">    <span class="keyword">if</span> (!componentInstance._isDestroyed) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!vnode.data.keepAlive) &#123;</span><br><span class="line">        componentInstance.$destroy()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deactivateChildComponent(componentInstance, <span class="literal">true</span> <span class="comment">/* direct */</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实就是在created时将需要缓存的VNode节点保存在this.cache中／在render时,如果VNode的name符合在缓存条件（可以用include以及exclude控制），则会从this.cache中取出之前缓存的VNode实例进行渲染。</p><p>其他<br><!-- [vue Tab切换以及缓存页面处理的几种方式](https://www.jb51.net/article/173595.htm) --><br><a href="https://segmentfault.com/a/1190000011978825" target="_blank" rel="noopener">聊聊keep-alive组件的使用及其实现原理</a><br>$_PS: 不是很透彻。大概意思有了。render没清楚</p><p><a href="https://blog.csdn.net/weixin_38189842/article/details/103999989" target="_blank" rel="noopener">Vue keep-alive的实现原理</a><br>$_PS: vue3<br>总结来说，keep-alive实现原理就是将对应的状态放入一个cache对象中，对应的dom节点放入缓存dom中，当下次再次需要渲染时，从对象中获取状态，从缓存dom中移出至挂载dom节点中。</p><p>主要逻辑为三：1.确认需要渲染的slot、2.将其状态置入缓存或读取已存在的缓存、3.返回slot对应的vnode，紧接着调用setupRenderEffect，渲染出dom。</p><p><a href="https://cloud.tencent.com/developer/article/1663488" target="_blank" rel="noopener">keep-alive的实现原理及LRU缓存策略</a></p><p><a href="https://www.iteye.com/blog/flychao88-1977653" target="_blank" rel="noopener">缓存淘汰算法–LRU算法</a></p><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。<br>最常见的实现是使用一个链表保存缓存数据</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正确打开方式：动态组件&lt;br&gt;缓存实现 和 更新&lt;br&gt;生命周期处理：&lt;br&gt;props: include/exclude, max 处理&lt;br&gt;max属性，结合LRU算法来控制最大缓存数量&lt;/p&gt;
&lt;!-- 
&gt; 内存管理的一种页面置换算法，对于在内存中但又不用的数据块（
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
      <category term="vue原理" scheme="http://yoursite.com/categories/sum/jsplus/vue%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue源码分析</title>
    <link href="http://yoursite.com/sum/jsplus/vue%E5%8E%9F%E7%90%86/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/sum/jsplus/vue原理/vue源码分析/</id>
    <published>2021-03-23T00:00:00.000Z</published>
    <updated>2021-04-10T13:18:46.145Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.3  </p><p>Istanbul 是 JavaScript 程序的代码覆盖率工具。<br>/<em> istanbul ignore next </em>/ 注释语法，允许某些代码不计入覆盖率。<br><!-- 下面2个问题我也不太懂，帮你找了篇文章：https://juejin.im/post/5ad804c1f265da504547fe68#heading-  [Vue源码分析：/* istanbul ignore next */](https://forum.vuejs.org/t/vue-istanbul-ignore-next/64035) --></p><!-- > Breakdown the issue in your code and provide a link to an example that replicates it. Use JSFiddle, CodePen, JSBin, or CodeSandbox. --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.3  &lt;/p&gt;


&lt;p&gt;Istanbul 是 JavaScript 程序的代码覆盖率工具。&lt;br&gt;/&lt;em&gt; istanbul ignore next &lt;/em&gt;/ 注释语法，允许某些代码不计入覆盖率。&lt;br&gt;
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
      <category term="vue原理" scheme="http://yoursite.com/categories/sum/jsplus/vue%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Ens-2021</title>
    <link href="http://yoursite.com/ins/ens/characters-2021/"/>
    <id>http://yoursite.com/ins/ens/characters-2021/</id>
    <published>2021-03-22T00:00:00.000Z</published>
    <updated>2021-04-10T03:55:44.068Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.3.22 </p><p>2021</p><h2 id="0407"><a href="#0407" class="headerlink" title="0407"></a>0407</h2><ol><li>egret: 白鹭<h2 id="0322"><a href="#0322" class="headerlink" title="0322"></a>0322</h2></li><li>opaque  [adj]: 不透明<!-- 这也是fetch的特殊跨域请求方式；其对应的response type为opaque --></li></ol><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.3.22 &lt;/p&gt;


&lt;p&gt;2021&lt;/p&gt;
&lt;h2 id=&quot;0407&quot;&gt;&lt;a href=&quot;#0407&quot; class=&quot;headerlink&quot; title=&quot;0407&quot;&gt;&lt;/a&gt;0407&lt;/h2&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="ins" scheme="http://yoursite.com/categories/ins/"/>
    
      <category term="ens" scheme="http://yoursite.com/categories/ins/ens/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie的SameSite属性</title>
    <link href="http://yoursite.com/sum/js/cookie%E7%9A%84SameSite%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/sum/js/cookie的SameSite属性/</id>
    <published>2021-03-22T00:00:00.000Z</published>
    <updated>2021-03-22T05:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2021.3.22 星期一  </p><p><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener">Cookie 的 SameSite 属性</a></p><h2 id="Lax模式问题解决"><a href="#Lax模式问题解决" class="headerlink" title="Lax模式问题解决"></a>Lax模式问题解决</h2><!-- [新版本chrome浏览器带来的跨域请求cookie丢失问题](https://www.jianshu.com/p/aa80ca97f877) [新版本chrome浏览器带来的跨域请求cookie丢失问题](https://blog.csdn.net/qq_37788558/article/details/104484888)--><p>chrome升级到80版本之后 cookie的SameSite属性默认值由None变为Lax，<br>该问题的讨论可参考：<a href="https://github.com/google/google-api-javascript-client/issues/561" target="_blank" rel="noopener">https://github.com/google/google-api-javascript-client/issues/561</a></p><p>在Lax模式下，以下类型请求将受影响：</p><p>解决方法1：<br>下面的设置无效。<br>Set-Cookie: widget_session=abc123; SameSite=None<br>下面的设置有效。<br>Set-Cookie: widget_session=abc123; SameSite=None; Secure</p><p>解决方法2：<br>两个跨域的网站部署到一起<br><!-- ，例如 www.xxx.com/A网站www.xxx.com/B网站 --></p><p>解决问题3:<br>谷歌浏览器里面：<br>chrome://flags/<br>把<code>SameSite by default cookies</code>这个参数设置成disabled</p><p>解决方法4<br>修改应用服务器方式<br>1.tomcat:<br>首先你需要在httpd.conf文件中开启mod_header模块<br>LoadModule headers_module modules/mod_headers.so<br>你打开它以后并不能生效，所以我们还要重写Set-Cookie的头信息,其他的方法我们已经尝试并不可行，目前只有这一种方法可行</p><p>2.nginx<br>在 nginx 的 location 中配置<br>proxy_cookie_path / “/; httponly; secure; SameSite=None”;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name www.cat73.org;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/cat73.org/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/cat73.org/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_trusted_certificate /etc/letsencrypt/live/cat73.org/chain.pem;</span><br><span class="line"></span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=15768000&quot;;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        # 在这里设置</span><br><span class="line">        proxy_cookie_path / &quot;/; httponly; secure; SameSite=Lax&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Cookie-的-SameSite-属性"><a href="#Cookie-的-SameSite-属性" class="headerlink" title="Cookie 的 SameSite 属性"></a>Cookie 的 SameSite 属性</h2><p><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener">Cookie 的 SameSite 属性</a><br>2.1 Strict<br>Strict最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。<br>换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。</p><p>2.2 Lax<br>Lax规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。</p><table><thead><tr><th>请求类型</th><th>示例</th><th>正常情况</th><th>Lax</th></tr></thead><tbody><tr><td>链接</td><td><code>&lt;a href=&quot;...&quot;&gt;&lt;/a&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td>预加载</td><td><code>&lt;link rel=&quot;prerender&quot; href=&quot;...&quot;/&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td>GET 表单</td><td><code>&lt;form method=&quot;GET&quot; action=&quot;...&quot;&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td>POST 表单</td><td><code>&lt;form method=&quot;POST&quot; action=&quot;...&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>iframe</td><td><code>&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>AJAX</td><td><code>$.get(&quot;...&quot;)</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>Image</td><td><code>&lt;img src=&quot;...&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr></tbody></table><p>2.3 None<br>Chrome 计划将Lax变为默认设置。这时，网站可以选择显式关闭SameSite属性，将其设为None。<br>不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p><h2 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h2><p>Cookie 往往用来存储用户的身份信息，恶意网站可以设法伪造带有正确 Cookie 的 HTTP 请求，这就是 CSRF 攻击。</p><p>例来说，用户登陆了银行网站your-bank.com，银行服务器发来了一个 Cookie。<br>用户后来又访问了恶意网站malicious.com，上面有一个表单。<br>用户一旦被诱骗发送这个表单，银行网站就会收到带有正确 Cookie 的请求。为了防止这种攻击，表单一般都带有一个随机 token，告诉服务器这是真实请求。</p><p>这种第三方网站引导发出的 Cookie，就称为第三方 Cookie。它除了用于 CSRF 攻击，还可以用于用户追踪。<br>比如，Facebook 在第三方网站插入一张看不见的图片。</p><p><code>&lt;img src=&quot;facebook.com&quot; style=&quot;visibility:hidden;&quot;&gt;</code><br>浏览器加载上面代码时，就会向 Facebook 发出带有 Cookie 的请求，从而 Facebook 就会知道你是谁，访问了什么网站。</p><h2 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享 CORS"></a>跨域资源共享 CORS</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>一、简介<br>二、两种请求<br>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>（1) 请求方法是以下三种方法之一：<br>HEAD,GET,POST<br>（2）HTTP的头信息不超出以下几种字段：<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p><h3 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h3><p>3.1 基本流程<br>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。<br>浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。<br>注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><!-- 如果Origin指定的域名在许可范围内， -->服务器返回的响应，会多出几个头信息字段。<br>（1）Access-Control-Allow-Origin<br>（2）Access-Control-Allow-Credentials<br>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。<br>（3）Access-Control-Expose-Headers<br><br>3.2 withCredentials 属性<br><!-- 上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。 --><!-- 另一方面， -->开发者必须在AJAX请求中打开withCredentials属性。<br><code>xhr.withCredentials = true;</code><br><!-- 否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。 --><h3 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h3><p>4.1 预检请求<br>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。<br>（1）Access-Control-Request-Method<br><!-- 该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。 --><br>（2）Access-Control-Request-Headers</p><p>4.2 预检请求的回应<br><!-- 服务器收到"预检"请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。 --></p><p>如果服务器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。<br>这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><p>服务器回应的其他CORS相关字段如下。<br>（4）Access-Control-Max-Age</p><h2 id="fetch的mode"><a href="#fetch的mode" class="headerlink" title="fetch的mode"></a>fetch的mode</h2><!-- [【fetch跨域请求】cors](https://blog.csdn.net/gdp12315_gu/article/details/66479524) --><p>fetch的mode配置项有3个值，如下：</p><p>same-origin：该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的response type为basic。<br>cors: 该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的response type为cors。<br>no-cors: 该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的response type为opaque。<br><!-- opaque： 不透明 --></p><p>注意： cors 支持 三种content-type 不支持 application/json<br>application/x-www-form-urlencoded<br>multipart/form-data<br>text/plain</p><!-- 为了能将请求 text/plain的body 解析为json对象，可以参考 http://stackoverflow.com/questions/12345166/how-to-force-parse-request-body-as-plain-text-instead-of-json-in-express --><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 2021.3.22 星期一  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack打包优化</title>
    <link href="http://yoursite.com/sum/jsplus/webpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/sum/jsplus/webpack打包优化/</id>
    <published>2021-03-13T00:00:00.000Z</published>
    <updated>2021-04-10T13:15:47.424Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 20213.13 星期五 </p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><!-- \# [webpack如何提高打包速度和工程优化](https://www.cnblogs.com/Joe-and-Joan/p/12701767.html) --><p>1、初始化参数：配置文件和shell语句合并参数，得到最终参数<br>2、开始编译：初始化Compiler编译对象，加载插件，执行run开始编译<br>3、确定入口：根据entry找到入口文件<br>4、编译模块：用loader进行翻译后，找出对应依赖模块<br>5、完成编译：确定了翻译的内容和依赖关系<br>6、输出准备：根据入口和模块的依赖关系，组装成包含多个模块的chunk，每个chunk转成一个文件加载到输出列表。<br>7、执行输出：根据output路径和文件名，写入文件系统。</p><!-- ## bundle，chunk，module分别指什么## Loader和Plugin的区别## HMR热更新原理（hot module replacement）## webpack在vue cli3的使用  默认splitChunks和minimize  默认CSS压缩：mini-css-extract-plugin  默认Tree-Shaking  配置configureWebpack选项  链式操作## webpack打包加速优化 --><!-- 打包/构建-过程/速度优化代码质量-结果优化数据分析-针对线上和开发调试，又有针对性方案 --><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>有针对性优化手段。<br>虽然一些基础的手段确实必要，但是应该清楚项目的瓶颈在哪里，影响多大。是否必要。<br>要对项目有清晰的认识，才可以对症下药。</p><!-- [performance](https://webpack.docschina.org/configuration/performance/): 如何展示性能提示。 --><p>performance: 如何展示性能提示。<br>performance.hints: 在生产环境构建时推荐使用 “error”</p><!-- [stats](https://webpack.docschina.org/configuration/stats/): 在统计输出里指定你想看到的信息。 --><p>stats: 在统计输出里指定你想看到的信息。<br><code>webpack --profile --json &gt; compilation-stats.json</code><br><!-- [包含统计数据的文件(stats data)](https://www.webpackjs.com/api/stats/) --></p><p>ProgressBarPlugin<br>SpeedMeasurePlugin<br>DashboardPlugin<br>BundleAnalyzerPlugin<br>DuplicatePackageCheckerPlugin<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="keyword">const</span> DashboardPlugin = <span class="built_in">require</span>(<span class="string">'webpack-dashboard/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ProgressBarPlugin(&#123;</span><br><span class="line">      format: <span class="string">'build [:bar]'</span> + chalk.green.bold(<span class="string">':percent'</span>) + <span class="string">' (:elapsed seconds)'</span>,      </span><br><span class="line">      clear: <span class="literal">false</span>    </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> DashboardPlugin(),</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123; <span class="attr">analyzerMode</span>: <span class="string">'static'</span>, <span class="attr">openAnalyzer</span>: <span class="literal">true</span>, <span class="attr">logLevel</span>: <span class="string">'info'</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">'speed-measure-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin();</span><br><span class="line">smp.wrap(webpackConfig);</span><br></pre></td></tr></table></figure></p><p>其他：webpack-chart，webpack-visualizer，webpack bundle optimize helper，bundle-stats<br><strong>注意：不分析结果的时候，上面插件都不用设置。可以通过参数去配置是否启动。</strong></p><h2 id="构建速度优化"><a href="#构建速度优化" class="headerlink" title="构建速度优化"></a>构建速度优化</h2><!-- ## 构建优化 --><p>构建往往会有不同的结果，比如生产环境，开发环境。或者node端，es module。<br>从方式上分为：构建过程/速度优化；构建结果(质量/大小)优化。<br><!-- \### 通用 --><br>有些基础优化手段，在各个结果上都适用。最后有些选项适用不同的环境。</p><h3 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h3><p>更新webpack到最新版本，包括node.js, 不论什么环境都有助于性能提升。</p><h3 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h3><!-- ### [模式（Mode）](https://webpack.docschina.org/configuration/mode/) --><p>提供 mode 配置选项，告知 webpack 使用相应模式的内置优化。</p><blockquote><p>从 webpack 4 开始，会根据你选择的 mode 来执行不同的优化， 不过所有的优化还是可以手动配置和重写。</p></blockquote><p>我们可以对比mode中默认配置，做一些优化。</p><!-- ### 入口 --><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>构建之源头。<br>相当于大厦的地基，后续的所有操作都取决于入口文件。如果可以在入口处解决，后续的优化手段完全没有必要。<br><!-- 怎么才能保证没有bug？不写代码就没有bug。 --><br>所以，开始很重要。</p><p>最简单的就是一个项目有很多个入口，有些页面由于历史原因现在已经很少维护了。<br>如果你打算对项目做优化，把这些入口从项目中移出去是最快最简单的方法。</p><p>还有就是多项目。很多个项目共用一个打包构建，单独修改其中一个项目，会重新构建所有项目。<br>这种情况可以只对修改的项目单独构建。<br>(这里可以有些思考)</p><p>同样在开发时也适用。某次的修改/feature，只会出现在一个入口里。<br>如果只启动本次相关的入口，至少每次的启动时间会减少。</p><p>方法论已经清楚了。具体操作就不解释了</p><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><!-- ### [模块（Module）](https://webpack.docschina.org/configuration/module/#ruleexclude) --><p>Module选项决定了如何处理项目中的不同类型的模块。<br>通过以下设置将 loader 应用于最少数量的必要模块，自然提升了速度（模块入口）。</p><p>module.noParse: 忽略大型的 library 可以提高构建性能。<br>module.rules：test, exclude, include。<br>test 尽量保证项目中出现的条件。用include引入符合条件的模块。或者exclude排除，比如使用babel是可以排除es5的文件。<br><!-- （虽小也是肉） --></p><p>比如图片处理都在某一个文件目录下，就可以用<code>include:path.resolve(__dirname, &#39;src/images&#39;)</code>。或者通过exclude排除不参与的node_modules<br>比如没有写typescript，而多余的引入ts的条件，包括loader</p><!-- > 每次文件系统访问文件都会被缓存，以便于更快触发对同一文件的多个并行或串行请求。在 watch 模式 下，只有修改过的文件会被从缓存中移出。如果关闭 watch 模式，则会在每次编译前清理缓存。 --><h3 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h3><!-- ### [解析(Resolve)](https://webpack.docschina.org/configuration/resolve/#resolvemodules) --><p>设置模块如何被解析，优化模块查找路径。</p><p>resolve.alias：使模块引入变得更简单。引用的时候可以不关注路径<br>resolve.extensions: 尝试按顺序解析这些后缀名。把常用的文件放在前面<br>resolve.modules: 可以使用绝对路径，将只在给定目录中搜索。比如设置node_modules为绝对路径，再加上开发目录。<br>resolve.cacheWithContext： 如果启用了不安全缓存可以设置。</p><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><!-- ### [外部扩展(externals)](https://webpack.docschina.org/configuration/externals/) --><p>某些依赖从脚本引入不参与构建。比如jQuery，editor,videojs</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><!-- #### [cache](https://webpack.docschina.org/configuration/other-options/#cache) --><p>缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用。</p><p>cache 会在开发 模式被设置成 <code>type: &#39;memory&#39;</code> 而且在 生产 模式 中被禁用。<br>或许生产环境也可以利用cache：<code>type: &#39;filesystem&#39;</code></p><h4 id="cache-loader"><a href="#cache-loader" class="headerlink" title="cache-loader"></a>cache-loader</h4><!-- #### [cache-loader](https://webpack.docschina.org/loaders/cache-loader/) --><p>在一些性能开销较大的 loader 之前添加 cache-loader。</p><blockquote><p>请注意，保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用此 loader。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.ext$/</span>,</span><br><span class="line">    use: [<span class="string">'cache-loader'</span>, ...loaders],</span><br><span class="line">    include: path.resolve(<span class="string">'src'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="插件和loader"><a href="#插件和loader" class="headerlink" title="插件和loader"></a>插件和loader</h4><p>有的插件和loader 也是可以开启缓存的。比如：babel-loader, thread-loader/HappyPack, HtmlWebpackPlugin，TerserPlugin等。<br>可以注意一下。</p><p>babel-loader 选项cacheDirectory：默认值为 false。<br><!-- 还有cacheCompression 选项 --></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>parallelism: 限制并行处理的模块数量。默认100。可以根据项目的实际情况调整以充分利用电脑性能。<br><!-- [thread-loader](https://webpack.docschina.org/loaders/thread-loader/)~~[happypack](https://github.com/amireh/happypack)~~~~[parallel-webpack](parallel-webpack) --><br>thread-loader，<del>happypack</del>, parallel-webpack</p><blockquote><p>不要使用太多的 worker，因为 Node.js 的 runtime 和 loader 都有启动开销。</p></blockquote><p>有些插件也可以配置多线程。比如TerserPlugin。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> threadLoader = <span class="built_in">require</span>(<span class="string">'thread-loader'</span>);</span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>),</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">"thread-loader"</span>,</span><br><span class="line">          <span class="comment">// 耗时的 loader （例如 babel-loader）</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length - <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'js'</span>,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: <span class="built_in">Object</span>.assign(&#123;&#125;, babelrc, &#123; <span class="attr">cacheDirectory</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure><h3 id="devtool-source-map"><a href="#devtool-source-map" class="headerlink" title="devtool/source map"></a>devtool/source map</h3><!-- ### [devtool](https://webpack.docschina.org/configuration/devtool/) --><p>控制是否生成，以及如何生成 source map。<br>不同的值会明显影响到构建(build)和重新构建(rebuild)的速度，包括构建质量。</p><p>模式是： <code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code>.<br><!-- 对于开发环境，通常希望更快速的 source map，需要添加到 bundle 中以增加体积为代价，但是对于生产环境，则希望更精准的 source map，需要从 bundle 中分离并独立存在。 --><br>inline映射文件生成到输出文件中<br>eval是打包最快的方式。会映射到转换后的代码，所以不能正确的显示行数。<br>cheap方式定位到行不精确到列;<br>module方式不止是业务层，各个模块如loader都负责<br>source-map - 整个 source map 作为一个单独的文件生成</p><p>开发环境: eval, eval-source-map, eval-cheap-source-map, eval-cheap-module-source-map(大多数情况下最佳)<br>对于生产环境：none，source-map，nosources-source-map</p><!-- > 你可以直接使用 SourceMapDevToolPlugin/EvalSourceMapDevToolPlugin 来替代使用 devtool 选项，因为它有更多的选项。> 切勿同时使用 devtool 选项和 SourceMapDevToolPlugin/EvalSourceMapDevToolPlugin 插件。 --><p>—- 以下区分不同环境: 开发和生产，及其他。—-</p><h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><!-- ### [优化(Optimization)](https://webpack.docschina.org/configuration/optimization/) --><blockquote><p>从 webpack 4 开始，会根据你选择的 mode 来执行不同的优化， 不过所有的优化还是可以手动配置和重写。</p></blockquote><p>optimization.emitOnErrors<br>optimization.removeAvailableModules<br>optimization.removeEmptyChunks<br>optimization.mergeDuplicateChunks</p><h2 id="构建质量优化"><a href="#构建质量优化" class="headerlink" title="构建质量优化"></a>构建质量优化</h2><p>大概率适用于生产环境提升网页性能。<br><!-- 也可以用在开发中 --></p><h3 id="输出包大小"><a href="#输出包大小" class="headerlink" title="输出包大小"></a>输出包大小</h3><p>TerserPlugin, <del>uglifyjs-webpack-plugin</del>：压缩代码。去除空白，注释log等。<br>CompressionWebpackPlugin： 提供gz 压缩包。<br>IgnorePlugin, (ContextReplacementPlugin, ): 忽略多语言等文件。<br><!-- element ui; moment; --><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// emitOnErrors: true, // 默认false。设为ture 关键错误会被 emit 到生成的代码中</span></span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span>, <span class="comment">// 如果在生产环境中使用 source-maps，必须设置为 true</span></span><br><span class="line">        terserOptions: &#123;</span><br><span class="line">          <span class="comment">// https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>,</span><br><span class="line">      minSize: <span class="number">20000</span>,</span><br><span class="line">      minRemainingSize: <span class="number">0</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">30</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">30</span>,</span><br><span class="line">      enforceSizeThreshold: <span class="number">50000</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">          libs: &#123;</span><br><span class="line">              name: <span class="string">"chunk-libs"</span>,</span><br><span class="line">              test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">              priority: <span class="number">10</span>,</span><br><span class="line">              chunks: <span class="string">"initial"</span> <span class="comment">// only package third parties that are initially dependent</span></span><br><span class="line">          &#125;,</span><br><span class="line">          elementUI: &#123;</span><br><span class="line">              name: <span class="string">"chunk-elementUI"</span>, <span class="comment">// split elementUI into a single package</span></span><br><span class="line">              priority: <span class="number">20</span>, <span class="comment">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span><br><span class="line">              test: <span class="regexp">/[\\/]node_modules[\\/]_?element-ui(.*)/</span> <span class="comment">// in order to adapt to cnpm</span></span><br><span class="line">          &#125;,</span><br><span class="line">          commons: &#123;</span><br><span class="line">              name: <span class="string">"chunk-commons"</span>,</span><br><span class="line">              test: resolve(<span class="string">"src/components"</span>), <span class="comment">// can customize your rules</span></span><br><span class="line">              minChunks: <span class="number">3</span>, <span class="comment">//  minimum common number</span></span><br><span class="line">              priority: <span class="number">5</span>,</span><br><span class="line">              reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/),</span><br><span class="line">    CompressionWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[path].gz[query]"</span>, <span class="comment">// 压缩后的文件策略</span></span><br><span class="line">      algorithm: <span class="string">"gzip"</span>, <span class="comment">// 压缩方式</span></span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`\\.(<span class="subst">$&#123;productionGzipExtensions.join(<span class="string">"|"</span>)&#125;</span>)$`</span>), <span class="comment">// 可设置需要压缩的文件类型</span></span><br><span class="line">      threshold: <span class="number">8192</span>, <span class="comment">// 大于8kb的文件启用压缩</span></span><br><span class="line">      minRatio: <span class="number">0.8</span> <span class="comment">// 压缩比率大于等于0.8时不进行压缩</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>ignoreWarnings：忽略掉特定的警告。<br>NoEmitOnErrorsPlugin： production  mode默认。</p><p>MinChunkSizePlugin：保持包的大小。 </p><p>ImageMinimizerWebpackPlugin： 图片压缩。<br>  可以提前压缩，或者上传到cdn服务器。<br>svg，json 等文件也都可以压缩。</p><p>有些loader和插件 也可以设置压缩。<br>比如html-loader 的minimize：在生产模式下为 true，其他情况为 false。<br><!-- file-loader: 处理图片等文件。 --><br><!-- svg-sprite-loader:  --></p><p>ui组件，utils， polyfill等按需加载。<br><!-- element ui, and design; loadash. --><br>babel.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">"component"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">            <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">          <span class="string">'import'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            libraryName: <span class="string">'vant'</span>,</span><br><span class="line">            libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">            style: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'vant'</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">          <span class="string">'@xxx/babel-plugin-utils'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            library: <span class="string">'@xxxx/xxxx-utils'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- [file-loader](https://webpack.docschina.org/loaders/file-loader/): 有可能增加文件大小。自己考量，或引入css-sprite --><h3 id="代码-文件抽离"><a href="#代码-文件抽离" class="headerlink" title="代码/文件抽离"></a>代码/文件抽离</h3><p>入口起点<!-- (entry point) -->：最简单直观的分离代码的方式。但是会chunk 之间包含一些重复的模块<br>防止重复<!-- (prevent duplication) -->：这样可以在多个 chunk 之间共享模块。<code>entry.index.dependOn: shared</code></p><p>SplitChunksPlugin：将公共的依赖模块提取到已有的入口/新生成 chunk 中。</p><blockquote><p>从 webpack v4 开始，移除了 CommonsChunkPlugin，取而代之的是 optimization.splitChunks。</p></blockquote><p>MiniCssExtractPlugin 与 extract-text-webpack-plugin 相比：<br>  异步加载；没有重复的编译（性能）；更容易使用；特别针对 CSS 开发</p><p>动态导入import() 和requirec.ensure<br>PrefetchPlugin 和 PreloadPlugin<br><code>import(/* webpackPrefetch: true */ &#39;./path/to/LoginModal.js&#39;);</code></p><p>懒加载和按需加载。</p><p>常用不经常改动的可以用cdn（+ externals），或者dllPlugin。<br>图片等资源也可以考虑从构建中移出。</p><p>DllPlugin 和 DllReferencePlugin 用某种方法实现了拆分 bundles，同时还大幅度提升了构建的速度。<br><!-- [DllPlugin](https://webpack.docschina.org/plugins/dll-plugin/) --><br>注意：某个依赖只在少数或一个模块中使用，可以动态加载。不需要DllPlugin。</p><p>source map: devtool。包括loader和插件。<br>比如：css-loader，默认情况下取决于 devtool 选项。还有TerserPlugin。</p><p>未完待续。<!-- shimming, tree shaking, es moduel, pwa, 对比vite等。  --><br><!-- ### Shimming --></p><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><!-- 将文件标记为 side-effect-free(无副作用)：通过 package.json 的 "sideEffects" 属性sideEffects 更为有效 是因为它允许跳过整个模块/文件和整个文件子树。usedExports 依赖于 terser 去检测语句中的副作用。它是一个 JavaScript 任务而且没有像 sideEffects 一样简单直接。 --><p>optimization.providedExports: 默认启用。<br><!-- 告知 webpack 去确定那些由模块提供的导出内容，为 export * from ... 生成更多高效的代码。 --><br>optimization.usedExports:<br><!-- 告知 webpack 去决定每个模块使用的导出内容。 --><br>optimization.sideEffects: 只使用手动 flag，并且不对源码进行分析.在非生产环境默认使用。<br><!-- 告知 webpack 去辨识 package.json 中的 副作用 标记或规则，以跳过那些当导出不被使用且被标记不包含副作用的模块。这个依赖会有构建时间的损耗，但去掉模块会对性能有正面的影响，因为更少的代码被生成。该优化的效果取决于你的代码库， 可以尝试这个特性以获取一些可能的性能优化。 --></p><h3 id="es-module"><a href="#es-module" class="headerlink" title="es module"></a>es module</h3><p>构建现代浏览器的module。</p><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>充分利用电脑性能，或减少滥用。</p><!-- [构建性能](https://webpack.docschina.org/guides/build-performance/#worker-pool) --><p>增量编译： watch<br>在内存中编译： webpack-dev-server， webpack-hot-middleware，..<br>stats.toJson 加速<br>Devtool： 在大多数情况下，最佳选择是 eval-cheap-module-source-map。<br>避免在生产环境下才会用到的工具。<br>最小化 entry chunk ： optimization.runtimeChunk: true.<br>避免额外的优化步骤。<br>输出结果不携带路径信息。</p><h3 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h3><!-- ### [开发服务器(DevServer)](https://webpack.docschina.org/configuration/dev-server/) --><p>devServer.compress: 为每个静态文件开启 gzip compression<br>devServer.writeToDisk<br>devServer.watchOptions: 见下</p><h3 id="watchOptions"><a href="#watchOptions" class="headerlink" title="watchOptions"></a>watchOptions</h3><!-- ### [watch 和 watchOptions](https://webpack.docschina.org/configuration/watch/#watch) --><p>watchOptions.aggregateTimeout：当第一个文件更改，会在重新构建前增加延迟。<br>watchOptions.ignored：<code>[&#39;**/files/**/*.js&#39;, &#39;**/node_modules&#39;]</code><br>watchOptions.poll： 1500</p><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><h2 id="node端"><a href="#node端" class="headerlink" title="node端"></a>node端</h2><p>通常不需要打包。<br>如果确实需要，同上生产环境。<br>需要注意避开内置模块。如有用到不属于cmd模块规范的依赖，注意引入方式。</p><h2 id="SMTC"><a href="#SMTC" class="headerlink" title="SMTC"></a>SMTC</h2><p>附一份vue.config.js配置文件。<br><!-- <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const parse = require('url-parse');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const webpackConfig = &#123;</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 指定部署在域名的路径</span></span><br><span class="line">    publicPath: process.env.VUE_APP_PUBLIC_PATH,</span><br><span class="line">    outputDir: process.env.VUE_APP_OUTPUT_DIR,</span><br><span class="line">    <span class="comment">// 静态资源存放目录</span></span><br><span class="line">    assetsDir: <span class="string">"./static"</span>,</span><br><span class="line">    <span class="comment">// 是否在保存时检测代码格式</span></span><br><span class="line">    lintOnSave: process.env.NODE_ENV === <span class="string">"development"</span>,</span><br><span class="line">    <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">    productionSourceMap: process.env.NODE_ENV !== <span class="string">"production"</span>,</span><br><span class="line">    <span class="comment">// 设置跨域代理，编译结束自动打开浏览器</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        host: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">        disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">"/api"</span>: &#123;</span><br><span class="line">                target: <span class="string">"http://dev-api.xxxx.com/api/"</span>,</span><br><span class="line">                <span class="comment">// ws: true,</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        overlay: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span>,</span><br><span class="line">            errors: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// before: require("./mock/mock-server.js")</span></span><br><span class="line">        <span class="comment">// before: function (app) &#123;</span></span><br><span class="line">        <span class="comment">//   pagesConfig.MOCK_LIST.forEach(urlStr =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     const segments = parse('http://' + urlStr)</span></span><br><span class="line">        <span class="comment">//     const pathname = segments.pathname</span></span><br><span class="line">        <span class="comment">//     const host = segments.host</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     app.get(pathname, function (req, res) &#123;</span></span><br><span class="line">    <span class="comment">//       res.json(require('./mock/' + host + pathname + '.json'))</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newConfig = &#123;</span><br><span class="line">            devtool: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"false"</span> : <span class="string">"source-map"</span>,</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                extensions: [<span class="string">".less"</span>],</span><br><span class="line">                alias: &#123;</span><br><span class="line">                    <span class="string">"@assets"</span>: resolve(<span class="string">"src/assets"</span>),</span><br><span class="line">                    <span class="string">"@api"</span>: resolve(<span class="string">"src/api"</span>),</span><br><span class="line">                    <span class="string">"@mockData"</span>: resolve(<span class="string">"src/mockData"</span>),</span><br><span class="line">                    <span class="string">"@views"</span>: resolve(<span class="string">"src/views"</span>),</span><br><span class="line">                    <span class="string">"@comp"</span>: resolve(<span class="string">"src/components"</span>),</span><br><span class="line">                    <span class="string">"@utils"</span>: resolve(<span class="string">"src/utils"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 忽略打包。需在html中引入（cdn）资源库链接</span></span><br><span class="line">            <span class="comment">// exports: &#123;</span></span><br><span class="line">            <span class="comment">//   "vue": "Vue",</span></span><br><span class="line">            <span class="comment">//   "vue-router": "VueRouter",</span></span><br><span class="line">            <span class="comment">//   "element-ui": "Element",</span></span><br><span class="line">            <span class="comment">//   "lodash": "_",</span></span><br><span class="line">            <span class="comment">//   "ali-oss": "OSS",</span></span><br><span class="line">            <span class="comment">//   "jquery": "$"</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (process.env.npm_config_measure) &#123;</span><br><span class="line">            <span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">"speed-measure-webpack-plugin"</span>);</span><br><span class="line">            <span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin(&#123;</span><br><span class="line">                outputFormat: <span class="string">"human"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            smp.wrap(newConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newConfig;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    chainWebpack(config) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">"DEVx"</span>, <span class="string">"STAGE"</span>, <span class="string">"ONLINE"</span>].includes(process.env.VUE_APP_BUILD_ENV)) &#123;</span><br><span class="line">            config.optimization</span><br><span class="line">              .minimizer(<span class="string">'terser'</span>)</span><br><span class="line">                .tap(<span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">                  args[<span class="number">0</span>].terserOptions.ecma = <span class="number">8</span></span><br><span class="line">                  args[<span class="number">0</span>].terserOptions.compress.drop_console = <span class="literal">true</span></span><br><span class="line">                  args[<span class="number">0</span>].terserOptions.compress.drop_debugger = <span class="literal">true</span></span><br><span class="line">                  args[<span class="number">0</span>].terserOptions.compress.pure_funcs = [<span class="string">'console.log'</span>]</span><br><span class="line">                  args[<span class="number">0</span>].terserOptions.output = &#123;</span><br><span class="line">                      comments: <span class="literal">false</span></span><br><span class="line">                  &#125;;</span><br><span class="line">                  <span class="keyword">return</span> args</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> productionGzipExtensions = [<span class="string">"js"</span>, <span class="string">"css"</span>];</span><br><span class="line">            config.plugin(<span class="string">"CompressionWebpackPlugin"</span>)</span><br><span class="line">                .use(<span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>))(&#123;</span><br><span class="line">                    filename: <span class="string">"[path].gz[query]"</span>, <span class="comment">// 压缩后的文件策略</span></span><br><span class="line">                    algorithm: <span class="string">"gzip"</span>, <span class="comment">// 压缩方式</span></span><br><span class="line">                    test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`\\.(<span class="subst">$&#123;productionGzipExtensions.join(<span class="string">"|"</span>)&#125;</span>)$`</span>), <span class="comment">// 可设置需要压缩的文件类型</span></span><br><span class="line">                    threshold: <span class="number">8192</span>, <span class="comment">// 大于8kb的文件启用压缩</span></span><br><span class="line">                    minRatio: <span class="number">0.8</span> <span class="comment">// 压缩比率大于等于0.8时不进行压缩</span></span><br><span class="line">                &#125;));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> ContextReplacementPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/ContextReplacementPlugin"</span>);</span><br><span class="line">            config.plugin(<span class="string">"ignore"</span>).use(<span class="keyword">new</span> ContextReplacementPlugin(<span class="regexp">/moment[/\\]locale$/</span>, /zh-CN$/));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set preserveWhitespace</span></span><br><span class="line">        config.module</span><br><span class="line">            .rule(<span class="string">"vue"</span>)</span><br><span class="line">            .use(<span class="string">"vue-loader"</span>)</span><br><span class="line">            .loader(<span class="string">"vue-loader"</span>)</span><br><span class="line">            .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">                options.compilerOptions.preserveWhitespace = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> options;</span><br><span class="line">            &#125;)</span><br><span class="line">            .end();</span><br><span class="line"></span><br><span class="line">        config</span><br><span class="line">        <span class="comment">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class="line">            .when(process.env.NODE_ENV === <span class="string">"development"</span>,</span><br><span class="line">                config =&gt; config.devtool(<span class="string">"cheap-source-map"</span>)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        config</span><br><span class="line">            .when(process.env.NODE_ENV !== <span class="string">"development"</span>,</span><br><span class="line">                config =&gt; &#123;</span><br><span class="line">                    config</span><br><span class="line">                        .plugin(<span class="string">"ScriptExtHtmlWebpackPlugin"</span>)</span><br><span class="line">                        .after(<span class="string">"html"</span>)</span><br><span class="line">                        .use(<span class="string">"script-ext-html-webpack-plugin"</span>, [&#123;</span><br><span class="line">                            <span class="comment">// `runtime` must same as runtimeChunk name. default is `runtime`</span></span><br><span class="line">                            inline: <span class="regexp">/runtime\..*\.js$/</span></span><br><span class="line">                        &#125;])</span><br><span class="line">                        .end();</span><br><span class="line">                    config</span><br><span class="line">                        .optimization.splitChunks(&#123;</span><br><span class="line">                            chunks: <span class="string">"all"</span>,</span><br><span class="line">                            cacheGroups: &#123;</span><br><span class="line">                                libs: &#123;</span><br><span class="line">                                    name: <span class="string">"chunk-libs"</span>,</span><br><span class="line">                                    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                                    priority: <span class="number">10</span>,</span><br><span class="line">                                    chunks: <span class="string">"initial"</span> <span class="comment">// only package third parties that are initially dependent</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                elementUI: &#123;</span><br><span class="line">                                    name: <span class="string">"chunk-elementUI"</span>, <span class="comment">// split elementUI into a single package</span></span><br><span class="line">                                    priority: <span class="number">20</span>, <span class="comment">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span><br><span class="line">                                    test: <span class="regexp">/[\\/]node_modules[\\/]_?element-ui(.*)/</span> <span class="comment">// in order to adapt to cnpm</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                commons: &#123;</span><br><span class="line">                                    name: <span class="string">"chunk-commons"</span>,</span><br><span class="line">                                    test: resolve(<span class="string">"src/components"</span>), <span class="comment">// can customize your rules</span></span><br><span class="line">                                    minChunks: <span class="number">3</span>, <span class="comment">//  minimum common number</span></span><br><span class="line">                                    priority: <span class="number">5</span>,</span><br><span class="line">                                    reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    config.optimization.runtimeChunk(<span class="string">"single"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;,</span><br><span class="line">    parallel: <span class="built_in">require</span>(<span class="string">"os"</span>).cpus().length &gt; <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>–&gt;</p><!-- [webpack打包优化的完美解决方案](https://blog.csdn.net/weixin_40811829/article/details/88599201)webpack打包优化分为两部分，一部分是大小优化，另一部分是速度优化。### 大小优化1.CommonsChunk2.Externals3.DLL & DllReference速度优化1.优化loader配置1.1 缩小文件匹配范围(include/exclude)1.2 缓存loader的执行结果(cacheDirectory)2.resolve优化配置2.1 优化模块查找路径 resolve.modules2.2 resolve.alias 配置路径别名2.3resolve.extensions3.module.noParse4.HappyPack5.ParallelUglifyPlugin6.Tree Shaking --></p><p>webpack 配置项很多。<!-- 可以仔细阅读文档 []() --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt; 20213.13 星期五 &lt;/p&gt;

&lt;h2 id=&quot;构建流程&quot;&gt;&lt;a href=&quot;#构建流程&quot; class=&quot;headerlink&quot; title=&quot;构建流程&quot;&gt;&lt;/a&gt;构建流程&lt;/h2&gt;&lt;!-- \# [webpack如
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Npx学习</title>
    <link href="http://yoursite.com/sum/ser/npx%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/sum/ser/npx是什么/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-03-09T06:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">npx 使用教程</a></p><p style="text-align:right"> 2021.3.9 星期二  14:48： </p><p>npm 从5.2版开始，增加了 npx 命令。<br>Node 自带 npm 模块，所以可以直接使用 npx 命令。<!-- 万一不能用，就要手动安装一下。 --><br><!-- `npm install -g npx` --></p><h3 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h3><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的根目录下执行</span></span><br><span class="line">$ node-modules/.bin/mocha --version</span><br><span class="line">$ npx mocha --version</span><br></pre></td></tr></table></figure></p><p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。<br>由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</p><p>注意，Bash 内置的命令不在$PATH里面，所以不能用。比如，cd是 Bash 命令，因此就不能用npx cd。</p><h3 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-react-app</span><br><span class="line">$ npx uglify-js@3.1.0 main.js -o ./dist/main.js</span><br></pre></td></tr></table></figure><p>下载到一个临时目录，使用以后再删除。</p><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用–no-install参数。如果本地不存在该模块，就会报错。<br>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用–ignore-existing参数。</p><h3 id="使用不同版本的-node"><a href="#使用不同版本的-node" class="headerlink" title="使用不同版本的 node"></a>使用不同版本的 node</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx node@0.12.8 -v</span><br><span class="line">$ npx -p lolcatjs -p cowsay -c <span class="string">'cowsay hello | lolcatjs'</span></span><br><span class="line">$ npx -c <span class="string">'echo "$npm_package_name"'</span></span><br></pre></td></tr></table></figure><p>-p参数用于指定 npx 所要安装的模块<br>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。</p><p>-c参数的另一个作用，是将环境变量带入所要执行的命令。</p><h3 id="执行-GitHub-源码"><a href="#执行-GitHub-源码" class="headerlink" title="执行 GitHub 源码"></a>执行 GitHub 源码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行 Gist 代码</span></span><br><span class="line">$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行仓库代码</span></span><br><span class="line">$ npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure><p>注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。</p><p style="text-align:right"> 14:54 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2019/02/npx.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npx 使用教程&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt; 2
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
  </entry>
  
  <entry>
    <title>Vite 开始</title>
    <link href="http://yoursite.com/sum/jsplus/vite%20%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/sum/jsplus/vite 开始/</id>
    <published>2021-03-08T00:00:00.000Z</published>
    <updated>2021-03-08T12:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。</p></blockquote><p>Getting Started: <a href="https://vitejs.dev/guide/" target="_blank" rel="noopener">https://vitejs.dev/guide/</a><br>github: <a href="https://github.com/vitejs/vite/" target="_blank" rel="noopener">https://github.com/vitejs/vite/</a></p><p style="text-align:right"> 2021.3.8 星期一  15：36 </p><p><a href="https://blog.csdn.net/lunahaijiao/article/details/107587777" target="_blank" rel="noopener">vite —— 一种新的、更快地 web 开发工具</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vite 的核心功能：Static Server + Compile + HMR</p><p>它具有以下特点：<br>快速的冷启动<br>即时的热模块更新<br>真正的按需编译</p><p>vite功能实现提供 web server：<br>借用了 koa 来启动服务<br>模块解析：核心是拦截浏览器对模块的请求<br>支持 /@module/ ：判断路径是否以 /@module/ 开头，如果是取出包名，去 node_module 里找到这个库，基于 package.json 返回对应的内容<br>文件编译：拦截了对模块的请求并执行实时编译</p><!-- \# [如何看待 Web 开发构建工具 Vite？](https://www.zhihu.com/question/394062839)已经用上snowpack了，vite也是类似的东西，不过build输出的结果和snowpack不一样还是蛮怪的 \# [忍不住剧透一下 wepack了](https://zhuanlan.zhihu.com/p/348033313)wepack 是一个微信小程序打包器，支持将微信小程序打包成h5，然后跑在沙箱里（微前端，worker，jscore）这是一个打包工具，同时也是小程序引擎的全部，和微信不同的是，整个打包器都是从零手写的，而且拥有和 webpack 类似但更好的机制为什么放弃 webpack\# [Vue.js构建工具比较](https://developer.51cto.com/art/202009/625530.htm)我们将比较的Vue社区中可用于脚手架应用程序和库的工具是： Vite Vue CLI Poi Bili--><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><!-- [前端新工具--vite从入门到实战（一）](https://zhuanlan.zhihu.com/p/149033579) --><p>vite的任务，就是用koa起一个http 服务，来拦截这些请求，返回合适的结果，就欧克了，下面我们一步步来，为了方便演示，代码简单粗暴</p><p>支持html和js<br>第三方库</p><ol><li>不是合法的相对路径，浏览器报错<br>支持/@module/<br>.vue组件<br>单文件组件解析<br>我们直接用vue官方的<a href="https://github.com/vuejs/vue-next/tree/master/packages/compiler-sfc" target="_blank" rel="noopener">@vue/compiler-sfc</a>来整单文件<br>模板解析<br>支持css</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>就是通过拦截import的http请求，来实现无需打包，自带按需加载的工具<br>热更新怎么做的，其实核心逻辑就是注入<a href="http://socket.io" target="_blank" rel="noopener">http://socket.io</a> </p><h2 id="webpack对比"><a href="#webpack对比" class="headerlink" title="webpack对比"></a>webpack对比</h2><!-- [webpack与 vite 的不同， vite的速度提升在哪里](https://blog.csdn.net/qq_41499782/article/details/109593388) --><p>webpack会先打包，然后启动开发服务器，请求服务器时直接给予打包结果。<br>而vite是直接启动开发服务器，请求哪个模块再对该模块进行实时编译。</p><p>由于现代浏览器本身就支持ES Module，会自动向依赖的Module发出请求。vite充分利用这一点，将开发环境下的模块文件，就作为浏览器要执行的文件，而不是像webpack那样进行打包合并。<br>由于vite在启动的时候不需要打包，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译。这种按需动态编译的方式，极大的缩减了编译时间，项目越复杂、模块越多，vite的优势越明显。<br>在HMR（热更新）方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高。<br>当需要打包到生产环境时，vite使用传统的rollup（也可以自己手动安装webpack来）进行打包，</p><p>因此，vite的主要优势在开发阶段。另外，由于vite利用的是ES Module，因此在代码中（除了vite.config.js里面，这里是node的执行环境）不可以使用CommonJS</p><h2 id="鄙见"><a href="#鄙见" class="headerlink" title="鄙见"></a>鄙见</h2><p>一个开发的工具/脚手架。<br>万物皆工具。</p><p>vite开始的es module 构建，并不是先见。开发环境确实有一些优势<br>终是要跑在线上。<br>build 还是用了rollup。</p><p>开始路上。是否只适用vue3？能否保证线上一致。<br>终究还有生态，打包/性能优化，历史库管理</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
  <entry>
    <title>Orm了解</title>
    <link href="http://yoursite.com/sum/others/orm%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/sum/others/orm了解/</id>
    <published>2021-02-21T00:00:00.000Z</published>
    <updated>2021-02-21T15:41:24.222Z</updated>
    
    <content type="html"><![CDATA[<p>Sequelize是一个基于promise的nodejs ORM，目前支持Postgres、mysql、SQLite和Microsoft SQL Server。<br>它具有强大的事务支持，关联关系，读取和复制等功能。</p><p style="text-align:right">2021.2.21 星期日</p><!-- [基于Koa2框架的项目搭建及实战开发](https://www.cnblogs.com/zjknb/p/12149420.html) --><!-- $_PS: 用了Sequelize --><!-- \# [ORM是什么？如何理解ORM](https://www.cnblogs.com/huanhang/p/6054908.html) --><p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。<!-- 那么，到底如何实现持久化呢？一种简单的方案是采用硬编码方式，为每一种可能的数据库访问操作提供单独的方法。  --><br>ORM解决的主要问题是对象关系的映射。域模型和关系模型分别是建立在概念模型的基础上的。域模型是面向对象的，而关系模型是面向关系的。一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录，类的每个属性对应表的每个字段。<br>ORM技术特点：<br>1.提高了开发效率。由于ORM可以自动对Entity对象与数据库中的Table进行字段与属性的映射，所以我们实际可能已经不需要一个专用的、庞大的数据访问层。<br>2.ORM提供了对数据库的映射，不用sql直接编码，能够像操作对象一样从数据库获取数据。 </p><p>三、ORM的优缺点<br>ORM的缺点是会牺牲程序的执行效率和会固定思维模式。<br>从系统结构上来看,采用ORM的系统一般都是多层系统，系统的层次多了，效率就会降低。ORM是一种完全的面向对象的做法，而面向对象的做法也会对性能产生一定的影响。<br><!-- 在我们开发系统时，一般都有性能问题。性能问题主要产生在算法不正确和与数据库不正确的使用上。ORM所生成的代码一般不太可能写出很高效的算法，在数据库应用上更有可能会被误用，主要体现在对持久对象的提取和和数据的加工处理上，如果用上了ORM,程序员很有可能将全部的数据提取到内存对象中，然后再进行过滤和加工处理，这样就容易产生性能问题。  --><br>在对对象做持久化时，ORM一般会持久化所有的属性，有时，这是不希望的。<br>但ORM是一种工具，工具确实能解决一些重复，简单的劳动。这是不可否认的。但我们不能指望工具能一劳永逸的解决所有问题，有些问题还是需要特殊处理的，但需要特殊处理的部分对绝大多数的系统，应该是很少的。</p><!-- \#[什么是ORM？为什么要用ORM？](https://blog.csdn.net/u010947534/article/details/90669452) --><p>为什么要做持久化和ORM设计(重要)<br>在目前的企业应用系统设计中，MVC，即 Model（模型）- View（视图）- Control（控制）为主要的系统架构模式。MVC 中的 Model 包含了复杂的业务逻辑和数据逻辑，以及数据存取机制（如 JDBC的连接、SQL生成和Statement创建、还有ResultSet结果集的读取等）等。将这些复杂的业务逻辑和数据逻辑分离，以将系统的紧耦 合关系转化为松耦合关系（即解耦合），是降低系统耦合度迫切要做的，也是持久化要做的工作。MVC 模式实现了架构上将表现层（即View）和数据处理层（即Model）分离的解耦合，而持久化的设计则实现了数据处理层内部的业务逻辑和数据逻辑分离的解耦合。 而 ORM 作为持久化设计中的最重要也最复杂的技术，也是目前业界热点技术。</p><p><a href="http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html" target="_blank" rel="noopener">ORM 实例教程-ryf</a><br><!-- 面向对象编程把所有实体看成对象（object），关系型数据库则是采用实体之间的关系（relation）连接数据。很早就有人提出，关系也可以用对象表达，这样的话，就能使用面向对象编程，来操作关系型数据库。 --><br><!-- 简单说， -->ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是”对象-关系映射”（Object/Relational Mapping） 的缩写。</p><p>一比较就可以发现，ORM 使用对象，封装了数据库操作，因此可以不碰 SQL 语言。开发者只使用面向对象编程，与数据对象直接交互，不用关心底层数据库。<br>&lt;!– 总结起来，ORM 有下面这些优点。<br>数据模型都在一个地方定义，更容易更新和维护，也利于重用代码。<br>ORM 有现成的工具，很多功能都可以自动完成，比如数据消毒、预处理、事务等等。<br>它迫使你使用 MVC 架构，ORM 就是天然的 Model，最终使代码更清晰。<br>基于 ORM 的业务代码比较简单，代码量少，语义性好，容易理解。<br>你不必编写性能不佳的 SQL。</p><p>但是，ORM 也有很突出的缺点。<br>ORM 库不是轻量级工具，需要花很多精力学习和设置。<br>对于复杂的查询，ORM 要么是无法表达，要么是性能不如原生的 SQL。<br>ORM 抽象掉了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊的 SQL。<br> –&gt;</p><!-- Comment --><p>实用，现在 Node.js 使用最广泛的 ORM 库应该是 sequelize<br>sequelize 太重了，openrecord 就很轻量级。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sequelize是一个基于promise的nodejs ORM，目前支持Postgres、mysql、SQLite和Microsoft SQL Server。&lt;br&gt;它具有强大的事务支持，关联关系，读取和复制等功能。&lt;/p&gt;
&lt;p style=&quot;text-align:ri
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Sonarqube了解</title>
    <link href="http://yoursite.com/sum/others/sonarqube%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/sum/others/sonarqube了解/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-02-21T15:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>SonarQube Documentation: <a href="https://docs.sonarqube.org/latest/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/</a></p><p style="text-align:right"> 2021.2.9 星期  ： </p><h2 id="Architecture-and-Integration"><a href="#Architecture-and-Integration" class="headerlink" title="Architecture and Integration"></a>Architecture and Integration</h2><p><a href="https://docs.sonarqube.org/latest/architecture/architecture-integration/" target="_blank" rel="noopener">Architecture and Integration</a><br><!-- [sonarqube代码质量检查简单使用说明](https://www.cnblogs.com/echo-valley/p/11868115.html) --></p><h3 id="架构画介绍"><a href="#架构画介绍" class="headerlink" title="架构画介绍"></a>架构画介绍</h3><p>一台SonarQube Server启动3个主要过程：</p><p>Web服务器，供开发人员，管理人员浏览高质量的快照并配置SonarQube实例<br>基于Elasticsearch的Search Server从UI进行后退搜索<br>Compute Engine服务器，负责处理代码分析报告并将其保存在SonarQube数据库中<br>一个SonarQube数据库要存储：</p><p>SonarQube实例的配置（安全性，插件设置等）<br>项目，视图等的质量快照。<br>服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和管理插件<br>在构建/持续集成服务器上运行一个或多个SonarScanner，以分析项目</p><h3 id="2-0二，使用流程"><a href="#2-0二，使用流程" class="headerlink" title="2|0二，使用流程"></a>2|0二，使用流程</h3><p>使用流程</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SonarQube Documentation: &lt;a href=&quot;https://docs.sonarqube.org/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.sonarqube.org/latest/&lt;/
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>可视化监测</title>
    <link href="http://yoursite.com/sum/others/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%B5%8B/"/>
    <id>http://yoursite.com/sum/others/可视化监测/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-02-09T10:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>elastic: <a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a><br>grafana: <a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p><!-- $_PS: 还有一个bdp 是啥啊。海致BDP-大数据时代的商业智能 --><p style="text-align:right"> 2021.2.9 星期二  16：54 </p><h2 id="Kibana-和-Grafana-对比区别"><a href="#Kibana-和-Grafana-对比区别" class="headerlink" title="Kibana 和 Grafana 对比区别"></a>Kibana 和 Grafana 对比区别</h2><p><a href="https://www.zhihu.com/question/54388690" target="_blank" rel="noopener">Grafana 与 Kibana 有什么区别，Kibana 能做的事情 Grafana 是否也都能做？</a><br>Grafana 最早其实应该是 Kibana 3 的分支，<!-- 不相信的可以去翻 Github 的提交记录，所以但凡用过 Kibana 3的人就知道， Grafana 的界面风格其实和 Kibana3 的风格是一致的。 --><br>这还是2013年。<br><!-- 我们来回顾一下历史， Kibana 1.0 的作者是 Rashid Khan 于 2011 年编写的，用的 PHP，开发起来发现不爽，然后第二年又用 Ruby 重写了 Kibana 2.0，发现还是不爽，于是一年后，用 Html+JS 再重写，用的 AngularJS，也是个爱折腾的主，这还是2013年。--></p><!-- [对比了解 Grafana 与 Kibana 的关键差异](https://www.infoq.cn/article/grafana-vs-kibana-the-key-differences-to-know)[Grafana与Kibana之间的比较](https://www.jianshu.com/p/3ebbde9601be) --><p>Kibana的核心功能是数据查询和分析。</p><p>Kibana和Grafana都是强大的可视化工具。但是，它们的核心是用于不同的数据类型和用例。<br>Grafana与时间序列数据库（如Graphite或InfluxDB）是用于度量分析的组合，<br>而Kibana是流行的ELK Stack的一部分，用于探索日志数据。</p><p><a href="https://www.cnblogs.com/tgzhu/p/6865770.html" target="_blank" rel="noopener">kibana 与 grafana</a><br>Kibana 和 Grafana 是两个开源工具，能可视化和推断大量日志数据内的趋势。<br>Kibana 是一个分析和可视化平台，它可以让你浏览、可视化存储在Elasticsearch集群上排名靠前的日志数据，并构建仪表盘。<!-- 你可以执行深入的数据分析并以多种图表、表格和地图方式可视化这些数据。 --><br>Grafana 是一个开源仪表盘工具，支持如：Graphite、InfluxDB与 OpenTSDB、Elasticsearch、druid等数据源，</p><p>对比分析<br>日志与度量：Grafana专注于根据CPU和IO利用率之类的特定指标提供时间序列图表。Kibana则专注于另一方面，它运行于Elasticsearch的上层，能创建一个复杂的日志分析仪表盘。举个例子，Grafana无法进行数据的检索和浏览<br>角色权限：默认情况下，Kibana的仪表盘是公开的，没有进行基于角色的访问控制。如果你需要针对多个用户设置不同的权限级别，就得增加额外的配置预算采购 Shield 了。Grafana内置的RBA允许你维护用户和团队访问仪表盘的权限。<br>仪表盘灵活性：虽然Kibana有大量内置的图表类型，但它们之上的控制仍是最初的限制，Grafana包括更多的选择，可以更灵活地浏览和使用图表，如果要选择一个指定的时间序列，可以使用Y-Bar之类的工具。然而，随着 Kibana 4中展示的增强特性，比如可以保存元素并拖曳到新的仪表盘中，我们可以预期Kibana能快速地弥补这一差距<br>支持数据源：Grafana支持许多不同的存储后端。Grafana针对每个数据源都有一个特定的查询编辑器，它是针对数据源所具备的特性和能力特别定制的。然而，正如上文所说，Kibana原生集成进了ELK栈，这使安装极为简单，对用户非常友好</p><p>共同协作<br>Kibana和Grafana都是强大的可视化工具。然而，Grafana和InfluxDB组合是用于度量数据的，反之，Kibana是流行的ELK栈的一部分，它可以更为灵活地浏览日志数据。这两个平台都是好的选择，甚至有时还可以互补。首先，用Kibana去分析你的日志。然后，把数据导入到Grafana作为可视化层。这些的前提是需要同一个Elasticsearch库</p><p>解决方案</p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><!-- [Grafana和Kibana是写给程序员最美的情诗！ ](https://www.sohu.com/a/216585475_632967) --><p>当然，在设备监控和运维方面<!-- ，除了Grafana外，还有很多其他类似工具，如名叫Kibana的工具， --><br>它是一个分析和可视化平台，支持浏览、可视化存储的日志数据，如ELK栈(Elasticsearch、Logstash和Kibana) 。同样也支持Dashboard，支持深入的数据分析并以多种图表、表格和可视化方式展示数据。</p><p>在日志与度量方面，Grafana专注于根据CPU和IO利用率之类的特定指标提供时间序列图表。<br>Kibana运行于Elasticsearch的上层(可以实现数据的检索和浏览)，专注于创建一个复杂的日志分析仪表盘。</p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p><a href="http://docs.flycloud.me/docs/ELKStack/elasticsearch/other/grafana.html" target="_blank" rel="noopener">Grafana教程</a><br><!-- [Grafana使用教程](https://blog.csdn.net/bbwangj/article/details/81109615) --><br>Grafana是一个开源的度量分析与可视化套件。经常被用作基础设施的时间序列数据和应用程序分析的可视化，<!-- 它在其他领域也被广泛的使用包括工业传感器、家庭自动化、天气和过程控制等。 --></p><p>Grafana支持许多不同的数据源。每个数据源都有一个特定的查询编辑器,该编辑器定制的特性和功能是公开的特定数据来源。<br>官方支持以下数据源:Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB。</p><p>大多数公司都是使用Zabbix收集数据，通过Grafana展示出来。</p><p>每个数据源的查询语言和能力都是不同的。你可以把来自多个数据源的数据组合到一个仪表板，但每一个面板被绑定到一个特定的数据源,它就属于一个特定的组织。</p><p>Grafana非常强大的一个功能叫做Grafana Dashboard Templating，可以说是使用Grafana必用的技能。Dashboard 通过定义变量在不同界面被引用，如当你定义了变量在某一个Dashboard页面就会出现下拉选择框，从而也就具有可交互性了。<br>6、仪表盘模板功能<br>单纯的手动去添加一个个监控图,只能显示一个主机的所有监控图形，若要查看不同主机的所有监控图形，就要通过变量的方式去实现。我<!-- 们要设置的变量包括group，host，application和iteam。 --></p><p>模板:仪表盘模板可以让你创建一个交互式和动态性的仪表板，它是Grafana里面最强大的、最常用的功能之一。创建的仪表盘模板参数，可以在任何一个仪表盘中使用。</p><p>变量及使用<br>3.1变量之interval<br>3.2变量之query</p><p>preview<br>query<br>Transform<br>Alert</p><p>panel</p><p>访问控制和身份验证</p><h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><!-- [InfluxDB从原理到实战 - 什么是InfluxDB](https://zhuanlan.zhihu.com/p/80062750) --><p>InfluxDB是一个由InfluxData开发的开源时序型数据库，专注于海量时序数据的高性能读、高性能写、高效存储与实时分析等，在DB-Engines Ranking时序型数据库排行榜上排名第一，广泛应用于DevOps监控、IoT监控、实时分析等场景。</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;elastic: &lt;a href=&quot;https://www.elastic.co/cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/&lt;/a&gt;&lt;br&gt;grafana: &lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="others" scheme="http://yoursite.com/categories/sum/others/"/>
    
    
  </entry>
  
  <entry>
    <title>OSS实践</title>
    <link href="http://yoursite.com/w3/ope/OSS%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/w3/ope/OSS实践/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-03-23T03:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象存储 OSS: <a href="https://help.aliyun.com/product/31815.html" target="_blank" rel="noopener">https://help.aliyun.com/product/31815.html</a></p><p style="text-align:right"> 2021.2.9 星期二 </p><p>阿里云 OSS</p><h1 id="开发指南"><a href="#开发指南" class="headerlink" title="开发指南"></a>开发指南</h1><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h2 id="静态网站托管"><a href="#静态网站托管" class="headerlink" title="静态网站托管"></a>静态网站托管</h2><p><a href="https://help.aliyun.com/document_detail/67323.html" target="_blank" rel="noopener">静态网站托管</a><br>配置静态网站托管时，您需要指定网站的默认首页和默认404页</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="图片处理指南"><a href="#图片处理指南" class="headerlink" title="图片处理指南"></a>图片处理指南</h3><p>阿里云 OSS 图片处理服务 (Image Processing，简称 IMG), 将原始图片上传保存在OSS上，通过简单的 RESTful 接口，在任何时间、任何地点、任何互联网设备上对图片进行处理。</p><p>/circle,r_100/format,png</p><p>/resize,h_120,w_120</p><p>图片服务基础功能</p><h4 id="图片处理操作方式"><a href="#图片处理操作方式" class="headerlink" title="图片处理操作方式"></a>图片处理操作方式</h4><p>您可以通过文件URL、API、SDK对OSS内图片进行处理，本文介绍如何使用这三种方式进行图片处理。</p><h4 id="图片处理参数"><a href="#图片处理参数" class="headerlink" title="图片处理参数"></a>图片处理参数</h4><p><a href="https://help.aliyun.com/document_detail/44688.html" target="_blank" rel="noopener">对象存储 OSS-图片处理参数</a></p><p>获取图片信息<br>图片格式转换<br>图片缩放、裁剪、旋转(image/resize,w_200/rotate,90/crop,x_100,y_50/blur,r_3,s_2/)<br>图片添加图片、文字、图文混合水印<br>自定义图片处理样式<br>通过管道顺序调用多种图片处理功能<br>类似的图片处理效果还有模糊(blur)，对比度(contrast)，亮度(bright)，锐化(sharpen),使用的就是图片的样式功能。</p><p>直接在后端返回的URL后面拼接字符串：<code>?x-oss-process=image/resize,m_fill,w_782,h_540</code></p><p>//设置图片清晰度最后就是清晰度0-100，数字越大，清晰度越高<br><code>?x-oss-process=image/quality,q_60</code></p><p>裁剪<br><a href="http://demo.oss-cn-xxxxx.aliyuncs.com/test.jpg?x-oss-process=image/circle,r_100" target="_blank" rel="noopener">http://demo.oss-cn-xxxxx.aliyuncs.com/test.jpg?x-oss-process=image/circle,r_100</a></p><p>先压缩再裁剪<br><a href="http://demo.oss-cn-xxxxx.aliyuncs.com/test.jpg?x-oss-process=image/quality,q_80/circle,r_100" target="_blank" rel="noopener">http://demo.oss-cn-xxxxx.aliyuncs.com/test.jpg?x-oss-process=image/quality,q_80/circle,r_100</a></p><h3 id="视频截帧"><a href="#视频截帧" class="headerlink" title="视频截帧"></a>视频截帧</h3><p>当前仅支持对视频编码格式为H264的视频文件进行视频截帧。<br>OSS当前没有默认保存视频截帧的操作，视频截帧的图片需手动下载到本地。</p><p>?x-oss-process=video/snapshot,t_7000,f_jpg,w_800,h_600,m_fast<br>t_ 后面配置截取多少毫秒的视频对应的画面</p><h2 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h2><h2 id="事件通知"><a href="#事件通知" class="headerlink" title="事件通知"></a>事件通知</h2><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h2 id="存储空间（Bucket）"><a href="#存储空间（Bucket）" class="headerlink" title="存储空间（Bucket）"></a>存储空间（Bucket）</h2><h3 id="传输加速"><a href="#传输加速" class="headerlink" title="传输加速"></a>传输加速</h3><p>$_PS: 不同于cdn加速</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>远距离数据传输加速<br>GB、TB级大文件上传和下载<br>非静态、非热点数据下载加速</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>## </p><h2 id="数据处理与分享"><a href="#数据处理与分享" class="headerlink" title="数据处理与分享"></a>数据处理与分享</h2><h2 id="数据备份与容灾"><a href="#数据备份与容灾" class="headerlink" title="数据备份与容灾"></a>数据备份与容灾</h2><h2 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h2><h2 id="使用CDN加速OSS访问"><a href="#使用CDN加速OSS访问" class="headerlink" title="使用CDN加速OSS访问"></a>使用CDN加速OSS访问</h2><h1 id="控制台用户指南"><a href="#控制台用户指南" class="headerlink" title="控制台用户指南"></a>控制台用户指南</h1><p>您可以通过对象存储OSS控制台对存储空间、文件和文件夹执行相关的基础和高级操作。控制台是界面形式的Web应用程序，直观易用。</p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象存储 OSS: &lt;a href=&quot;https://help.aliyun.com/product/31815.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://help.aliyun.com/product/31815.html&lt;
      
    
    </summary>
    
      <category term="w3" scheme="http://yoursite.com/categories/w3/"/>
    
      <category term="ope" scheme="http://yoursite.com/categories/w3/ope/"/>
    
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Node脚本</title>
    <link href="http://yoursite.com/sum/ser/node%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/sum/ser/node脚本/</id>
    <published>2021-01-23T00:00:00.000Z</published>
    <updated>2021-01-23T13:29:21.043Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right">2021.1.23 星期六 21：28 </p><h2 id="向npm脚本发送命令行参数"><a href="#向npm脚本发送命令行参数" class="headerlink" title="向npm脚本发送命令行参数"></a>向npm脚本发送命令行参数</h2><!-- [如何向npm脚本发送命令行参数？](https://cloud.tencent.com/developer/ask/50047) --><p>package.json的scripts部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "node ./script.js server"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从npm2.0.0开始，可以将参数传递给npm run<br><!-- [npm run 执行package.json中的scripts配置时如何参数传递？](https://www.zhihu.com/question/54471504) --><br>1) npm scripts参数传递的命令行分割符是’–’。<br>比如npm run build – –name hello，即可将后续参数添加到process.env.argv数组中。</p><p>2) 在 vue-cli 创建的项目中，如果执行命令 npm run build –report ，那么参数 –report 将转化成 process.env.npm_config_report = true<br><del>3) 用shell函数，将尾巴的作为参数传进去<code>{&quot;build&quot;: &quot;build(){r.js -o build.js &amp;&amp; node version.js -v $1 &amp;&amp; zip -r ./build/dist.zip ./build;} build&quot;}</code></del><br>4) 只需在尾部提供一个$<em>到你的脚本值条目。 `”start”: “node echoargs.js $</em>“`<br>5) 如果你想将参数传递到npm脚本的中间，而不只是将它们追加到末尾，那么内联环境变量能起到一个很好的作用：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "BABEL_ARGS=-w npm run build &amp;&amp; cd lib/server &amp;&amp; nodemon index.js",</span><br><span class="line">  "start": "npm run build &amp;&amp; node lib/server/index.js",</span><br><span class="line">  "build": "mkdir -p lib &amp;&amp; babel $BABEL_ARGS -s inline --stage 0 src -d lib",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>在这里，npm run dev将-w watch标志传递给babel，但npm run start只运行一次常规构建。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:right&quot;&gt;2021.1.23 星期六 21：28 &lt;/p&gt;

&lt;h2 id=&quot;向npm脚本发送命令行参数&quot;&gt;&lt;a href=&quot;#向npm脚本发送命令行参数&quot; class=&quot;headerlink&quot; title=&quot;向npm脚本发送命令行参
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="ser" scheme="http://yoursite.com/categories/sum/ser/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Web性能优化指南</title>
    <link href="http://yoursite.com/sum/js/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/sum/js/web性能优化指南/</id>
    <published>2021-01-19T00:00:00.000Z</published>
    <updated>2021-04-10T07:19:28.542Z</updated>
    
    <content type="html"><![CDATA[<!-- 本文地址: <https://ttc.zhiyinlou.com/#/articleDetail?id=2837> --><p></p><p style="text-align:right"> 2021.1.19 星期二 </p><p></p><p>天下武功唯快不破<br>E = mc^2<br><!-- （E：网站质量；m: 代码质量；c：速度）。网站质量不合适啊 --></p><!-- 理论指导Web性能权威指南.pdf 高性能网站建设指南.pdf--><p># 页面加载原理</p><p>从浏览器加载页面的流程，可以看到主要从两个大方向入手：<br>1）资源通过网络层传输/接收<br>减少请求数，降低请求量</p><p>2）浏览器解析/渲染资源<br>减少重绘&amp;回流</p><p># 网站性能优化</p><h2 id="资源-网络传输"><a href="#资源-网络传输" class="headerlink" title="资源/网络传输"></a>资源/网络传输</h2><!-- 众所周知，tcp连接是非常耗时的。（3次握手） http --><p>资源查找和传输</p><h3 id="减少dns查找"><a href="#减少dns查找" class="headerlink" title="减少dns查找"></a>减少dns查找</h3><p>每一次主机名解析都需要一次网络往返，从而增加请求的延迟时间，同时还会阻塞后续请求。</p><p>适当控制网页中域名数量（但并不是越少越好。http1.1下多域名可以建立多个tcp连接，并发http请求）；<br>利用DNS 预解析（dns-prefetch）<br><!-- dns-prefetch：通过 DNS 预解析来告诉浏览器未来我们可能从某个特定的 URL 获取资源，当浏览器真正使用到该域中的某个资源时就可以尽快地完成 DNS 解析。 --></p><h3 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h3><p>合并样式、脚本文件、图片；CSS3图标、Icon Font<br>使用图片的地方用其他方式替代：css样式/动画，icon，svg等。<br><!-- 跨域 预检请求缓存 --></p><h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>HTTP 重定向极费时间，特别是不同域名之间的重定向，更加费时；这里面既有额外的 DNS 查询、TCP 握手，还有其他延迟。<br>最佳的重定向次数为零。</p><h3 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h3><p>缩短传输距离，而且服务器大多有缓存<!-- ，有负载均衡 -->。<br> <!-- CDN（内容分发网络）把数据放到离用户地理位置更近的地方，可以显著减少每次 TCP 连接的网络延迟，增大吞吐量。 --><br><!-- cdn其他有优点： --></p><!-- [CDN是什么？使用CDN有什么优势？](https://www.zhihu.com/question/36514327/answer/1604554133)假设通过CDN加速的域名为www.a.com，接入CDN网络，开始使用加速服务后，当终端用户（北京）发起HTTP请求时，处理流程如下：1. 当终端用户（北京）向www.a.com下的指定资源发起请求时，首先向LDNS（本地DNS）发起域名解析请求。2. LDNS检查缓存中是否有www.a.com的IP地址记录。如果有，则直接返回给终端用户；如果没有，则向授权DNS查询。3. 当授权DNS解析www.a.com时，返回域名CNAME www.a.tbcdn.com对应IP地址。4. 域名解析请求发送至阿里云DNS调度系统，并为请求分配最佳节点IP地址。5. LDNS获取DNS返回的解析IP地址。6. 用户获取解析IP地址。7. 用户向获取的IP地址发起对该资源的访问请求。   1. 如果该IP地址对应的节点已缓存该资源，则会将数据直接返回给用户，例如，图中步骤7和8，请求结束。   2. 如果该IP地址对应的节点未缓存该资源，则节点向源站发起对该资源的请求。获取资源后，结合用户自定义配置的缓存策略，将资源缓存至节点，例如，图中的北京节点，并返回给用户，请求结束。从这个例子可以了解到：1）CDN的加速资源是跟域名绑定的。2）通过域名访问资源，首先是通过DNS分查找离用户最近的CDN节点（边缘服务器）的IP3）通过IP访问实际资源时，如果CDN上并没有缓存资源，则会到源站请求资源，并缓存到CDN节点上，这样，用户下一次访问时，该CDN节点就会有对应资源的缓存了。 --><h3 id="降低请求量"><a href="#降低请求量" class="headerlink" title="降低请求量"></a>降低请求量</h3><p>使用外部Javascript和CSS<br>① 开启GZip，brotli。webp<br>② 优化静态资源。去除冗余代码：log、comment ；uglify<br>③ 图片无损压缩，恰当的图片格式。<br>④ 图片延迟加载。<br>⑤ 减少Cookie携带</p><h3 id="利用缓存"><a href="#利用缓存" class="headerlink" title="利用缓存"></a>利用缓存</h3><p>很多时候，我们也会采用类似“时间换空间、空间换时间”的做法</p><p>服务端缓存。<br>http缓存。配置ETag<br>浏览器缓存。dns，资源，数据<!-- （localstorage, indexDB） -->。</p><!-- 图片等经常不更改的资源可以设置一个很大的缓存时间 --><!-- 脚本文件可以通过版本号，hash等方式获取最新资源. --><!-- 增量更新 --><h3 id="控制资源加载顺序"><a href="#控制资源加载顺序" class="headerlink" title="控制资源加载顺序"></a>控制资源加载顺序</h3><p>控制资源加载顺序/优先级。<br>并行加载。域名分片<!-- 多个域名，可以建立更多的TCP连接，从而提高HTTP请求的并发 --><br><!-- 使用外部Javascript和CSS --><br>按需/异步加载：顺序，数据量大小（滚动）<br>  preload, prefetch, prerender， preconnect<br>  async, defer</p><p>渲染需要的css等文件放head，javascript文件尽量放在body结尾。</p><p>Critical CSS 加快首屏渲染</p><!-- [域名分片(Domain sharding)](https://developer.mozilla.org/zh-CN/docs/Glossary/Domain_sharding) 由于浏览器限制了每个域（domain）的活动连接数。为了可以同时下载超过该限制数的资源，域名分片（domain sharding）会将内容拆分到多个子域中。当使用多个域来处理多个资源时，浏览器能够同时下载更多资源，从而缩短了页面加载时间并改善了用户体验。就性能而言，域名分片的问题在于每个域都需要额外的 DNS 查找成本以及建立每个 TCP 连接的开销。$_PS: 浏览器一个域名采用6个TCP连接，并发HTTP请求--><h3 id="新的传输协议"><a href="#新的传输协议" class="headerlink" title="新的传输协议"></a>新的传输协议</h3><p><strong>http2</strong>：头部压缩、二进制分帧、多路复用，server push等优势。<br>可以解决http1.1 队头堵塞问题。而且前面提到的合并请求资源数量，并行加载就当做参考项了。也没必要再使用域名分片来解决并发限制了</p><p><strong>QUIC</strong>(Quick UDP Internet Connections)：基于UDP+Http2的一个实验性的快速传输协议。<br>遇到丢包情况也不会重传，从而进一步减少网络延迟、解决队头阻塞问题。<br><!-- [http中的队头阻塞（Head of line blocking）多路复用（Multiplexing）](https://www.jianshu.com/p/450cc7320e30)上面说的情况都是基于TCP，因为TCP是可靠的传输协议，如果一个TCP连接中的多个请求有一个请求丢包了，那么就会进行重传。而谷歌提出的 QUIC(Quick UDP Internet Connections)，则是基于UDP+Http2的一个实验性的快速传输协议，UDP是面向数据报文的，所以遇到丢包的情况也不会进行重传，从而进一步减少网络延迟、解决队头阻塞问题。--><br><strong>websocket</strong><br><strong>webRTC</strong><br><!-- WebSocket: 依旧是双向通信的最佳方案WebRTC: 主要用来做视频电话, 不过P2P传输是某些场景的优化利器 --></p><p><strong>https</strong><br>多了安全层Transport Layer Security (TLS)，会增加新的请求。但这是必须的，chrome推进后大多数网站都添加了https。<br><!-- [为什么我们应该尽快升级到 HTTPS？](https://imququ.com/post/moving-to-https-asap.html) --></p><!-- http2：可以解决http队头阻塞(Head of line blocking)，实现多路复用。[TCP队头阻塞和HTTP队头阻塞](https://www.cnblogs.com/mengff/p/12724641.html)TCP队头阻塞和HTTP队头阻塞1. TCP队头阻塞TCP数据包是有序传输，中间一个数据包丢失，会等待该数据包重传，造成后面的数据包的阻塞。2. HTTP队头阻塞http队头阻塞和TCP队头阻塞完全不是一回事。http1.x采用长连接(Connection:keep-alive)，可以在一个TCP请求上，发送多个http请求。有非管道化和管道化，两种方式。非管道化，完全串行执行，请求->响应->请求->响应...，后一个请求必须在前一个响应之后发送。管道化，请求可以并行发出，但是响应必须串行返回。后一个响应必须在前一个响应之后。原因是，没有序号标明顺序，只能串行接收。管道化请求的致命弱点:1. 会造成队头阻塞，前一个响应未及时返回，后面的响应被阻塞2. 请求必须是幂等请求，不能修改资源。因为，意外中断时候，客户端需要把未收到响应的请求重发，非幂等请求，会造成资源破坏。由于这个原因，目前大部分浏览器和Web服务器，都关闭了管道化，采用非管道化模式。无论是非管道化还是管道化，都会造成队头阻塞(请求阻塞)。解决http队头阻塞的方法：1. 并发TCP连接（浏览器一个域名采用6-8个TCP连接，并发HTTP请求）2. 域名分片（多个域名，可以建立更多的TCP连接，从而提高HTTP请求的并发）2. HTTP2方式http2使用一个域名单一TCP连接发送请求，请求包被二进制分帧，不同请求可以互相穿插，避免了http层面的请求队头阻塞。但是不能避免TCP层面的队头阻塞。 --><p>但是，减少请求量、使用缓存、减少dns查找等的优化方案无论在哪个版本都同样适用。</p><h2 id="页面解析-交互"><a href="#页面解析-交互" class="headerlink" title="页面解析/交互"></a>页面解析/交互</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>html5<br>优化层级结构<br>语义化标签</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>减少嵌套层级，优化css路径<br>低权重原则——-避免滥用子选择器<br>进可能使用class（少用id），而不是tag 或 attr 选择器。<br>精简CSS代码。缩写，0，单位，空格，注释<br>合理使用layer层<br>合理利用GPU加速：动画<br><!-- Translate，Rotate，Scale，opacity，Filter --><br>避免CSS表达式</p><!-- [性能优化之回流重绘](https://blog.csdn.net/qq_40544434/article/details/112740407) --><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>js是单线程的。</p><p>减少对DOM的操作，避免造成页面的Repaint和Reflow；或合并一些dom操作, Virtual DOM。<br>ajax。避免发送多次/重复请求<br>requestAnimationFrame &amp; requestIdleCallback<br>也可以利用web worker</p><!-- spa 和ssr --><p>es module</p><h2 id="新的技术"><a href="#新的技术" class="headerlink" title="新的技术"></a>新的技术</h2><p>ArrayBuffer<!-- 和SharedArrayBuffer --><br>PWA<br>indexedDB<br>WebAssembly<br>WebGL<br><del>WebCL</del></p><p>新的图片/视频格式。 avif， av1</p><!-- [AVIF has landed](https://jakearchibald.com/2020/avif-has-landed/)[AV1编码质量初探](https://zhuanlan.zhihu.com/p/86890266)avif的垫片polyfill: https://github.com/Kagami/avif.js [爱奇艺成为国内首家启用AV1格式的视频网站 同画质播放节省超20%流量](https://www.iqiyi.com/common/20200430/f6a1e65e943522de.html)  --><!-- [现代Web前端性能优化].md浏览器开放了越来越多的底层能力, 让Web页面与操作系统的距离越来越近, 不过开发者要掌握的语言也越来越多OpenGL → WebGLOpenCL → WebCL C/C++ → WebAssembly名称    |应用场景|    主要问题--| --| --WebGL    | 2D/3D图像渲染    | Shader切换成本WebCL    | 并行计算    | 已经废弃WebAssembly|     号称 anywhere    | 加载速度, 首次执行效率 --><!--参考:<!-- [现代Web前端性能优化](.**./_priv/tal/) --!->[网校增长前端业务的性能优化思考、实践与展望](https://ttc.zhiyinlou.com/#/articleDetail?id=2742)[说透前端性能优化1：性能为什么重要？](https://ttc.zhiyinlou.com/#/articleDetail?id=2308)<!-- [[说透前端性能优化2：图片优化七式]](https://ttc.zhiyinlou.com/#/articleDetail?id=2326)[[说透前端性能优化3：HTML、CSS和JS优化]](https://ttc.zhiyinlou.com/#/articleDetail?id=2338)[[说透前端性能优化4：关键指标的计算、评估与优化]](https://ttc.zhiyinlou.com/#/articleDetail?id=2339) --!->[从渲染原理谈前端性能优化](https://ttc.zhiyinlou.com/#/articleDetail?id=38) --><p># 性能指标和监测<br><a href="https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/" target="_blank" rel="noopener">How Fast Should A Website Load &amp; How To Speed It Up</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 本文地址: &lt;https://ttc.zhiyinlou.com/#/articleDetail?id=2837&gt; --&gt;
&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;text-align:right&quot;&gt; 2021.1.19 星期二 &lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;天下武功唯快不破
      
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/sum/js/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端和Qiankun</title>
    <link href="http://yoursite.com/sum/jsplus/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%92%8Cqiankun/"/>
    <id>http://yoursite.com/sum/jsplus/微前端和qiankun/</id>
    <published>2021-01-12T00:00:00.000Z</published>
    <updated>2021-01-12T06:25:03.010Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:right"> 2020.12 星期二  ： </p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>qiankun: <a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener">https://qiankun.umijs.org/zh/guide</a><br>qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</p><h2 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h2><blockquote><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. – Micro Frontends<br>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p></blockquote><a id="more"></a><p>微前端架构具备以下几个核心价值：<br>技术栈无关<br>主框架不限制接入应用的技术栈，微应用具备完全自主权</p><p>独立开发、独立部署<br>微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</p><p>增量升级<br>在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p><p>独立运行时<br>每个微应用之间状态隔离，运行时状态不共享</p><h2 id="为什么不是-iframe"><a href="#为什么不是-iframe" class="headerlink" title="为什么不是 iframe"></a>为什么不是 iframe</h2><h1 id="微前端的核心价值"><a href="#微前端的核心价值" class="headerlink" title="微前端的核心价值"></a>微前端的核心价值</h1><p><a href="https://zhuanlan.zhihu.com/p/95085796" target="_blank" rel="noopener">微前端的核心价值</a></p><p>我认为微前端的核心价值在于 “技术栈无关”，这才是它诞生的理由，或者说这才是能说服我采用微前端方案的理由。</p><h2 id="为什么”技术栈无关”这么重要？"><a href="#为什么”技术栈无关”这么重要？" class="headerlink" title="为什么”技术栈无关”这么重要？"></a>为什么”技术栈无关”这么重要？</h2><h2 id="为什么我认为”技术栈无关”才是微前端的初衷？"><a href="#为什么我认为”技术栈无关”才是微前端的初衷？" class="headerlink" title="为什么我认为”技术栈无关”才是微前端的初衷？"></a>为什么我认为”技术栈无关”才是微前端的初衷？</h2><blockquote><p>微前端的初衷应该还是来解决工程问题的，带来的产品价值在不同的领域可大可小。 比如在阿里云这种典型的云产品控制台的场景下，它带来的产品价值就会很可观。</p></blockquote><h2 id="微前端方案正确的架构姿势"><a href="#微前端方案正确的架构姿势" class="headerlink" title="微前端方案正确的架构姿势"></a>微前端方案正确的架构姿势</h2><p>「技术栈无关」是架构上的准绳，具体到实现时，对应的就是：应用之间不应该有任何直接或间接的技术栈、依赖、以及实现上的耦合。</p><h1 id="可能是你见过最完善的微前端解决方案"><a href="#可能是你见过最完善的微前端解决方案" class="headerlink" title="可能是你见过最完善的微前端解决方案"></a>可能是你见过最完善的微前端解决方案</h1><p><a href="https://zhuanlan.zhihu.com/p/78362028" target="_blank" rel="noopener">可能是你见过最完善的微前端解决方案</a></p><p style="text-align:right"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-align:right&quot;&gt; 2020.12 星期二  ： &lt;/p&gt;

&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;qiankun: &lt;a href=&quot;https://qiankun.umijs.org/zh/guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://qiankun.umijs.org/zh/guide&lt;/a&gt;&lt;br&gt;qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。&lt;/p&gt;
&lt;h2 id=&quot;什么是微前端&quot;&gt;&lt;a href=&quot;#什么是微前端&quot; class=&quot;headerlink&quot; title=&quot;什么是微前端&quot;&gt;&lt;/a&gt;什么是微前端&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. – Micro Frontends&lt;br&gt;微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="sum" scheme="http://yoursite.com/categories/sum/"/>
    
      <category term="jsplus" scheme="http://yoursite.com/categories/sum/jsplus/"/>
    
    
  </entry>
  
</feed>
